\inc "std/stdbool.csh"
\inc "std/stdlib.csh"

\inc "aabb.csh"
\inc "bvh.csh"
\inc "hittable.csh"
\inc "hittable_list.csh"
\inc "interval.csh"
\inc "ray.csh"

@box_compare(a: hittable*, b: hittable*, axis_index: int32): int32 {
    a_axis_interval: interval = a!bounding_box().axis_interval(axis_index);
    b_axis_interval: interval = b!bounding_box().axis_interval(axis_index);
    ret (a_axis_interval.min < b_axis_interval.min) ? -1 : (a_axis_interval.min > b_axis_interval.min) ? 1 : 0;
}

@box_x_compare(a: void*, b: void*): int32 = box_compare(*[hittable**]a, *[hittable**]b, 0);
@box_y_compare(a: void*, b: void*): int32 = box_compare(*[hittable**]a, *[hittable**]b, 1);
@box_z_compare(a: void*, b: void*): int32 = box_compare(*[hittable**]a, *[hittable**]b, 2);

@bvh_node(list: hittable_list) = *me = bvh_node(list.objects, 0, list.objects.size);

@bvh_node(objects: vector, start: int64, end: int64) {
    me!type = 'B';

    me!bbox = aabb();
    for (object_index: int64 = start; object_index < end; ++object_index)
        me!bbox = aabb(me!bbox, ([hittable*]objects[object_index])!bounding_box());

    axis: int32 = me!bbox.longest_axis();

    comparator: (void*, void*)(int32)* = (axis == 0) ? box_x_compare
                                       : (axis == 1) ? box_y_compare
                                                     : box_z_compare;

    object_span: int64 = end - start;

    if (object_span == 1) {
        me!left = me!right = objects[start];
    } else if (object_span == 2) {
        me!left = objects[start];
        me!right = objects[start + 1];
    } else {
        objects.sort(start, object_span, comparator);

        mid: int64 = start + object_span / 2;
        me!left = malloc($(bvh_node));
        *[bvh_node*]me!left = bvh_node(objects, start, mid);
        me!right = malloc($(bvh_node));
        *[bvh_node*]me!right = bvh_node(objects, mid, end);
    }
}

@hit:bvh_node(r: ray, ray_t: interval, rec: hit_record*): bool {
    if (!me!bbox.hit(r, ray_t))
        ret false;

    hit_left:  bool = me!left!hit(r, ray_t, rec);
    hit_right: bool = me!right!hit(r, interval(ray_t.min, hit_left ? rec!t : ray_t.max), rec);

    ret hit_left || hit_right;
}

@bounding_box:bvh_node:aabb = me!bbox;
