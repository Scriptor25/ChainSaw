\inc "std/math.csh"
\inc "std/stdio.csh"

\inc "common.csh"
\inc "vec3.csh"

@vec3(x: flt64, y: flt64, z: flt64) {
    me!x = x;
    me!y = y;
    me!z = z;
}

@vec3(s: flt64) = *me = vec3(s, s, s);
@vec3 = *me = vec3(0, 0, 0);

@"-":vec3:vec3 = vec3(-me!x, -me!y, -me!z);
@"[]":vec3(i: int32): flt64* = (i == 0) ? &me!x : (i == 1) ? &me!y : (i == 2) ? &me!z : [flt64*]0;

@"+=":vec3(v: vec3): vec3 {
    me!x += v.x;
    me!y += v.y;
    me!z += v.z;
    ret *me;
}

@"*=":vec3(t: flt64): vec3 {
    me!x *= t;
    me!y *= t;
    me!z *= t;
    ret *me;
}

@"/=":vec3(t: flt64): vec3 = *me *= 1 / t;

@length_squared:vec3:flt64 = me!x * me!x + me!y * me!y + me!z * me!z;
@length:vec3:flt64 = sqrt(me!length_squared());

@near_zero:vec3:bool {
    ## Return true if the vector is close to zero in all dimensions.
    s: flt64 = 1e-8;
    ret (fabs(me!x) < s) && (fabs(me!y) < s) && (fabs(me!z) < s);
}

@"+"(u: vec3, v: vec3): vec3 = vec3(u.x + v.x, u.y + v.y, u.z + v.z);
@"-"(u: vec3, v: vec3): vec3 = vec3(u.x - v.x, u.y - v.y, u.z - v.z);
@"*"(u: vec3, v: vec3): vec3 = vec3(u.x * v.x, u.y * v.y, u.z * v.z);
@"*"(t: flt64, v: vec3): vec3 = vec3(t * v.x, t * v.y, t * v.z);
@"*"(v: vec3, t: flt64): vec3 = t * v;
@"/"(v: vec3, t: flt64): vec3 = (1 / t) * v;

@dot(u: vec3, v: vec3): flt64 = u.x * v.x + u.y * v.y + u.z * v.z;
@cross(u: vec3, v: vec3): vec3 = vec3(
    u.y * v.z - u.z * v.y,
    u.z * v.x - u.x * v.z,
    u.x * v.y - u.y * v.x
);

@unit_vector(v: vec3): vec3 = v / v.length();

@random_vec3::vec3 = vec3(random(), random(), random());
@random_vec3(min: flt64, max: flt64): vec3 = vec3(random(min, max), random(min, max), random(min, max));

@random_in_unit_sphere::vec3 {
    p: vec3;
    for (n: int32; n < 100; ++n) {
        p = random_vec3(-1.0, 1.0);
        if (p.length_squared() < 1.0)
            ret p;
    }
    ret unit_vector(p);
}

@random_in_unit_disk::vec3 {
    p: vec3;
    for (n: int32; n < 100; ++n) {
        p = vec3(random(-1.0, 1.0), random(-1.0, 1.0), 0.0);
        if (p.length_squared() < 1.0)
            ret p;
    }
    ret unit_vector(p);
}

@random_unit_vector::vec3 = unit_vector(random_in_unit_sphere());

@random_on_hemisphere(normal: vec3): vec3 {
    on_unit_sphere: vec3 = random_unit_vector();
    if (dot(on_unit_sphere, normal) > 0.0) ## In the same hemisphere as the normal
        ret on_unit_sphere;
    ret -on_unit_sphere;
}

@reflect(v: vec3, n: vec3): vec3 = v - 2.0 * dot(v, n) * n;
@refract(uv: vec3, n: vec3, etai_over_etat: flt64): vec3 {
    cos_theta: flt64 = fmin(dot(-uv, n), 1.0);
    r_out_perp: vec3 =  etai_over_etat * (uv + cos_theta * n);
    r_out_parallel: vec3 = -sqrt(fabs(1.0 - r_out_perp.length_squared())) * n;
    ret r_out_perp + r_out_parallel;
}
