\inc "std/stdio.csh"
\inc "std/stdlib.csh"

\inc "bvh.csh"
\inc "camera.csh"
\inc "common.csh"
\inc "hittable.csh"
\inc "hittable_list.csh"
\inc "material.csh"
\inc "sphere.csh"
\inc "vec3.csh"

@simple(filename: int8*): void {
    world: hittable_list;

    material_ground: lambertian = lambertian(vec3(0.8, 0.8, 0.0));
    material_center: lambertian = lambertian(vec3(0.1, 0.2, 0.5));
    material_left: dielectric   = dielectric(1.50);
    material_bubble: dielectric = dielectric(1.00 / 1.50);
    material_right: metal       = metal(vec3(0.8, 0.6, 0.2), 1.0);

    world.add([hittable*]&sphere(vec3( 0, -100.5, -1.0), 100.0, [material*]&material_ground));
    world.add([hittable*]&sphere(vec3( 0,    0.0, -1.2),   0.5, [material*]&material_center));
    world.add([hittable*]&sphere(vec3(-1,    0.0, -1.0),   0.5, [material*]&material_left));
    world.add([hittable*]&sphere(vec3(-1,    0.0, -1.0),   0.4, [material*]&material_bubble));
    world.add([hittable*]&sphere(vec3( 1,    0.0, -1.0),   0.5, [material*]&material_right));

    cam: camera;
    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 400;
    cam.samples_per_pixel = 100;
    cam.max_depth         = 50;

    cam.vfov     = 20;
    cam.lookfrom = vec3(-2, 2, 1);
    cam.lookat   = vec3(0, 0, -1);
    cam.vup      = vec3(0, 1, 0);

    cam.defocus_angle = 10;
    cam.focus_dist    = 3.4;

    cam.render(filename, [hittable*]&world);

    world.destroy();
}

@final(filename: int8*): void {
    world: hittable_list;

    pointers: vector;
    #for (a: int32 = -11; a < 11; ++a) {
        for (b: int32 = -11; b < 11; ++b) {
            choose_mat: flt64 = random();
            center: point3 = vec3(a + 0.9 * random(), 0.2, b + 0.9 * random());

            dc: vec3 = center - vec3(4, 0.2, 0);
            if (dc.length() > 0.9) {
                sp: sphere* = malloc($(sphere));
                mp: material*;

                if (choose_mat < 0.8) {
                    ## diffuse
                    albedo: color = random_vec3() * random_vec3();
                    mp = malloc($(lambertian));
                    *[lambertian*]mp = lambertian(albedo);
                    center2: point3 = center + vec3(0, random(0, 0.5), 0);
                    *sp = sphere(center, center2, 0.2, mp);
                } else if (choose_mat < 0.95) {
                    ## metal
                    albedo: color = random_vec3(0.5, 1.0);
                    fuzz: flt64 = random(0.0, 0.5);
                    mp = malloc($(metal));
                    *[metal*]mp = metal(albedo, fuzz);
                    *sp = sphere(center, 0.2, mp);
                } else {
                    ## glass
                    mp = malloc($(dielectric));
                    *[dielectric*]mp = dielectric(1.5);
                    *sp = sphere(center, 0.2, mp);
                }

                pointers.push_back(sp);
                pointers.push_back(mp);
                world.add([hittable*]sp);
            }
        }
    }#

    ground_material: lambertian = lambertian(vec3(0.5, 0.5, 0.5));
    material1: dielectric       = dielectric(1.5);
    material2: lambertian       = lambertian(vec3(0.4, 0.2, 0.1));
    material3: metal            = metal(vec3(0.7, 0.6, 0.5), 0);

    s1: sphere = sphere(vec3(0, -1000, 0), 1000, [material*]&ground_material);
    s2: sphere = sphere(    vec3(0, 1, 0),    1, [material*]&material1);
    s3: sphere = sphere(   vec3(-4, 1, 0),    1, [material*]&material2);
    s4: sphere = sphere(    vec3(4, 1, 0),    1, [material*]&material3);

    world.add([hittable*]&s1);
    world.add([hittable*]&s2);
    world.add([hittable*]&s3);
    world.add([hittable*]&s4);

    bvh: bvh_node = bvh_node(world);

    cam: camera;
    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 1200;
    cam.samples_per_pixel = 500;
    cam.max_depth         = 50;

    cam.vfov     = 20;
    cam.lookfrom = vec3(13, 2, 3);
    cam.lookat   = vec3(0, 0, 0);
    cam.vup      = vec3(0, 1, 0);

    cam.defocus_angle = 0.6;
    cam.focus_dist    = 10;

    cam.render(filename, [hittable*]&bvh);

    world.destroy();

    for (i: int64; i < pointers.size; ++i) {
        ptr: void* = pointers[i];
        printf("%p (%c)\n", ptr, *([int8*]ptr));
        free(ptr);
    }
    pointers.destroy();
}

## MAIN
@[c]main(argc: int32, argv: int8**): int32 {

    for (a: int32; a < argc; ++a)
        printf("#%-3d: %s\n", a, argv[a]);

    if (argc != 2)
        ret 1;

    simple(argv[1]);
    ret 0;
}
