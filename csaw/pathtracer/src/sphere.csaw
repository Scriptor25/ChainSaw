\inc "std/math.csh"
\inc "std/stdbool.csh"
\inc "std/stdio.csh"

\inc "aabb.csh"
\inc "hittable.csh"
\inc "interval.csh"
\inc "material.csh"
\inc "ray.csh"
\inc "sphere.csh"
\inc "vec3.csh"

@sphere(center: point3, radius: flt64, mat: material*) {
    me!type = 'S';
    me!center1 = center;
    me!radius = fmax(0, radius);
    me!mat = mat;
    me!is_moving = false;

    rvec: vec3 = vec3(radius);
    me!bbox = aabb(center - rvec, center + rvec);
}

@sphere(center1: point3, center2: point3, radius: flt64, mat: material*) {
    me!type = 'S';
    me!center1 = center1;
    me!radius = fmax(0, radius);
    me!mat = mat;
    me!is_moving = true;
    me!center_vec = center2 - center1;

    rvec: vec3 = vec3(radius);
    box1: aabb = aabb(center1 - rvec, center1 + rvec);
    box2: aabb = aabb(center2 - rvec, center2 + rvec);
    me!bbox = aabb(box1, box2);
}

@center:sphere(time: flt64): point3 = me!center1 + time * me!center_vec;

@hit:sphere(r: ray, ray_t: interval, rec: hit_record*): bool {
    center: point3 = me!is_moving ? me!center(r.time) : me!center1;
    oc: vec3 = center - r.origin;
    a: flt64 = r.direction.length_squared();
    h: flt64 = dot(r.direction, oc);
    c: flt64 = oc.length_squared() - me!radius * me!radius;

    discriminant: flt64 = h * h - a * c;
    if (discriminant < 0)
        ret false;

    sqrtd: flt64 = sqrt(discriminant);
    inva: flt64 = 1 / a;

    ## Find the nearest root that lies in the acceptable range
    root: flt64 = (h - sqrtd) * inva;
    if (!ray_t.surrounds(root)) {
        root = (h + sqrtd) * inva;
        if (!ray_t.surrounds(root))
            ret false;
    }

    rec!t = root;
    rec!p = r.at(rec!t);
    outward_normal: vec3 = (rec!p - center) / me!radius;
    rec!set_face_normal(r, outward_normal);
    rec!mat = me!mat;

    ret true;
}

@bounding_box:sphere:aabb = me!bbox;
