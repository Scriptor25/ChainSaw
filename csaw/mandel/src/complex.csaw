\inc "complex.csh"
\inc "std/math.csh"
\inc "std/stdio.csh"

@complex(real: flt64, imaginary: flt64) {
    me!real = real;
    me!imaginary = imaginary;
}

@"+=":complex(z: complex): complex {
    me!real += z.real;
    me!imaginary += z.imaginary;
    ret *me;
}

@"-=":complex(z: complex): complex {
    me!real      -= z.real;
    me!imaginary -= z.imaginary;
    ret *me;
}

@"*=":complex(z: complex): complex {
    real:      flt64 = me!real * z.real      - me!imaginary * z.imaginary;
    imaginary: flt64 = me!real * z.imaginary + me!imaginary * z.real;
    me!real = real;
    me!imaginary = imaginary;
    ret *me;
}

@"/=":complex(z: complex): complex {
    *me *= z.conjugate();
    zmod: flt64 = z.mod();
    div:  flt64 = 1 / (zmod * zmod);
    me!real      *= div;
    me!imaginary *= div;
    ret *me;
}

@conjugate:complex:complex = complex(me!real, -me!imaginary);

@mod:complex:flt64 = sqrt(me!real * me!real + me!imaginary * me!imaginary);

@square:complex:complex {
    real:      flt64 = me!real * me!real - me!imaginary * me!imaginary;
    imaginary: flt64 = 2 * me!real * me!imaginary;
    ret complex(real, imaginary);
}

@arg:complex:flt64 = atan2(me!imaginary, me!real);

@inverse:complex:complex = complex(1, 0) / *me;

@abs:complex:flt64 = sqrt(me!real * me!real + me!imaginary * me!imaginary);

@print:complex:void = printf("%f %s%fi", me!real, (me!imaginary < 0 ? "" : "+ "), me!imaginary);

@"+"(z1: complex, z2: complex): complex = complex(z1.real + z2.real, z1.imaginary + z2.imaginary);

@"-"(z1: complex, z2: complex): complex = complex(z1.real - z2.real, z1.imaginary - z2.imaginary);

@"*"(z1: complex, z2: complex): complex {
    r: flt64 = z1.real * z2.real      - z1.imaginary * z2.imaginary;
    i: flt64 = z1.real * z2.imaginary + z1.imaginary * z2.real;
    ret complex(r, i);
}

@"/"(z1: complex, z2: complex): complex {
    res:  complex = z1 * z2.conjugate();
    zmod: flt64   = z2.mod();
    div:  flt64   = 1 / (zmod * zmod);
    ret complex(res.real * div, res.imaginary * div);
}

@exp(z: complex): complex {
    a: flt64 = z.real;
    b: flt64 = z.imaginary;
    r: flt64 = exp(a);
    a = r * cos(b);
    b = r * sin(b);
    ret complex(a, b);
}

@sin(z: complex): complex {
    x:     flt64 = exp(z.imaginary);
    x_inv: flt64 = 1 / x;
    r:     flt64 = sin(z.real) * (x + x_inv) / 2;
    i:     flt64 = cos(z.real) * (x - x_inv) / 2;
    ret complex(r, i);
}

@cos(z: complex): complex {
    x:     flt64 = exp(z.imaginary);
    x_inv: flt64 = 1 / x;
    r:     flt64 =  cos(z.real) * (x + x_inv) / 2;
    i:     flt64 = -sin(z.real) * (x - x_inv) / 2;
    ret complex(r, i);
}

@tan(z: complex): complex   = sin(z) / cos(z);

@cot(z: complex): complex   = complex(1, 0) / tan(z);

@sec(z: complex): complex   = complex(1, 0) / cos(z);

@cosec(z: complex): complex = complex(1, 0) / sin(z);
