# PTHREAD #

PTHREAD_CANCEL_ASYNCHRONOUS: int32;
PTHREAD_CANCEL_ENABLE:       int32;
PTHREAD_CANCEL_DEFERRED:     int32;
PTHREAD_CANCEL_DISABLE:      int32;
PTHREAD_CANCELED:            int32;
PTHREAD_COND_INITIALIZER:    int32;
PTHREAD_CREATE_DETACHED:     int32;
PTHREAD_CREATE_JOINABLE:     int32;
PTHREAD_EXPLICIT_SCHED:      int32;
PTHREAD_INHERIT_SCHED:       int32;
PTHREAD_MUTEX_DEFAULT:       int32;
PTHREAD_MUTEX_ERRORCHECK:    int32;
PTHREAD_MUTEX_NORMAL:        int32;
PTHREAD_MUTEX_INITIALIZER:   int32;
PTHREAD_MUTEX_RECURSIVE:     int32;
PTHREAD_ONCE_INIT:           int32;
PTHREAD_PRIO_INHERIT:        int32;
PTHREAD_PRIO_NONE:           int32;
PTHREAD_PRIO_PROTECT:        int32;
PTHREAD_PROCESS_SHARED:      int32;
PTHREAD_PROCESS_PRIVATE:     int32;
PTHREAD_RWLOCK_INITIALIZER:  int32;
PTHREAD_SCOPE_PROCESS:       int32;
PTHREAD_SCOPE_SYSTEM:        int32;

def pthread_attr_t;
def pthread_cond_t;
def pthread_condattr_t;
def pthread_key_t;
def pthread_mutex_t;
def pthread_mutexattr_t;
def pthread_once_t;
def pthread_rwlock_t;
def pthread_rwlockattr_t;
def pthread_t;

@[c]pthread_attr_destroy(pthread_attr_t*): int32;
@[c]pthread_attr_getdetachstate(pthread_attr_t*, int*): int32;
@[c]pthread_attr_getguardsize(pthread_attr_t*, size_t*): int32;
@[c]pthread_attr_getinheritsched(pthread_attr_t*, int*): int32;
@[c]pthread_attr_getschedparam(pthread_attr_t*, sched_param*): int32;
@[c]pthread_attr_getschedpolicy(pthread_attr_t*, int*): int32;
@[c]pthread_attr_getscope(pthread_attr_t*, int*): int32;
@[c]pthread_attr_getstackaddr(pthread_attr_t*, void**): int32;
@[c]pthread_attr_getstacksize(pthread_attr_t*, size_t*): int32;
@[c]pthread_attr_init(pthread_attr_t*): int32;
@[c]pthread_attr_setdetachstate(pthread_attr_t*, int): int32;
@[c]pthread_attr_setguardsize(pthread_attr_t*, size_t): int32;
@[c]pthread_attr_setinheritsched(pthread_attr_t*, int): int32;
@[c]pthread_attr_setschedparam(pthread_attr_t*, sched_param*): int32;
@[c]pthread_attr_setschedpolicy(pthread_attr_t*, int): int32;
@[c]pthread_attr_setscope(pthread_attr_t*, int): int32;
@[c]pthread_attr_setstackaddr(pthread_attr_t*, void*): int32;
@[c]pthread_attr_setstacksize(pthread_attr_t*, size_t): int32;
@[c]pthread_cancel(pthread_t): int32;
@[c]pthread_cleanup_push(void*, void*): void;
@[c]pthread_cleanup_pop(int): void;
@[c]pthread_cond_broadcast(pthread_cond_t*): int32;
@[c]pthread_cond_destroy(pthread_cond_t*): int32;
@[c]pthread_cond_init(pthread_cond_t*, pthread_condattr_t*): int32;
@[c]pthread_cond_signal(pthread_cond_t*): int32;
@[c]pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, timespec*): int32;
@[c]pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*): int32;
@[c]pthread_condattr_destroy(pthread_condattr_t*): int32;
@[c]pthread_condattr_getpshared(pthread_condattr_t*, int*): int32;
@[c]pthread_condattr_init(pthread_condattr_t*): int32;
@[c]pthread_condattr_setpshared(pthread_condattr_t*, int): int32;
@[c]pthread_create(pthread_t*, pthread_attr_t*, (void*)(void*)*, void*): int32;
@[c]pthread_detach(pthread_t): int32;
@[c]pthread_equal(pthread_t, pthread_t): int32;
@[c]pthread_exit(void*): void;
@[c]pthread_getconcurrency::int32;
@[c]pthread_getschedparam(pthread_t, int*, sched_param*): int32;
@[c]pthread_getspecific(pthread_key_t): void*;
@[c]pthread_join(pthread_t, void**): int32;
@[c]pthread_key_create(pthread_key_t*, (void*)(void)*): int32;
@[c]pthread_key_delete(pthread_key_t): int32;
@[c]pthread_mutex_destroy(pthread_mutex_t*): int32;
@[c]pthread_mutex_getprioceiling(pthread_mutex_t*, int*): int32;
@[c]pthread_mutex_init(pthread_mutex_t*, pthread_mutexattr_t*): int32;
@[c]pthread_mutex_lock(pthread_mutex_t*): int32;
@[c]pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*): int32;
@[c]pthread_mutex_trylock(pthread_mutex_t*): int32;
@[c]pthread_mutex_unlock(pthread_mutex_t*): int32;
@[c]pthread_mutexattr_destroy(pthread_mutexattr_t*): int32;
@[c]pthread_mutexattr_getprioceiling(pthread_mutexattr_t*, int*): int32;
@[c]pthread_mutexattr_getprotocol(pthread_mutexattr_t*, int*): int32;
@[c]pthread_mutexattr_getpshared(pthread_mutexattr_t*, int*): int32;
@[c]pthread_mutexattr_gettype(pthread_mutexattr_t*, int*): int32;
@[c]pthread_mutexattr_init(pthread_mutexattr_t*): int32;
@[c]pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int): int32;
@[c]pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int): int32;
@[c]pthread_mutexattr_setpshared(pthread_mutexattr_t*, int): int32;
@[c]pthread_mutexattr_settype(pthread_mutexattr_t*, int): int32;
@[c]pthread_once(pthread_once_t*, ()(void)*): int32;
@[c]pthread_rwlock_destroy(pthread_rwlock_t*): int32;
@[c]pthread_rwlock_init(pthread_rwlock_t*, pthread_rwlockattr_t*): int32;
@[c]pthread_rwlock_rdlock(pthread_rwlock_t*): int32;
@[c]pthread_rwlock_tryrdlock(pthread_rwlock_t*): int32;
@[c]pthread_rwlock_trywrlock(pthread_rwlock_t*): int32;
@[c]pthread_rwlock_unlock(pthread_rwlock_t*): int32;
@[c]pthread_rwlock_wrlock(pthread_rwlock_t*): int32;
@[c]pthread_rwlockattr_destroy(pthread_rwlockattr_t*): int32;
@[c]pthread_rwlockattr_getpshared(pthread_rwlockattr_t*, int*): int32;
@[c]pthread_rwlockattr_init(pthread_rwlockattr_t*): int32;
@[c]pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int): int32;
@[c]pthread_self::pthread_t;
@[c]pthread_setcancelstate(int, int*): int32;
@[c]pthread_setcanceltype(int, int*): int32;
@[c]pthread_setconcurrency(int): int32;
@[c]pthread_setschedparam(pthread_t, int , sched_param*): int32;
@[c]pthread_setspecific(pthread_key_t, void*): int32;
@[c]pthread_testcancel::void;
