# GL #

def khronos_uint8_t = int8;
def khronos_float_t = flt32;
def khronos_ssize_t = int64;
def khronos_intptr_t = int64;
def khronos_int16_t = int16;
def khronos_int8_t = int8;
def khronos_uint16_t = int16;
def khronos_int64_t = int64;
def khronos_uint64_t = int64;

def GLvoid = void;
def GLenum = int32;
def GLbitfield = int32;
def GLboolean = int8;
def GLubyte = khronos_uint8_t;
def GLint = int32;
def GLuint = int32;
def GLsizei = int32;
def GLfloat = khronos_float_t;
def GLdouble = flt64;

GL_DEPTH_BUFFER_BIT: [internal] int32               = 0x00000100;
GL_STENCIL_BUFFER_BIT: [internal] int32             = 0x00000400;
GL_COLOR_BUFFER_BIT: [internal] int32               = 0x00004000;
GL_FALSE: [internal] int32                          = 0;
GL_TRUE: [internal] int32                           = 1;
GL_POINTS: [internal] int32                         = 0x0000;
GL_LINES: [internal] int32                          = 0x0001;
GL_LINE_LOOP: [internal] int32                      = 0x0002;
GL_LINE_STRIP: [internal] int32                     = 0x0003;
GL_TRIANGLES: [internal] int32                      = 0x0004;
GL_TRIANGLE_STRIP: [internal] int32                 = 0x0005;
GL_TRIANGLE_FAN: [internal] int32                   = 0x0006;
GL_QUADS: [internal] int32                          = 0x0007;
GL_NEVER: [internal] int32                          = 0x0200;
GL_LESS: [internal] int32                           = 0x0201;
GL_EQUAL: [internal] int32                          = 0x0202;
GL_LEQUAL: [internal] int32                         = 0x0203;
GL_GREATER: [internal] int32                        = 0x0204;
GL_NOTEQUAL: [internal] int32                       = 0x0205;
GL_GEQUAL: [internal] int32                         = 0x0206;
GL_ALWAYS: [internal] int32                         = 0x0207;
GL_ZERO: [internal] int32                           = 0;
GL_ONE: [internal] int32                            = 1;
GL_SRC_COLOR: [internal] int32                      = 0x0300;
GL_ONE_MINUS_SRC_COLOR: [internal] int32            = 0x0301;
GL_SRC_ALPHA: [internal] int32                      = 0x0302;
GL_ONE_MINUS_SRC_ALPHA: [internal] int32            = 0x0303;
GL_DST_ALPHA: [internal] int32                      = 0x0304;
GL_ONE_MINUS_DST_ALPHA: [internal] int32            = 0x0305;
GL_DST_COLOR: [internal] int32                      = 0x0306;
GL_ONE_MINUS_DST_COLOR: [internal] int32            = 0x0307;
GL_SRC_ALPHA_SATURATE: [internal] int32             = 0x0308;
GL_NONE: [internal] int32                           = 0;
GL_FRONT_LEFT: [internal] int32                     = 0x0400;
GL_FRONT_RIGHT: [internal] int32                    = 0x0401;
GL_BACK_LEFT: [internal] int32                      = 0x0402;
GL_BACK_RIGHT: [internal] int32                     = 0x0403;
GL_FRONT: [internal] int32                          = 0x0404;
GL_BACK: [internal] int32                           = 0x0405;
GL_LEFT: [internal] int32                           = 0x0406;
GL_RIGHT: [internal] int32                          = 0x0407;
GL_FRONT_AND_BACK: [internal] int32                 = 0x0408;
GL_NO_ERROR: [internal] int32                       = 0;
GL_INVALID_ENUM: [internal] int32                   = 0x0500;
GL_INVALID_VALUE: [internal] int32                  = 0x0501;
GL_INVALID_OPERATION: [internal] int32              = 0x0502;
GL_OUT_OF_MEMORY: [internal] int32                  = 0x0505;
GL_CW: [internal] int32                             = 0x0900;
GL_CCW: [internal] int32                            = 0x0901;
GL_POINT_SIZE: [internal] int32                     = 0x0B11;
GL_POINT_SIZE_RANGE: [internal] int32               = 0x0B12;
GL_POINT_SIZE_GRANULARITY: [internal] int32         = 0x0B13;
GL_LINE_SMOOTH: [internal] int32                    = 0x0B20;
GL_LINE_WIDTH: [internal] int32                     = 0x0B21;
GL_LINE_WIDTH_RANGE: [internal] int32               = 0x0B22;
GL_LINE_WIDTH_GRANULARITY: [internal] int32         = 0x0B23;
GL_POLYGON_MODE: [internal] int32                   = 0x0B40;
GL_POLYGON_SMOOTH: [internal] int32                 = 0x0B41;
GL_CULL_FACE: [internal] int32                      = 0x0B44;
GL_CULL_FACE_MODE: [internal] int32                 = 0x0B45;
GL_FRONT_FACE: [internal] int32                     = 0x0B46;
GL_DEPTH_RANGE: [internal] int32                    = 0x0B70;
GL_DEPTH_TEST: [internal] int32                     = 0x0B71;
GL_DEPTH_WRITEMASK: [internal] int32                = 0x0B72;
GL_DEPTH_CLEAR_VALUE: [internal] int32              = 0x0B73;
GL_DEPTH_FUNC: [internal] int32                     = 0x0B74;
GL_STENCIL_TEST: [internal] int32                   = 0x0B90;
GL_STENCIL_CLEAR_VALUE: [internal] int32            = 0x0B91;
GL_STENCIL_FUNC: [internal] int32                   = 0x0B92;
GL_STENCIL_VALUE_MASK: [internal] int32             = 0x0B93;
GL_STENCIL_FAIL: [internal] int32                   = 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL: [internal] int32        = 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS: [internal] int32        = 0x0B96;
GL_STENCIL_REF: [internal] int32                    = 0x0B97;
GL_STENCIL_WRITEMASK: [internal] int32              = 0x0B98;
GL_VIEWPORT: [internal] int32                       = 0x0BA2;
GL_DITHER: [internal] int32                         = 0x0BD0;
GL_BLEND_DST: [internal] int32                      = 0x0BE0;
GL_BLEND_SRC: [internal] int32                      = 0x0BE1;
GL_BLEND: [internal] int32                          = 0x0BE2;
GL_LOGIC_OP_MODE: [internal] int32                  = 0x0BF0;
GL_DRAW_BUFFER: [internal] int32                    = 0x0C01;
GL_READ_BUFFER: [internal] int32                    = 0x0C02;
GL_SCISSOR_BOX: [internal] int32                    = 0x0C10;
GL_SCISSOR_TEST: [internal] int32                   = 0x0C11;
GL_COLOR_CLEAR_VALUE: [internal] int32              = 0x0C22;
GL_COLOR_WRITEMASK: [internal] int32                = 0x0C23;
GL_DOUBLEBUFFER: [internal] int32                   = 0x0C32;
GL_STEREO: [internal] int32                         = 0x0C33;
GL_LINE_SMOOTH_HINT: [internal] int32               = 0x0C52;
GL_POLYGON_SMOOTH_HINT: [internal] int32            = 0x0C53;
GL_UNPACK_SWAP_BYTES: [internal] int32              = 0x0CF0;
GL_UNPACK_LSB_FIRST: [internal] int32               = 0x0CF1;
GL_UNPACK_ROW_LENGTH: [internal] int32              = 0x0CF2;
GL_UNPACK_SKIP_ROWS: [internal] int32               = 0x0CF3;
GL_UNPACK_SKIP_PIXELS: [internal] int32             = 0x0CF4;
GL_UNPACK_ALIGNMENT: [internal] int32               = 0x0CF5;
GL_PACK_SWAP_BYTES: [internal] int32                = 0x0D00;
GL_PACK_LSB_FIRST: [internal] int32                 = 0x0D01;
GL_PACK_ROW_LENGTH: [internal] int32                = 0x0D02;
GL_PACK_SKIP_ROWS: [internal] int32                 = 0x0D03;
GL_PACK_SKIP_PIXELS: [internal] int32               = 0x0D04;
GL_PACK_ALIGNMENT: [internal] int32                 = 0x0D05;
GL_MAX_TEXTURE_SIZE: [internal] int32               = 0x0D33;
GL_MAX_VIEWPORT_DIMS: [internal] int32              = 0x0D3A;
GL_SUBPIXEL_BITS: [internal] int32                  = 0x0D50;
GL_TEXTURE_1D: [internal] int32                     = 0x0DE0;
GL_TEXTURE_2D: [internal] int32                     = 0x0DE1;
GL_TEXTURE_WIDTH: [internal] int32                  = 0x1000;
GL_TEXTURE_HEIGHT: [internal] int32                 = 0x1001;
GL_TEXTURE_BORDER_COLOR: [internal] int32           = 0x1004;
GL_DONT_CARE: [internal] int32                      = 0x1100;
GL_FASTEST: [internal] int32                        = 0x1101;
GL_NICEST: [internal] int32                         = 0x1102;
GL_BYTE: [internal] int32                           = 0x1400;
GL_UNSIGNED_BYTE: [internal] int32                  = 0x1401;
GL_SHORT: [internal] int32                          = 0x1402;
GL_UNSIGNED_SHORT: [internal] int32                 = 0x1403;
GL_INT: [internal] int32                            = 0x1404;
GL_UNSIGNED_INT: [internal] int32                   = 0x1405;
GL_FLOAT: [internal] int32                          = 0x1406;
GL_STACK_OVERFLOW: [internal] int32                 = 0x0503;
GL_STACK_UNDERFLOW: [internal] int32                = 0x0504;
GL_CLEAR: [internal] int32                          = 0x1500;
GL_AND: [internal] int32                            = 0x1501;
GL_AND_REVERSE: [internal] int32                    = 0x1502;
GL_COPY: [internal] int32                           = 0x1503;
GL_AND_INVERTED: [internal] int32                   = 0x1504;
GL_NOOP: [internal] int32                           = 0x1505;
GL_XOR: [internal] int32                            = 0x1506;
GL_OR: [internal] int32                             = 0x1507;
GL_NOR: [internal] int32                            = 0x1508;
GL_EQUIV: [internal] int32                          = 0x1509;
GL_INVERT: [internal] int32                         = 0x150A;
GL_OR_REVERSE: [internal] int32                     = 0x150B;
GL_COPY_INVERTED: [internal] int32                  = 0x150C;
GL_OR_INVERTED: [internal] int32                    = 0x150D;
GL_NAND: [internal] int32                           = 0x150E;
GL_SET: [internal] int32                            = 0x150F;
GL_TEXTURE: [internal] int32                        = 0x1702;
GL_COLOR: [internal] int32                          = 0x1800;
GL_DEPTH: [internal] int32                          = 0x1801;
GL_STENCIL: [internal] int32                        = 0x1802;
GL_STENCIL_INDEX: [internal] int32                  = 0x1901;
GL_DEPTH_COMPONENT: [internal] int32                = 0x1902;
GL_RED: [internal] int32                            = 0x1903;
GL_GREEN: [internal] int32                          = 0x1904;
GL_BLUE: [internal] int32                           = 0x1905;
GL_ALPHA: [internal] int32                          = 0x1906;
GL_RGB: [internal] int32                            = 0x1907;
GL_RGBA: [internal] int32                           = 0x1908;
GL_POINT: [internal] int32                          = 0x1B00;
GL_LINE: [internal] int32                           = 0x1B01;
GL_FILL: [internal] int32                           = 0x1B02;
GL_KEEP: [internal] int32                           = 0x1E00;
GL_REPLACE: [internal] int32                        = 0x1E01;
GL_INCR: [internal] int32                           = 0x1E02;
GL_DECR: [internal] int32                           = 0x1E03;
GL_VENDOR: [internal] int32                         = 0x1F00;
GL_RENDERER: [internal] int32                       = 0x1F01;
GL_VERSION: [internal] int32                        = 0x1F02;
GL_EXTENSIONS: [internal] int32                     = 0x1F03;
GL_NEAREST: [internal] int32                        = 0x2600;
GL_LINEAR: [internal] int32                         = 0x2601;
GL_NEAREST_MIPMAP_NEAREST: [internal] int32         = 0x2700;
GL_LINEAR_MIPMAP_NEAREST: [internal] int32          = 0x2701;
GL_NEAREST_MIPMAP_LINEAR: [internal] int32          = 0x2702;
GL_LINEAR_MIPMAP_LINEAR: [internal] int32           = 0x2703;
GL_TEXTURE_MAG_FILTER: [internal] int32             = 0x2800;
GL_TEXTURE_MIN_FILTER: [internal] int32             = 0x2801;
GL_TEXTURE_WRAP_S: [internal] int32                 = 0x2802;
GL_TEXTURE_WRAP_T: [internal] int32                 = 0x2803;
GL_REPEAT: [internal] int32                         = 0x2901;

def PFNGLCULLFACEPROC = (mode: GLenum)(void)*;
def PFNGLFRONTFACEPROC = (mode: GLenum)(void)*;
def PFNGLHINTPROC = (target: GLenum, mode: GLenum)(void)*;
def PFNGLLINEWIDTHPROC = (width: GLfloat)(void)*;
def PFNGLPOINTSIZEPROC = (size: GLfloat)(void)*;
def PFNGLPOLYGONMODEPROC = (face: GLenum, mode: GLenum)(void)*;
def PFNGLSCISSORPROC = (x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXPARAMETERFPROC = (target: GLenum, pname: GLenum, param: GLfloat)(void)*;
def PFNGLTEXPARAMETERFVPROC = (target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLTEXPARAMETERIPROC = (target: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLTEXPARAMETERIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLTEXIMAGE1DPROC = (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXIMAGE2DPROC = (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLDRAWBUFFERPROC = (buf: GLenum)(void)*;
def PFNGLCLEARPROC = (mask: GLbitfield)(void)*;
def PFNGLCLEARCOLORPROC = (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)(void)*;
def PFNGLCLEARSTENCILPROC = (s: GLint)(void)*;
def PFNGLCLEARDEPTHPROC = (depth: GLdouble)(void)*;
def PFNGLSTENCILMASKPROC = (mask: GLuint)(void)*;
def PFNGLCOLORMASKPROC = (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean)(void)*;
def PFNGLDEPTHMASKPROC = (flag: GLboolean)(void)*;
def PFNGLDISABLEPROC = (cap: GLenum)(void)*;
def PFNGLENABLEPROC = (cap: GLenum)(void)*;
def PFNGLFINISHPROC = ()(void)*;
def PFNGLFLUSHPROC = ()(void)*;
def PFNGLBLENDFUNCPROC = (sfactor: GLenum, dfactor: GLenum)(void)*;
def PFNGLLOGICOPPROC = (opcode: GLenum)(void)*;
def PFNGLSTENCILFUNCPROC = (func: GLenum, ref: GLint, mask: GLuint)(void)*;
def PFNGLSTENCILOPPROC = (fail: GLenum, zfail: GLenum, zpass: GLenum)(void)*;
def PFNGLDEPTHFUNCPROC = (func: GLenum)(void)*;
def PFNGLPIXELSTOREFPROC = (pname: GLenum, param: GLfloat)(void)*;
def PFNGLPIXELSTOREIPROC = (pname: GLenum, param: GLint)(void)*;
def PFNGLREADBUFFERPROC = (src: GLenum)(void)*;
def PFNGLREADPIXELSPROC = (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLGETBOOLEANVPROC = (pname: GLenum, data: GLboolean*)(void)*;
def PFNGLGETDOUBLEVPROC = (pname: GLenum, data: GLdouble*)(void)*;
def PFNGLGETERRORPROC = ()(GLenum)*;
def PFNGLGETFLOATVPROC = (pname: GLenum, data: GLfloat*)(void)*;
def PFNGLGETINTEGERVPROC = (pname: GLenum, data: GLint*)(void)*;
def PFNGLGETSTRINGPROC = (name: GLenum)(GLubyte*)*;
def PFNGLGETTEXIMAGEPROC = (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLGETTEXPARAMETERFVPROC = (target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETTEXPARAMETERIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETTEXLEVELPARAMETERFVPROC = (target: GLenum, level: GLint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETTEXLEVELPARAMETERIVPROC = (target: GLenum, level: GLint, pname: GLenum, params: GLint*)(void)*;
def PFNGLISENABLEDPROC = (cap: GLenum)(GLboolean)*;
def PFNGLDEPTHRANGEPROC = (n: GLdouble, f: GLdouble)(void)*;
def PFNGLVIEWPORTPROC = (x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;

@[c]glCullFace(mode: GLenum): void;
@[c]glFrontFace(mode: GLenum): void;
@[c]glHint(target: GLenum, mode: GLenum): void;
@[c]glLineWidth(width: GLfloat): void;
@[c]glPointSize(size: GLfloat): void;
@[c]glPolygonMode(face: GLenum, mode: GLenum): void;
@[c]glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;
@[c]glTexParameterfv(target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glTexParameteri(target: GLenum, pname: GLenum, param: GLint): void;
@[c]glTexParameteriv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glDrawBuffer(buf: GLenum): void;
@[c]glClear(mask: GLbitfield): void;
@[c]glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void;
@[c]glClearStencil(s: GLint): void;
@[c]glClearDepth(depth: GLdouble): void;
@[c]glStencilMask(mask: GLuint): void;
@[c]glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;
@[c]glDepthMask(flag: GLboolean): void;
@[c]glDisable(cap: GLenum): void;
@[c]glEnable(cap: GLenum): void;
@[c]glFinish::void;
@[c]glFlush::void;
@[c]glBlendFunc(sfactor: GLenum, dfactor: GLenum): void;
@[c]glLogicOp(opcode: GLenum): void;
@[c]glStencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;
@[c]glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;
@[c]glDepthFunc(func: GLenum): void;
@[c]glPixelStoref(pname: GLenum, param: GLfloat): void;
@[c]glPixelStorei(pname: GLenum, param: GLint): void;
@[c]glReadBuffer(src: GLenum): void;
@[c]glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glGetBooleanv(pname: GLenum, data: GLboolean*): void;
@[c]glGetDoublev(pname: GLenum, data: GLdouble*): void;
@[c]glGetError::GLenum;
@[c]glGetFloatv(pname: GLenum, data: GLfloat*): void;
@[c]glGetIntegerv(pname: GLenum, data: GLint*): void;
@[c]glGetString(name: GLenum): GLubyte*;
@[c]glGetTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glGetTexParameterfv(target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glGetTexParameteriv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: GLfloat*): void;
@[c]glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: GLint*): void;
@[c]glIsEnabled(cap: GLenum): GLboolean;
@[c]glDepthRange(n: GLdouble, f: GLdouble): void;
@[c]glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;

def GLclampf = khronos_float_t;
def GLclampd = flt64;

GL_COLOR_LOGIC_OP: [internal] int32                 = 0x0BF2;
GL_POLYGON_OFFSET_UNITS: [internal] int32           = 0x2A00;
GL_POLYGON_OFFSET_POINT: [internal] int32           = 0x2A01;
GL_POLYGON_OFFSET_LINE: [internal] int32            = 0x2A02;
GL_POLYGON_OFFSET_FILL: [internal] int32            = 0x8037;
GL_POLYGON_OFFSET_FACTOR: [internal] int32          = 0x8038;
GL_TEXTURE_BINDING_1D: [internal] int32             = 0x8068;
GL_TEXTURE_BINDING_2D: [internal] int32             = 0x8069;
GL_TEXTURE_INTERNAL_FORMAT: [internal] int32        = 0x1003;
GL_TEXTURE_RED_SIZE: [internal] int32               = 0x805C;
GL_TEXTURE_GREEN_SIZE: [internal] int32             = 0x805D;
GL_TEXTURE_BLUE_SIZE: [internal] int32              = 0x805E;
GL_TEXTURE_ALPHA_SIZE: [internal] int32             = 0x805F;
GL_DOUBLE: [internal] int32                         = 0x140A;
GL_PROXY_TEXTURE_1D: [internal] int32               = 0x8063;
GL_PROXY_TEXTURE_2D: [internal] int32               = 0x8064;
GL_R3_G3_B2: [internal] int32                       = 0x2A10;
GL_RGB4: [internal] int32                           = 0x804F;
GL_RGB5: [internal] int32                           = 0x8050;
GL_RGB8: [internal] int32                           = 0x8051;
GL_RGB10: [internal] int32                          = 0x8052;
GL_RGB12: [internal] int32                          = 0x8053;
GL_RGB16: [internal] int32                          = 0x8054;
GL_RGBA2: [internal] int32                          = 0x8055;
GL_RGBA4: [internal] int32                          = 0x8056;
GL_RGB5_A1: [internal] int32                        = 0x8057;
GL_RGBA8: [internal] int32                          = 0x8058;
GL_RGB10_A2: [internal] int32                       = 0x8059;
GL_RGBA12: [internal] int32                         = 0x805A;
GL_RGBA16: [internal] int32                         = 0x805B;
GL_VERTEX_ARRAY: [internal] int32                   = 0x8074;

def PFNGLDRAWARRAYSPROC = (mode: GLenum, first: GLint, count: GLsizei)(void)*;
def PFNGLDRAWELEMENTSPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*)(void)*;
def PFNGLGETPOINTERVPROC = (pname: GLenum, params: void**)(void)*;
def PFNGLPOLYGONOFFSETPROC = (factor: GLfloat, units: GLfloat)(void)*;
def PFNGLCOPYTEXIMAGE1DPROC = (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint)(void)*;
def PFNGLCOPYTEXIMAGE2DPROC = (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)(void)*;
def PFNGLCOPYTEXSUBIMAGE1DPROC = (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei)(void)*;
def PFNGLCOPYTEXSUBIMAGE2DPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXSUBIMAGE1DPROC = (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXSUBIMAGE2DPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLBINDTEXTUREPROC = (target: GLenum, texture: GLuint)(void)*;
def PFNGLDELETETEXTURESPROC = (n: GLsizei, textures: GLuint*)(void)*;
def PFNGLGENTEXTURESPROC = (n: GLsizei, textures: GLuint*)(void)*;
def PFNGLISTEXTUREPROC = (texture: GLuint)(GLboolean)*;

@[c]glDrawArrays(mode: GLenum, first: GLint, count: GLsizei): void;
@[c]glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: void*): void;
@[c]glGetPointerv(pname: GLenum, params: void**): void;
@[c]glPolygonOffset(factor: GLfloat, units: GLfloat): void;
@[c]glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void;
@[c]glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;
@[c]glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void;
@[c]glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glBindTexture(target: GLenum, texture: GLuint): void;
@[c]glDeleteTextures(n: GLsizei, textures: GLuint*): void;
@[c]glGenTextures(n: GLsizei, textures: GLuint*): void;
@[c]glIsTexture(texture: GLuint): GLboolean;

GL_UNSIGNED_BYTE_3_3_2: [internal] int32            = 0x8032;
GL_UNSIGNED_SHORT_4_4_4_4: [internal] int32         = 0x8033;
GL_UNSIGNED_SHORT_5_5_5_1: [internal] int32         = 0x8034;
GL_UNSIGNED_INT_8_8_8_8: [internal] int32           = 0x8035;
GL_UNSIGNED_INT_10_10_10_2: [internal] int32        = 0x8036;
GL_TEXTURE_BINDING_3D: [internal] int32             = 0x806A;
GL_PACK_SKIP_IMAGES: [internal] int32               = 0x806B;
GL_PACK_IMAGE_HEIGHT: [internal] int32              = 0x806C;
GL_UNPACK_SKIP_IMAGES: [internal] int32             = 0x806D;
GL_UNPACK_IMAGE_HEIGHT: [internal] int32            = 0x806E;
GL_TEXTURE_3D: [internal] int32                     = 0x806F;
GL_PROXY_TEXTURE_3D: [internal] int32               = 0x8070;
GL_TEXTURE_DEPTH: [internal] int32                  = 0x8071;
GL_TEXTURE_WRAP_R: [internal] int32                 = 0x8072;
GL_MAX_3D_TEXTURE_SIZE: [internal] int32            = 0x8073;
GL_UNSIGNED_BYTE_2_3_3_REV: [internal] int32        = 0x8362;
GL_UNSIGNED_SHORT_5_6_5: [internal] int32           = 0x8363;
GL_UNSIGNED_SHORT_5_6_5_REV: [internal] int32       = 0x8364;
GL_UNSIGNED_SHORT_4_4_4_4_REV: [internal] int32     = 0x8365;
GL_UNSIGNED_SHORT_1_5_5_5_REV: [internal] int32     = 0x8366;
GL_UNSIGNED_INT_8_8_8_8_REV: [internal] int32       = 0x8367;
GL_UNSIGNED_INT_2_10_10_10_REV: [internal] int32    = 0x8368;
GL_BGR: [internal] int32                            = 0x80E0;
GL_BGRA: [internal] int32                           = 0x80E1;
GL_MAX_ELEMENTS_VERTICES: [internal] int32          = 0x80E8;
GL_MAX_ELEMENTS_INDICES: [internal] int32           = 0x80E9;
GL_CLAMP_TO_EDGE: [internal] int32                  = 0x812F;
GL_TEXTURE_MIN_LOD: [internal] int32                = 0x813A;
GL_TEXTURE_MAX_LOD: [internal] int32                = 0x813B;
GL_TEXTURE_BASE_LEVEL: [internal] int32             = 0x813C;
GL_TEXTURE_MAX_LEVEL: [internal] int32              = 0x813D;
GL_SMOOTH_POINT_SIZE_RANGE: [internal] int32        = 0x0B12;
GL_SMOOTH_POINT_SIZE_GRANULARITY: [internal] int32  = 0x0B13;
GL_SMOOTH_LINE_WIDTH_RANGE: [internal] int32        = 0x0B22;
GL_SMOOTH_LINE_WIDTH_GRANULARITY: [internal] int32  = 0x0B23;
GL_ALIASED_LINE_WIDTH_RANGE: [internal] int32       = 0x846E;

def PFNGLDRAWRANGEELEMENTSPROC = (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void*)(void)*;
def PFNGLTEXIMAGE3DPROC = (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXSUBIMAGE3DPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLCOPYTEXSUBIMAGE3DPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;

@[c]glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void*): void;
@[c]glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;

GL_TEXTURE0: [internal] int32                       = 0x84C0;
GL_TEXTURE1: [internal] int32                       = 0x84C1;
GL_TEXTURE2: [internal] int32                       = 0x84C2;
GL_TEXTURE3: [internal] int32                       = 0x84C3;
GL_TEXTURE4: [internal] int32                       = 0x84C4;
GL_TEXTURE5: [internal] int32                       = 0x84C5;
GL_TEXTURE6: [internal] int32                       = 0x84C6;
GL_TEXTURE7: [internal] int32                       = 0x84C7;
GL_TEXTURE8: [internal] int32                       = 0x84C8;
GL_TEXTURE9: [internal] int32                       = 0x84C9;
GL_TEXTURE10: [internal] int32                      = 0x84CA;
GL_TEXTURE11: [internal] int32                      = 0x84CB;
GL_TEXTURE12: [internal] int32                      = 0x84CC;
GL_TEXTURE13: [internal] int32                      = 0x84CD;
GL_TEXTURE14: [internal] int32                      = 0x84CE;
GL_TEXTURE15: [internal] int32                      = 0x84CF;
GL_TEXTURE16: [internal] int32                      = 0x84D0;
GL_TEXTURE17: [internal] int32                      = 0x84D1;
GL_TEXTURE18: [internal] int32                      = 0x84D2;
GL_TEXTURE19: [internal] int32                      = 0x84D3;
GL_TEXTURE20: [internal] int32                      = 0x84D4;
GL_TEXTURE21: [internal] int32                      = 0x84D5;
GL_TEXTURE22: [internal] int32                      = 0x84D6;
GL_TEXTURE23: [internal] int32                      = 0x84D7;
GL_TEXTURE24: [internal] int32                      = 0x84D8;
GL_TEXTURE25: [internal] int32                      = 0x84D9;
GL_TEXTURE26: [internal] int32                      = 0x84DA;
GL_TEXTURE27: [internal] int32                      = 0x84DB;
GL_TEXTURE28: [internal] int32                      = 0x84DC;
GL_TEXTURE29: [internal] int32                      = 0x84DD;
GL_TEXTURE30: [internal] int32                      = 0x84DE;
GL_TEXTURE31: [internal] int32                      = 0x84DF;
GL_ACTIVE_TEXTURE: [internal] int32                 = 0x84E0;
GL_MULTISAMPLE: [internal] int32                    = 0x809D;
GL_SAMPLE_ALPHA_TO_COVERAGE: [internal] int32       = 0x809E;
GL_SAMPLE_ALPHA_TO_ONE: [internal] int32            = 0x809F;
GL_SAMPLE_COVERAGE: [internal] int32                = 0x80A0;
GL_SAMPLE_BUFFERS: [internal] int32                 = 0x80A8;
GL_SAMPLES: [internal] int32                        = 0x80A9;
GL_SAMPLE_COVERAGE_VALUE: [internal] int32          = 0x80AA;
GL_SAMPLE_COVERAGE_INVERT: [internal] int32         = 0x80AB;
GL_TEXTURE_CUBE_MAP: [internal] int32               = 0x8513;
GL_TEXTURE_BINDING_CUBE_MAP: [internal] int32       = 0x8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X: [internal] int32    = 0x8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X: [internal] int32    = 0x8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y: [internal] int32    = 0x8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: [internal] int32    = 0x8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z: [internal] int32    = 0x8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: [internal] int32    = 0x851A;
GL_PROXY_TEXTURE_CUBE_MAP: [internal] int32         = 0x851B;
GL_MAX_CUBE_MAP_TEXTURE_SIZE: [internal] int32      = 0x851C;
GL_COMPRESSED_RGB: [internal] int32                 = 0x84ED;
GL_COMPRESSED_RGBA: [internal] int32                = 0x84EE;
GL_TEXTURE_COMPRESSION_HINT: [internal] int32       = 0x84EF;
GL_TEXTURE_COMPRESSED_IMAGE_SIZE: [internal] int32  = 0x86A0;
GL_TEXTURE_COMPRESSED: [internal] int32             = 0x86A1;
GL_NUM_COMPRESSED_TEXTURE_FORMATS: [internal] int32 = 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS: [internal] int32     = 0x86A3;
GL_CLAMP_TO_BORDER: [internal] int32                = 0x812D;

def PFNGLACTIVETEXTUREPROC = (texture: GLenum)(void)*;
def PFNGLSAMPLECOVERAGEPROC = (value: GLfloat, invert: GLboolean)(void)*;
def PFNGLCOMPRESSEDTEXIMAGE3DPROC = (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXIMAGE2DPROC = (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXIMAGE1DPROC = (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void*)(void)*;
def PFNGLGETCOMPRESSEDTEXIMAGEPROC = (target: GLenum, level: GLint, img: void*)(void)*;

@[c]glActiveTexture(texture: GLenum): void;
@[c]glSampleCoverage(value: GLfloat, invert: GLboolean): void;
@[c]glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void*): void;
@[c]glGetCompressedTexImage(target: GLenum, level: GLint, img: void*): void;

GL_BLEND_DST_RGB: [internal] int32                  = 0x80C8;
GL_BLEND_SRC_RGB: [internal] int32                  = 0x80C9;
GL_BLEND_DST_ALPHA: [internal] int32                = 0x80CA;
GL_BLEND_SRC_ALPHA: [internal] int32                = 0x80CB;
GL_POINT_FADE_THRESHOLD_SIZE: [internal] int32      = 0x8128;
GL_DEPTH_COMPONENT16: [internal] int32              = 0x81A5;
GL_DEPTH_COMPONENT24: [internal] int32              = 0x81A6;
GL_DEPTH_COMPONENT32: [internal] int32              = 0x81A7;
GL_MIRRORED_REPEAT: [internal] int32                = 0x8370;
GL_MAX_TEXTURE_LOD_BIAS: [internal] int32           = 0x84FD;
GL_TEXTURE_LOD_BIAS: [internal] int32               = 0x8501;
GL_INCR_WRAP: [internal] int32                      = 0x8507;
GL_DECR_WRAP: [internal] int32                      = 0x8508;
GL_TEXTURE_DEPTH_SIZE: [internal] int32             = 0x884A;
GL_TEXTURE_COMPARE_MODE: [internal] int32           = 0x884C;
GL_TEXTURE_COMPARE_FUNC: [internal] int32           = 0x884D;
GL_BLEND_COLOR: [internal] int32                    = 0x8005;
GL_BLEND_EQUATION: [internal] int32                 = 0x8009;
GL_CONSTANT_COLOR: [internal] int32                 = 0x8001;
GL_ONE_MINUS_CONSTANT_COLOR: [internal] int32       = 0x8002;
GL_CONSTANT_ALPHA: [internal] int32                 = 0x8003;
GL_ONE_MINUS_CONSTANT_ALPHA: [internal] int32       = 0x8004;
GL_FUNC_ADD: [internal] int32                       = 0x8006;
GL_FUNC_REVERSE_SUBTRACT: [internal] int32          = 0x800B;
GL_FUNC_SUBTRACT: [internal] int32                  = 0x800A;
GL_MIN: [internal] int32                            = 0x8007;
GL_MAX: [internal] int32                            = 0x8008;

def PFNGLBLENDFUNCSEPARATEPROC = (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum)(void)*;
def PFNGLMULTIDRAWARRAYSPROC = (mode: GLenum, first: GLint*, count: GLsizei*, drawcount: GLsizei)(void)*;
def PFNGLMULTIDRAWELEMENTSPROC = (mode: GLenum, count: GLsizei*, type: GLenum, indices: void**, drawcount: GLsizei)(void)*;
def PFNGLPOINTPARAMETERFPROC = (pname: GLenum, param: GLfloat)(void)*;
def PFNGLPOINTPARAMETERFVPROC = (pname: GLenum, params: GLfloat*)(void)*;
def PFNGLPOINTPARAMETERIPROC = (pname: GLenum, param: GLint)(void)*;
def PFNGLPOINTPARAMETERIVPROC = (pname: GLenum, params: GLint*)(void)*;
def PFNGLBLENDCOLORPROC = (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat)(void)*;
def PFNGLBLENDEQUATIONPROC = (mode: GLenum)(void)*;

@[c]glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void;
@[c]glMultiDrawArrays(mode: GLenum, first: GLint*, count: GLsizei*, drawcount: GLsizei): void;
@[c]glMultiDrawElements(mode: GLenum, count: GLsizei*, type: GLenum, indices: void**, drawcount: GLsizei): void;
@[c]glPointParameterf(pname: GLenum, param: GLfloat): void;
@[c]glPointParameterfv(pname: GLenum, params: GLfloat*): void;
@[c]glPointParameteri(pname: GLenum, param: GLint): void;
@[c]glPointParameteriv(pname: GLenum, params: GLint*): void;
@[c]glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat): void;
@[c]glBlendEquation(mode: GLenum): void;

def GLsizeiptr = khronos_ssize_t;
def GLintptr = khronos_intptr_t;

GL_BUFFER_SIZE: [internal] int32                    = 0x8764;
GL_BUFFER_USAGE: [internal] int32                   = 0x8765;
GL_QUERY_COUNTER_BITS: [internal] int32             = 0x8864;
GL_CURRENT_QUERY: [internal] int32                  = 0x8865;
GL_QUERY_RESULT: [internal] int32                   = 0x8866;
GL_QUERY_RESULT_AVAILABLE: [internal] int32         = 0x8867;
GL_ARRAY_BUFFER: [internal] int32                   = 0x8892;
GL_ELEMENT_ARRAY_BUFFER: [internal] int32           = 0x8893;
GL_ARRAY_BUFFER_BINDING: [internal] int32           = 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING: [internal] int32   = 0x8895;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: [internal] int32 = 0x889F;
GL_READ_ONLY: [internal] int32                      = 0x88B8;
GL_WRITE_ONLY: [internal] int32                     = 0x88B9;
GL_READ_WRITE: [internal] int32                     = 0x88BA;
GL_BUFFER_ACCESS: [internal] int32                  = 0x88BB;
GL_BUFFER_MAPPED: [internal] int32                  = 0x88BC;
GL_BUFFER_MAP_POINTER: [internal] int32             = 0x88BD;
GL_STREAM_DRAW: [internal] int32                    = 0x88E0;
GL_STREAM_READ: [internal] int32                    = 0x88E1;
GL_STREAM_COPY: [internal] int32                    = 0x88E2;
GL_STATIC_DRAW: [internal] int32                    = 0x88E4;
GL_STATIC_READ: [internal] int32                    = 0x88E5;
GL_STATIC_COPY: [internal] int32                    = 0x88E6;
GL_DYNAMIC_DRAW: [internal] int32                   = 0x88E8;
GL_DYNAMIC_READ: [internal] int32                   = 0x88E9;
GL_DYNAMIC_COPY: [internal] int32                   = 0x88EA;
GL_SAMPLES_PASSED: [internal] int32                 = 0x8914;
GL_SRC1_ALPHA: [internal] int32                     = 0x8589;

def PFNGLGENQUERIESPROC = (n: GLsizei, ids: GLuint*)(void)*;
def PFNGLDELETEQUERIESPROC = (n: GLsizei, ids: GLuint*)(void)*;
def PFNGLISQUERYPROC = (id: GLuint)(GLboolean)*;
def PFNGLBEGINQUERYPROC = (target: GLenum, id: GLuint)(void)*;
def PFNGLENDQUERYPROC = (target: GLenum)(void)*;
def PFNGLGETQUERYIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETQUERYOBJECTIVPROC = (id: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETQUERYOBJECTUIVPROC = (id: GLuint, pname: GLenum, params: GLuint*)(void)*;
def PFNGLBINDBUFFERPROC = (target: GLenum, buffer: GLuint)(void)*;
def PFNGLDELETEBUFFERSPROC = (n: GLsizei, buffers: GLuint*)(void)*;
def PFNGLGENBUFFERSPROC = (n: GLsizei, buffers: GLuint*)(void)*;
def PFNGLISBUFFERPROC = (buffer: GLuint)(GLboolean)*;
def PFNGLBUFFERDATAPROC = (target: GLenum, size: GLsizeiptr, data: void*, usage: GLenum)(void)*;
def PFNGLBUFFERSUBDATAPROC = (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void*)(void)*;
def PFNGLGETBUFFERSUBDATAPROC = (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void*)(void)*;
def PFNGLMAPBUFFERPROC = (target: GLenum, access: GLenum)(void*)*;
def PFNGLUNMAPBUFFERPROC = (target: GLenum)(GLboolean)*;
def PFNGLGETBUFFERPARAMETERIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETBUFFERPOINTERVPROC = (target: GLenum, pname: GLenum, params: void**)(void)*;

@[c]glGenQueries(n: GLsizei, ids: GLuint*): void;
@[c]glDeleteQueries(n: GLsizei, ids: GLuint*): void;
@[c]glIsQuery(id: GLuint): GLboolean;
@[c]glBeginQuery(target: GLenum, id: GLuint): void;
@[c]glEndQuery(target: GLenum): void;
@[c]glGetQueryiv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetQueryObjectiv(id: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: GLuint*): void;
@[c]glBindBuffer(target: GLenum, buffer: GLuint): void;
@[c]glDeleteBuffers(n: GLsizei, buffers: GLuint*): void;
@[c]glGenBuffers(n: GLsizei, buffers: GLuint*): void;
@[c]glIsBuffer(buffer: GLuint): GLboolean;
@[c]glBufferData(target: GLenum, size: GLsizeiptr, data: void*, usage: GLenum): void;
@[c]glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void*): void;
@[c]glGetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: void*): void;
@[c]glMapBuffer(target: GLenum, access: GLenum): void*;
@[c]glUnmapBuffer(target: GLenum): GLboolean;
@[c]glGetBufferParameteriv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetBufferPointerv(target: GLenum, pname: GLenum, params: void**): void;

def GLchar = int8;
def GLshort = khronos_int16_t;
def GLbyte = khronos_int8_t;
def GLushort = khronos_uint16_t;

GL_BLEND_EQUATION_RGB: [internal] int32             = 0x8009;
GL_VERTEX_ATTRIB_ARRAY_ENABLED: [internal] int32    = 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE: [internal] int32       = 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE: [internal] int32     = 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE: [internal] int32       = 0x8625;
GL_CURRENT_VERTEX_ATTRIB: [internal] int32          = 0x8626;
GL_VERTEX_PROGRAM_POINT_SIZE: [internal] int32      = 0x8642;
GL_VERTEX_ATTRIB_ARRAY_POINTER: [internal] int32    = 0x8645;
GL_STENCIL_BACK_FUNC: [internal] int32              = 0x8800;
GL_STENCIL_BACK_FAIL: [internal] int32              = 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL: [internal] int32   = 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS: [internal] int32   = 0x8803;
GL_MAX_DRAW_BUFFERS: [internal] int32               = 0x8824;
GL_DRAW_BUFFER0: [internal] int32                   = 0x8825;
GL_DRAW_BUFFER1: [internal] int32                   = 0x8826;
GL_DRAW_BUFFER2: [internal] int32                   = 0x8827;
GL_DRAW_BUFFER3: [internal] int32                   = 0x8828;
GL_DRAW_BUFFER4: [internal] int32                   = 0x8829;
GL_DRAW_BUFFER5: [internal] int32                   = 0x882A;
GL_DRAW_BUFFER6: [internal] int32                   = 0x882B;
GL_DRAW_BUFFER7: [internal] int32                   = 0x882C;
GL_DRAW_BUFFER8: [internal] int32                   = 0x882D;
GL_DRAW_BUFFER9: [internal] int32                   = 0x882E;
GL_DRAW_BUFFER10: [internal] int32                  = 0x882F;
GL_DRAW_BUFFER11: [internal] int32                  = 0x8830;
GL_DRAW_BUFFER12: [internal] int32                  = 0x8831;
GL_DRAW_BUFFER13: [internal] int32                  = 0x8832;
GL_DRAW_BUFFER14: [internal] int32                  = 0x8833;
GL_DRAW_BUFFER15: [internal] int32                  = 0x8834;
GL_BLEND_EQUATION_ALPHA: [internal] int32           = 0x883D;
GL_MAX_VERTEX_ATTRIBS: [internal] int32             = 0x8869;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: [internal] int32 = 0x886A;
GL_MAX_TEXTURE_IMAGE_UNITS: [internal] int32        = 0x8872;
GL_FRAGMENT_SHADER: [internal] int32                = 0x8B30;
GL_VERTEX_SHADER: [internal] int32                  = 0x8B31;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: [internal] int32 = 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS: [internal] int32  = 0x8B4A;
GL_MAX_VARYING_FLOATS: [internal] int32             = 0x8B4B;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: [internal] int32 = 0x8B4C;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: [internal] int32 = 0x8B4D;
GL_SHADER_TYPE: [internal] int32                    = 0x8B4F;
GL_FLOAT_VEC2: [internal] int32                     = 0x8B50;
GL_FLOAT_VEC3: [internal] int32                     = 0x8B51;
GL_FLOAT_VEC4: [internal] int32                     = 0x8B52;
GL_INT_VEC2: [internal] int32                       = 0x8B53;
GL_INT_VEC3: [internal] int32                       = 0x8B54;
GL_INT_VEC4: [internal] int32                       = 0x8B55;
GL_BOOL: [internal] int32                           = 0x8B56;
GL_BOOL_VEC2: [internal] int32                      = 0x8B57;
GL_BOOL_VEC3: [internal] int32                      = 0x8B58;
GL_BOOL_VEC4: [internal] int32                      = 0x8B59;
GL_FLOAT_MAT2: [internal] int32                     = 0x8B5A;
GL_FLOAT_MAT3: [internal] int32                     = 0x8B5B;
GL_FLOAT_MAT4: [internal] int32                     = 0x8B5C;
GL_SAMPLER_1D: [internal] int32                     = 0x8B5D;
GL_SAMPLER_2D: [internal] int32                     = 0x8B5E;
GL_SAMPLER_3D: [internal] int32                     = 0x8B5F;
GL_SAMPLER_CUBE: [internal] int32                   = 0x8B60;
GL_SAMPLER_1D_SHADOW: [internal] int32              = 0x8B61;
GL_SAMPLER_2D_SHADOW: [internal] int32              = 0x8B62;
GL_DELETE_STATUS: [internal] int32                  = 0x8B80;
GL_COMPILE_STATUS: [internal] int32                 = 0x8B81;
GL_LINK_STATUS: [internal] int32                    = 0x8B82;
GL_VALIDATE_STATUS: [internal] int32                = 0x8B83;
GL_INFO_LOG_LENGTH: [internal] int32                = 0x8B84;
GL_ATTACHED_SHADERS: [internal] int32               = 0x8B85;
GL_ACTIVE_UNIFORMS: [internal] int32                = 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH: [internal] int32      = 0x8B87;
GL_SHADER_SOURCE_LENGTH: [internal] int32           = 0x8B88;
GL_ACTIVE_ATTRIBUTES: [internal] int32              = 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: [internal] int32    = 0x8B8A;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT: [internal] int32 = 0x8B8B;
GL_SHADING_LANGUAGE_VERSION: [internal] int32       = 0x8B8C;
GL_CURRENT_PROGRAM: [internal] int32                = 0x8B8D;
GL_POINT_SPRITE_COORD_ORIGIN: [internal] int32      = 0x8CA0;
GL_LOWER_LEFT: [internal] int32                     = 0x8CA1;
GL_UPPER_LEFT: [internal] int32                     = 0x8CA2;
GL_STENCIL_BACK_REF: [internal] int32               = 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK: [internal] int32        = 0x8CA4;
GL_STENCIL_BACK_WRITEMASK: [internal] int32         = 0x8CA5;

def PFNGLBLENDEQUATIONSEPARATEPROC = (modeRGB: GLenum, modeAlpha: GLenum)(void)*;
def PFNGLDRAWBUFFERSPROC = (n: GLsizei, bufs: GLenum*)(void)*;
def PFNGLSTENCILOPSEPARATEPROC = (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum)(void)*;
def PFNGLSTENCILFUNCSEPARATEPROC = (face: GLenum, func: GLenum, ref: GLint, mask: GLuint)(void)*;
def PFNGLSTENCILMASKSEPARATEPROC = (face: GLenum, mask: GLuint)(void)*;
def PFNGLATTACHSHADERPROC = (program: GLuint, shader: GLuint)(void)*;
def PFNGLBINDATTRIBLOCATIONPROC = (program: GLuint, index: GLuint, name: GLchar*)(void)*;
def PFNGLCOMPILESHADERPROC = (shader: GLuint)(void)*;
def PFNGLCREATEPROGRAMPROC = ()(GLuint)*;
def PFNGLCREATESHADERPROC = (type: GLenum)(GLuint)*;
def PFNGLDELETEPROGRAMPROC = (program: GLuint)(void)*;
def PFNGLDELETESHADERPROC = (shader: GLuint)(void)*;
def PFNGLDETACHSHADERPROC = (program: GLuint, shader: GLuint)(void)*;
def PFNGLDISABLEVERTEXATTRIBARRAYPROC = (index: GLuint)(void)*;
def PFNGLENABLEVERTEXATTRIBARRAYPROC = (index: GLuint)(void)*;
def PFNGLGETACTIVEATTRIBPROC = (program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*)(void)*;
def PFNGLGETACTIVEUNIFORMPROC = (program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*)(void)*;
def PFNGLGETATTACHEDSHADERSPROC = (program: GLuint, maxCount: GLsizei, count: GLsizei*, shaders: GLuint*)(void)*;
def PFNGLGETATTRIBLOCATIONPROC = (program: GLuint, name: GLchar*)(GLint)*;
def PFNGLGETPROGRAMIVPROC = (program: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETPROGRAMINFOLOGPROC = (program: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*)(void)*;
def PFNGLGETSHADERIVPROC = (shader: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETSHADERINFOLOGPROC = (shader: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*)(void)*;
def PFNGLGETSHADERSOURCEPROC = (shader: GLuint, bufSize: GLsizei, length: GLsizei*, source: GLchar*)(void)*;
def PFNGLGETUNIFORMLOCATIONPROC = (program: GLuint, name: GLchar*)(GLint)*;
def PFNGLGETUNIFORMFVPROC = (program: GLuint, location: GLint, params: GLfloat*)(void)*;
def PFNGLGETUNIFORMIVPROC = (program: GLuint, location: GLint, params: GLint*)(void)*;
def PFNGLGETVERTEXATTRIBDVPROC = (index: GLuint, pname: GLenum, params: GLdouble*)(void)*;
def PFNGLGETVERTEXATTRIBFVPROC = (index: GLuint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETVERTEXATTRIBIVPROC = (index: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETVERTEXATTRIBPOINTERVPROC = (index: GLuint, pname: GLenum, pointer: void**)(void)*;
def PFNGLISPROGRAMPROC = (program: GLuint)(GLboolean)*;
def PFNGLISSHADERPROC = (shader: GLuint)(GLboolean)*;
def PFNGLLINKPROGRAMPROC = (program: GLuint)(void)*;
def PFNGLSHADERSOURCEPROC = (shader: GLuint, count: GLsizei, string: GLchar**, length: GLint*)(void)*;
def PFNGLUSEPROGRAMPROC = (program: GLuint)(void)*;
def PFNGLUNIFORM1FPROC = (location: GLint, v0: GLfloat)(void)*;
def PFNGLUNIFORM2FPROC = (location: GLint, v0: GLfloat, v1: GLfloat)(void)*;
def PFNGLUNIFORM3FPROC = (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat)(void)*;
def PFNGLUNIFORM4FPROC = (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat)(void)*;
def PFNGLUNIFORM1IPROC = (location: GLint, v0: GLint)(void)*;
def PFNGLUNIFORM2IPROC = (location: GLint, v0: GLint, v1: GLint)(void)*;
def PFNGLUNIFORM3IPROC = (location: GLint, v0: GLint, v1: GLint, v2: GLint)(void)*;
def PFNGLUNIFORM4IPROC = (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint)(void)*;
def PFNGLUNIFORM1FVPROC = (location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLUNIFORM2FVPROC = (location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLUNIFORM3FVPROC = (location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLUNIFORM4FVPROC = (location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLUNIFORM1IVPROC = (location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLUNIFORM2IVPROC = (location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLUNIFORM3IVPROC = (location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLUNIFORM4IVPROC = (location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLUNIFORMMATRIX2FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX3FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX4FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLVALIDATEPROGRAMPROC = (program: GLuint)(void)*;
def PFNGLVERTEXATTRIB1DPROC = (index: GLuint, x: GLdouble)(void)*;
def PFNGLVERTEXATTRIB1DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIB1FPROC = (index: GLuint, x: GLfloat)(void)*;
def PFNGLVERTEXATTRIB1FVPROC = (index: GLuint, v: GLfloat*)(void)*;
def PFNGLVERTEXATTRIB1SPROC = (index: GLuint, x: GLshort)(void)*;
def PFNGLVERTEXATTRIB1SVPROC = (index: GLuint, v: GLshort*)(void)*;
def PFNGLVERTEXATTRIB2DPROC = (index: GLuint, x: GLdouble, y: GLdouble)(void)*;
def PFNGLVERTEXATTRIB2DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIB2FPROC = (index: GLuint, x: GLfloat, y: GLfloat)(void)*;
def PFNGLVERTEXATTRIB2FVPROC = (index: GLuint, v: GLfloat*)(void)*;
def PFNGLVERTEXATTRIB2SPROC = (index: GLuint, x: GLshort, y: GLshort)(void)*;
def PFNGLVERTEXATTRIB2SVPROC = (index: GLuint, v: GLshort*)(void)*;
def PFNGLVERTEXATTRIB3DPROC = (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLVERTEXATTRIB3DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIB3FPROC = (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)(void)*;
def PFNGLVERTEXATTRIB3FVPROC = (index: GLuint, v: GLfloat*)(void)*;
def PFNGLVERTEXATTRIB3SPROC = (index: GLuint, x: GLshort, y: GLshort, z: GLshort)(void)*;
def PFNGLVERTEXATTRIB3SVPROC = (index: GLuint, v: GLshort*)(void)*;
def PFNGLVERTEXATTRIB4NBVPROC = (index: GLuint, v: GLbyte*)(void)*;
def PFNGLVERTEXATTRIB4NIVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLVERTEXATTRIB4NSVPROC = (index: GLuint, v: GLshort*)(void)*;
def PFNGLVERTEXATTRIB4NUBPROC = (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte)(void)*;
def PFNGLVERTEXATTRIB4NUBVPROC = (index: GLuint, v: GLubyte*)(void)*;
def PFNGLVERTEXATTRIB4NUIVPROC = (index: GLuint, v: GLuint*)(void)*;
def PFNGLVERTEXATTRIB4NUSVPROC = (index: GLuint, v: GLushort*)(void)*;
def PFNGLVERTEXATTRIB4BVPROC = (index: GLuint, v: GLbyte*)(void)*;
def PFNGLVERTEXATTRIB4DPROC = (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble)(void)*;
def PFNGLVERTEXATTRIB4DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIB4FPROC = (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)(void)*;
def PFNGLVERTEXATTRIB4FVPROC = (index: GLuint, v: GLfloat*)(void)*;
def PFNGLVERTEXATTRIB4IVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLVERTEXATTRIB4SPROC = (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort)(void)*;
def PFNGLVERTEXATTRIB4SVPROC = (index: GLuint, v: GLshort*)(void)*;
def PFNGLVERTEXATTRIB4UBVPROC = (index: GLuint, v: GLubyte*)(void)*;
def PFNGLVERTEXATTRIB4UIVPROC = (index: GLuint, v: GLuint*)(void)*;
def PFNGLVERTEXATTRIB4USVPROC = (index: GLuint, v: GLushort*)(void)*;
def PFNGLVERTEXATTRIBPOINTERPROC = (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: void*)(void)*;

@[c]glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;
@[c]glDrawBuffers(n: GLsizei, bufs: GLenum*): void;
@[c]glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void;
@[c]glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;
@[c]glStencilMaskSeparate(face: GLenum, mask: GLuint): void;
@[c]glAttachShader(program: GLuint, shader: GLuint): void;
@[c]glBindAttribLocation(program: GLuint, index: GLuint, name: GLchar*): void;
@[c]glCompileShader(shader: GLuint): void;
@[c]glCreateProgram::GLuint;
@[c]glCreateShader(type: GLenum): GLuint;
@[c]glDeleteProgram(program: GLuint): void;
@[c]glDeleteShader(shader: GLuint): void;
@[c]glDetachShader(program: GLuint, shader: GLuint): void;
@[c]glDisableVertexAttribArray(index: GLuint): void;
@[c]glEnableVertexAttribArray(index: GLuint): void;
@[c]glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*): void;
@[c]glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLint*, type: GLenum*, name: GLchar*): void;
@[c]glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: GLsizei*, shaders: GLuint*): void;
@[c]glGetAttribLocation(program: GLuint, name: GLchar*): GLint;
@[c]glGetProgramiv(program: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*): void;
@[c]glGetShaderiv(shader: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*): void;
@[c]glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: GLsizei*, source: GLchar*): void;
@[c]glGetUniformLocation(program: GLuint, name: GLchar*): GLint;
@[c]glGetUniformfv(program: GLuint, location: GLint, params: GLfloat*): void;
@[c]glGetUniformiv(program: GLuint, location: GLint, params: GLint*): void;
@[c]glGetVertexAttribdv(index: GLuint, pname: GLenum, params: GLdouble*): void;
@[c]glGetVertexAttribfv(index: GLuint, pname: GLenum, params: GLfloat*): void;
@[c]glGetVertexAttribiv(index: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: void**): void;
@[c]glIsProgram(program: GLuint): GLboolean;
@[c]glIsShader(shader: GLuint): GLboolean;
@[c]glLinkProgram(program: GLuint): void;
@[c]glShaderSource(shader: GLuint, count: GLsizei, string: GLchar**, length: GLint*): void;
@[c]glUseProgram(program: GLuint): void;
@[c]glUniform1f(location: GLint, v0: GLfloat): void;
@[c]glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat): void;
@[c]glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void;
@[c]glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void;
@[c]glUniform1i(location: GLint, v0: GLint): void;
@[c]glUniform2i(location: GLint, v0: GLint, v1: GLint): void;
@[c]glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint): void;
@[c]glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void;
@[c]glUniform1fv(location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glUniform2fv(location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glUniform3fv(location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glUniform4fv(location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glUniform1iv(location: GLint, count: GLsizei, value: GLint*): void;
@[c]glUniform2iv(location: GLint, count: GLsizei, value: GLint*): void;
@[c]glUniform3iv(location: GLint, count: GLsizei, value: GLint*): void;
@[c]glUniform4iv(location: GLint, count: GLsizei, value: GLint*): void;
@[c]glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glValidateProgram(program: GLuint): void;
@[c]glVertexAttrib1d(index: GLuint, x: GLdouble): void;
@[c]glVertexAttrib1dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttrib1f(index: GLuint, x: GLfloat): void;
@[c]glVertexAttrib1fv(index: GLuint, v: GLfloat*): void;
@[c]glVertexAttrib1s(index: GLuint, x: GLshort): void;
@[c]glVertexAttrib1sv(index: GLuint, v: GLshort*): void;
@[c]glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble): void;
@[c]glVertexAttrib2dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;
@[c]glVertexAttrib2fv(index: GLuint, v: GLfloat*): void;
@[c]glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort): void;
@[c]glVertexAttrib2sv(index: GLuint, v: GLshort*): void;
@[c]glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glVertexAttrib3dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;
@[c]glVertexAttrib3fv(index: GLuint, v: GLfloat*): void;
@[c]glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort): void;
@[c]glVertexAttrib3sv(index: GLuint, v: GLshort*): void;
@[c]glVertexAttrib4Nbv(index: GLuint, v: GLbyte*): void;
@[c]glVertexAttrib4Niv(index: GLuint, v: GLint*): void;
@[c]glVertexAttrib4Nsv(index: GLuint, v: GLshort*): void;
@[c]glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte): void;
@[c]glVertexAttrib4Nubv(index: GLuint, v: GLubyte*): void;
@[c]glVertexAttrib4Nuiv(index: GLuint, v: GLuint*): void;
@[c]glVertexAttrib4Nusv(index: GLuint, v: GLushort*): void;
@[c]glVertexAttrib4bv(index: GLuint, v: GLbyte*): void;
@[c]glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void;
@[c]glVertexAttrib4dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;
@[c]glVertexAttrib4fv(index: GLuint, v: GLfloat*): void;
@[c]glVertexAttrib4iv(index: GLuint, v: GLint*): void;
@[c]glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort): void;
@[c]glVertexAttrib4sv(index: GLuint, v: GLshort*): void;
@[c]glVertexAttrib4ubv(index: GLuint, v: GLubyte*): void;
@[c]glVertexAttrib4uiv(index: GLuint, v: GLuint*): void;
@[c]glVertexAttrib4usv(index: GLuint, v: GLushort*): void;
@[c]glVertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: void*): void;

GL_PIXEL_PACK_BUFFER: [internal] int32              = 0x88EB;
GL_PIXEL_UNPACK_BUFFER: [internal] int32            = 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING: [internal] int32      = 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING: [internal] int32    = 0x88EF;
GL_FLOAT_MAT2x3: [internal] int32                   = 0x8B65;
GL_FLOAT_MAT2x4: [internal] int32                   = 0x8B66;
GL_FLOAT_MAT3x2: [internal] int32                   = 0x8B67;
GL_FLOAT_MAT3x4: [internal] int32                   = 0x8B68;
GL_FLOAT_MAT4x2: [internal] int32                   = 0x8B69;
GL_FLOAT_MAT4x3: [internal] int32                   = 0x8B6A;
GL_SRGB: [internal] int32                           = 0x8C40;
GL_SRGB8: [internal] int32                          = 0x8C41;
GL_SRGB_ALPHA: [internal] int32                     = 0x8C42;
GL_SRGB8_ALPHA8: [internal] int32                   = 0x8C43;
GL_COMPRESSED_SRGB: [internal] int32                = 0x8C48;
GL_COMPRESSED_SRGB_ALPHA: [internal] int32          = 0x8C49;

def PFNGLUNIFORMMATRIX2X3FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX3X2FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX2X4FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX4X2FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX3X4FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLUNIFORMMATRIX4X3FVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;

@[c]glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;

def GLhalf = khronos_uint16_t;

GL_COMPARE_REF_TO_TEXTURE: [internal] int32         = 0x884E;
GL_CLIP_DISTANCE0: [internal] int32                 = 0x3000;
GL_CLIP_DISTANCE1: [internal] int32                 = 0x3001;
GL_CLIP_DISTANCE2: [internal] int32                 = 0x3002;
GL_CLIP_DISTANCE3: [internal] int32                 = 0x3003;
GL_CLIP_DISTANCE4: [internal] int32                 = 0x3004;
GL_CLIP_DISTANCE5: [internal] int32                 = 0x3005;
GL_CLIP_DISTANCE6: [internal] int32                 = 0x3006;
GL_CLIP_DISTANCE7: [internal] int32                 = 0x3007;
GL_MAX_CLIP_DISTANCES: [internal] int32             = 0x0D32;
GL_MAJOR_VERSION: [internal] int32                  = 0x821B;
GL_MINOR_VERSION: [internal] int32                  = 0x821C;
GL_NUM_EXTENSIONS: [internal] int32                 = 0x821D;
GL_CONTEXT_FLAGS: [internal] int32                  = 0x821E;
GL_COMPRESSED_RED: [internal] int32                 = 0x8225;
GL_COMPRESSED_RG: [internal] int32                  = 0x8226;
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: [internal] int32 = 0x00000001;
GL_RGBA32F: [internal] int32                        = 0x8814;
GL_RGB32F: [internal] int32                         = 0x8815;
GL_RGBA16F: [internal] int32                        = 0x881A;
GL_RGB16F: [internal] int32                         = 0x881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER: [internal] int32    = 0x88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS: [internal] int32       = 0x88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET: [internal] int32       = 0x8904;
GL_MAX_PROGRAM_TEXEL_OFFSET: [internal] int32       = 0x8905;
GL_CLAMP_READ_COLOR: [internal] int32               = 0x891C;
GL_FIXED_ONLY: [internal] int32                     = 0x891D;
GL_MAX_VARYING_COMPONENTS: [internal] int32         = 0x8B4B;
GL_TEXTURE_1D_ARRAY: [internal] int32               = 0x8C18;
GL_PROXY_TEXTURE_1D_ARRAY: [internal] int32         = 0x8C19;
GL_TEXTURE_2D_ARRAY: [internal] int32               = 0x8C1A;
GL_PROXY_TEXTURE_2D_ARRAY: [internal] int32         = 0x8C1B;
GL_TEXTURE_BINDING_1D_ARRAY: [internal] int32       = 0x8C1C;
GL_TEXTURE_BINDING_2D_ARRAY: [internal] int32       = 0x8C1D;
GL_R11F_G11F_B10F: [internal] int32                 = 0x8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV: [internal] int32   = 0x8C3B;
GL_RGB9_E5: [internal] int32                        = 0x8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV: [internal] int32       = 0x8C3E;
GL_TEXTURE_SHARED_SIZE: [internal] int32            = 0x8C3F;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: [internal] int32 = 0x8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE: [internal] int32 = 0x8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: [internal] int32 = 0x8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS: [internal] int32    = 0x8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START: [internal] int32 = 0x8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: [internal] int32 = 0x8C85;
GL_PRIMITIVES_GENERATED: [internal] int32           = 0x8C87;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: [internal] int32 = 0x8C88;
GL_RASTERIZER_DISCARD: [internal] int32             = 0x8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: [internal] int32 = 0x8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: [internal] int32 = 0x8C8B;
GL_INTERLEAVED_ATTRIBS: [internal] int32            = 0x8C8C;
GL_SEPARATE_ATTRIBS: [internal] int32               = 0x8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER: [internal] int32      = 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: [internal] int32 = 0x8C8F;
GL_RGBA32UI: [internal] int32                       = 0x8D70;
GL_RGB32UI: [internal] int32                        = 0x8D71;
GL_RGBA16UI: [internal] int32                       = 0x8D76;
GL_RGB16UI: [internal] int32                        = 0x8D77;
GL_RGBA8UI: [internal] int32                        = 0x8D7C;
GL_RGB8UI: [internal] int32                         = 0x8D7D;
GL_RGBA32I: [internal] int32                        = 0x8D82;
GL_RGB32I: [internal] int32                         = 0x8D83;
GL_RGBA16I: [internal] int32                        = 0x8D88;
GL_RGB16I: [internal] int32                         = 0x8D89;
GL_RGBA8I: [internal] int32                         = 0x8D8E;
GL_RGB8I: [internal] int32                          = 0x8D8F;
GL_RED_INTEGER: [internal] int32                    = 0x8D94;
GL_GREEN_INTEGER: [internal] int32                  = 0x8D95;
GL_BLUE_INTEGER: [internal] int32                   = 0x8D96;
GL_RGB_INTEGER: [internal] int32                    = 0x8D98;
GL_RGBA_INTEGER: [internal] int32                   = 0x8D99;
GL_BGR_INTEGER: [internal] int32                    = 0x8D9A;
GL_BGRA_INTEGER: [internal] int32                   = 0x8D9B;
GL_SAMPLER_1D_ARRAY: [internal] int32               = 0x8DC0;
GL_SAMPLER_2D_ARRAY: [internal] int32               = 0x8DC1;
GL_SAMPLER_1D_ARRAY_SHADOW: [internal] int32        = 0x8DC3;
GL_SAMPLER_2D_ARRAY_SHADOW: [internal] int32        = 0x8DC4;
GL_SAMPLER_CUBE_SHADOW: [internal] int32            = 0x8DC5;
GL_UNSIGNED_INT_VEC2: [internal] int32              = 0x8DC6;
GL_UNSIGNED_INT_VEC3: [internal] int32              = 0x8DC7;
GL_UNSIGNED_INT_VEC4: [internal] int32              = 0x8DC8;
GL_INT_SAMPLER_1D: [internal] int32                 = 0x8DC9;
GL_INT_SAMPLER_2D: [internal] int32                 = 0x8DCA;
GL_INT_SAMPLER_3D: [internal] int32                 = 0x8DCB;
GL_INT_SAMPLER_CUBE: [internal] int32               = 0x8DCC;
GL_INT_SAMPLER_1D_ARRAY: [internal] int32           = 0x8DCE;
GL_INT_SAMPLER_2D_ARRAY: [internal] int32           = 0x8DCF;
GL_UNSIGNED_INT_SAMPLER_1D: [internal] int32        = 0x8DD1;
GL_UNSIGNED_INT_SAMPLER_2D: [internal] int32        = 0x8DD2;
GL_UNSIGNED_INT_SAMPLER_3D: [internal] int32        = 0x8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE: [internal] int32      = 0x8DD4;
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: [internal] int32  = 0x8DD6;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: [internal] int32  = 0x8DD7;
GL_QUERY_WAIT: [internal] int32                     = 0x8E13;
GL_QUERY_NO_WAIT: [internal] int32                  = 0x8E14;
GL_QUERY_BY_REGION_WAIT: [internal] int32           = 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT: [internal] int32        = 0x8E16;
GL_BUFFER_ACCESS_FLAGS: [internal] int32            = 0x911F;
GL_BUFFER_MAP_LENGTH: [internal] int32              = 0x9120;
GL_BUFFER_MAP_OFFSET: [internal] int32              = 0x9121;
GL_DEPTH_COMPONENT32F: [internal] int32             = 0x8CAC;
GL_DEPTH32F_STENCIL8: [internal] int32              = 0x8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV: [internal] int32 = 0x8DAD;
GL_INVALID_FRAMEBUFFER_OPERATION: [internal] int32  = 0x0506;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: [internal] int32 = 0x8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: [internal] int32 = 0x8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: [internal] int32 = 0x8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: [internal] int32 = 0x8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: [internal] int32 = 0x8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: [internal] int32 = 0x8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: [internal] int32 = 0x8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: [internal] int32 = 0x8217;
GL_FRAMEBUFFER_DEFAULT: [internal] int32            = 0x8218;
GL_FRAMEBUFFER_UNDEFINED: [internal] int32          = 0x8219;
GL_DEPTH_STENCIL_ATTACHMENT: [internal] int32       = 0x821A;
GL_MAX_RENDERBUFFER_SIZE: [internal] int32          = 0x84E8;
GL_DEPTH_STENCIL: [internal] int32                  = 0x84F9;
GL_UNSIGNED_INT_24_8: [internal] int32              = 0x84FA;
GL_DEPTH24_STENCIL8: [internal] int32               = 0x88F0;
GL_TEXTURE_STENCIL_SIZE: [internal] int32           = 0x88F1;
GL_TEXTURE_RED_TYPE: [internal] int32               = 0x8C10;
GL_TEXTURE_GREEN_TYPE: [internal] int32             = 0x8C11;
GL_TEXTURE_BLUE_TYPE: [internal] int32              = 0x8C12;
GL_TEXTURE_ALPHA_TYPE: [internal] int32             = 0x8C13;
GL_TEXTURE_DEPTH_TYPE: [internal] int32             = 0x8C16;
GL_UNSIGNED_NORMALIZED: [internal] int32            = 0x8C17;
GL_FRAMEBUFFER_BINDING: [internal] int32            = 0x8CA6;
GL_DRAW_FRAMEBUFFER_BINDING: [internal] int32       = 0x8CA6;
GL_RENDERBUFFER_BINDING: [internal] int32           = 0x8CA7;
GL_READ_FRAMEBUFFER: [internal] int32               = 0x8CA8;
GL_DRAW_FRAMEBUFFER: [internal] int32               = 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING: [internal] int32       = 0x8CAA;
GL_RENDERBUFFER_SAMPLES: [internal] int32           = 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: [internal] int32 = 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: [internal] int32 = 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: [internal] int32 = 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: [internal] int32 = 0x8CD3;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: [internal] int32 = 0x8CD4;
GL_FRAMEBUFFER_COMPLETE: [internal] int32           = 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: [internal] int32 = 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: [internal] int32 = 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: [internal] int32 = 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: [internal] int32 = 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED: [internal] int32        = 0x8CDD;
GL_MAX_COLOR_ATTACHMENTS: [internal] int32          = 0x8CDF;
GL_COLOR_ATTACHMENT0: [internal] int32              = 0x8CE0;
GL_COLOR_ATTACHMENT1: [internal] int32              = 0x8CE1;
GL_COLOR_ATTACHMENT2: [internal] int32              = 0x8CE2;
GL_COLOR_ATTACHMENT3: [internal] int32              = 0x8CE3;
GL_COLOR_ATTACHMENT4: [internal] int32              = 0x8CE4;
GL_COLOR_ATTACHMENT5: [internal] int32              = 0x8CE5;
GL_COLOR_ATTACHMENT6: [internal] int32              = 0x8CE6;
GL_COLOR_ATTACHMENT7: [internal] int32              = 0x8CE7;
GL_COLOR_ATTACHMENT8: [internal] int32              = 0x8CE8;
GL_COLOR_ATTACHMENT9: [internal] int32              = 0x8CE9;
GL_COLOR_ATTACHMENT10: [internal] int32             = 0x8CEA;
GL_COLOR_ATTACHMENT11: [internal] int32             = 0x8CEB;
GL_COLOR_ATTACHMENT12: [internal] int32             = 0x8CEC;
GL_COLOR_ATTACHMENT13: [internal] int32             = 0x8CED;
GL_COLOR_ATTACHMENT14: [internal] int32             = 0x8CEE;
GL_COLOR_ATTACHMENT15: [internal] int32             = 0x8CEF;
GL_COLOR_ATTACHMENT16: [internal] int32             = 0x8CF0;
GL_COLOR_ATTACHMENT17: [internal] int32             = 0x8CF1;
GL_COLOR_ATTACHMENT18: [internal] int32             = 0x8CF2;
GL_COLOR_ATTACHMENT19: [internal] int32             = 0x8CF3;
GL_COLOR_ATTACHMENT20: [internal] int32             = 0x8CF4;
GL_COLOR_ATTACHMENT21: [internal] int32             = 0x8CF5;
GL_COLOR_ATTACHMENT22: [internal] int32             = 0x8CF6;
GL_COLOR_ATTACHMENT23: [internal] int32             = 0x8CF7;
GL_COLOR_ATTACHMENT24: [internal] int32             = 0x8CF8;
GL_COLOR_ATTACHMENT25: [internal] int32             = 0x8CF9;
GL_COLOR_ATTACHMENT26: [internal] int32             = 0x8CFA;
GL_COLOR_ATTACHMENT27: [internal] int32             = 0x8CFB;
GL_COLOR_ATTACHMENT28: [internal] int32             = 0x8CFC;
GL_COLOR_ATTACHMENT29: [internal] int32             = 0x8CFD;
GL_COLOR_ATTACHMENT30: [internal] int32             = 0x8CFE;
GL_COLOR_ATTACHMENT31: [internal] int32             = 0x8CFF;
GL_DEPTH_ATTACHMENT: [internal] int32               = 0x8D00;
GL_STENCIL_ATTACHMENT: [internal] int32             = 0x8D20;
GL_FRAMEBUFFER: [internal] int32                    = 0x8D40;
GL_RENDERBUFFER: [internal] int32                   = 0x8D41;
GL_RENDERBUFFER_WIDTH: [internal] int32             = 0x8D42;
GL_RENDERBUFFER_HEIGHT: [internal] int32            = 0x8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT: [internal] int32   = 0x8D44;
GL_STENCIL_INDEX1: [internal] int32                 = 0x8D46;
GL_STENCIL_INDEX4: [internal] int32                 = 0x8D47;
GL_STENCIL_INDEX8: [internal] int32                 = 0x8D48;
GL_STENCIL_INDEX16: [internal] int32                = 0x8D49;
GL_RENDERBUFFER_RED_SIZE: [internal] int32          = 0x8D50;
GL_RENDERBUFFER_GREEN_SIZE: [internal] int32        = 0x8D51;
GL_RENDERBUFFER_BLUE_SIZE: [internal] int32         = 0x8D52;
GL_RENDERBUFFER_ALPHA_SIZE: [internal] int32        = 0x8D53;
GL_RENDERBUFFER_DEPTH_SIZE: [internal] int32        = 0x8D54;
GL_RENDERBUFFER_STENCIL_SIZE: [internal] int32      = 0x8D55;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: [internal] int32 = 0x8D56;
GL_MAX_SAMPLES: [internal] int32                    = 0x8D57;
GL_FRAMEBUFFER_SRGB: [internal] int32               = 0x8DB9;
GL_HALF_FLOAT: [internal] int32                     = 0x140B;
GL_MAP_READ_BIT: [internal] int32                   = 0x0001;
GL_MAP_WRITE_BIT: [internal] int32                  = 0x0002;
GL_MAP_INVALIDATE_RANGE_BIT: [internal] int32       = 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT: [internal] int32      = 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT: [internal] int32         = 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT: [internal] int32         = 0x0020;
GL_COMPRESSED_RED_RGTC1: [internal] int32           = 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1: [internal] int32    = 0x8DBC;
GL_COMPRESSED_RG_RGTC2: [internal] int32            = 0x8DBD;
GL_COMPRESSED_SIGNED_RG_RGTC2: [internal] int32     = 0x8DBE;
GL_RG: [internal] int32                             = 0x8227;
GL_RG_INTEGER: [internal] int32                     = 0x8228;
GL_R8: [internal] int32                             = 0x8229;
GL_R16: [internal] int32                            = 0x822A;
GL_RG8: [internal] int32                            = 0x822B;
GL_RG16: [internal] int32                           = 0x822C;
GL_R16F: [internal] int32                           = 0x822D;
GL_R32F: [internal] int32                           = 0x822E;
GL_RG16F: [internal] int32                          = 0x822F;
GL_RG32F: [internal] int32                          = 0x8230;
GL_R8I: [internal] int32                            = 0x8231;
GL_R8UI: [internal] int32                           = 0x8232;
GL_R16I: [internal] int32                           = 0x8233;
GL_R16UI: [internal] int32                          = 0x8234;
GL_R32I: [internal] int32                           = 0x8235;
GL_R32UI: [internal] int32                          = 0x8236;
GL_RG8I: [internal] int32                           = 0x8237;
GL_RG8UI: [internal] int32                          = 0x8238;
GL_RG16I: [internal] int32                          = 0x8239;
GL_RG16UI: [internal] int32                         = 0x823A;
GL_RG32I: [internal] int32                          = 0x823B;
GL_RG32UI: [internal] int32                         = 0x823C;
GL_VERTEX_ARRAY_BINDING: [internal] int32           = 0x85B5;

def PFNGLCOLORMASKIPROC = (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean)(void)*;
def PFNGLGETBOOLEANI_VPROC = (target: GLenum, index: GLuint, data: GLboolean*)(void)*;
def PFNGLGETINTEGERI_VPROC = (target: GLenum, index: GLuint, data: GLint*)(void)*;
def PFNGLENABLEIPROC = (target: GLenum, index: GLuint)(void)*;
def PFNGLDISABLEIPROC = (target: GLenum, index: GLuint)(void)*;
def PFNGLISENABLEDIPROC = (target: GLenum, index: GLuint)(GLboolean)*;
def PFNGLBEGINTRANSFORMFEEDBACKPROC = (primitiveMode: GLenum)(void)*;
def PFNGLENDTRANSFORMFEEDBACKPROC = ()(void)*;
def PFNGLBINDBUFFERRANGEPROC = (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLBINDBUFFERBASEPROC = (target: GLenum, index: GLuint, buffer: GLuint)(void)*;
def PFNGLTRANSFORMFEEDBACKVARYINGSPROC = (program: GLuint, count: GLsizei, varyings: GLchar**, bufferMode: GLenum)(void)*;
def PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = (program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*)(void)*;
def PFNGLCLAMPCOLORPROC = (target: GLenum, clamp: GLenum)(void)*;
def PFNGLBEGINCONDITIONALRENDERPROC = (id: GLuint, mode: GLenum)(void)*;
def PFNGLENDCONDITIONALRENDERPROC = ()(void)*;
def PFNGLVERTEXATTRIBIPOINTERPROC = (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void*)(void)*;
def PFNGLGETVERTEXATTRIBIIVPROC = (index: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETVERTEXATTRIBIUIVPROC = (index: GLuint, pname: GLenum, params: GLuint*)(void)*;
def PFNGLVERTEXATTRIBI1IPROC = (index: GLuint, x: GLint)(void)*;
def PFNGLVERTEXATTRIBI2IPROC = (index: GLuint, x: GLint, y: GLint)(void)*;
def PFNGLVERTEXATTRIBI3IPROC = (index: GLuint, x: GLint, y: GLint, z: GLint)(void)*;
def PFNGLVERTEXATTRIBI4IPROC = (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint)(void)*;
def PFNGLVERTEXATTRIBI1UIPROC = (index: GLuint, x: GLuint)(void)*;
def PFNGLVERTEXATTRIBI2UIPROC = (index: GLuint, x: GLuint, y: GLuint)(void)*;
def PFNGLVERTEXATTRIBI3UIPROC = (index: GLuint, x: GLuint, y: GLuint, z: GLuint)(void)*;
def PFNGLVERTEXATTRIBI4UIPROC = (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint)(void)*;
def PFNGLVERTEXATTRIBI1IVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLVERTEXATTRIBI2IVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLVERTEXATTRIBI3IVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLVERTEXATTRIBI4IVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLVERTEXATTRIBI1UIVPROC = (index: GLuint, v: GLuint*)(void)*;
def PFNGLVERTEXATTRIBI2UIVPROC = (index: GLuint, v: GLuint*)(void)*;
def PFNGLVERTEXATTRIBI3UIVPROC = (index: GLuint, v: GLuint*)(void)*;
def PFNGLVERTEXATTRIBI4UIVPROC = (index: GLuint, v: GLuint*)(void)*;
def PFNGLVERTEXATTRIBI4BVPROC = (index: GLuint, v: GLbyte*)(void)*;
def PFNGLVERTEXATTRIBI4SVPROC = (index: GLuint, v: GLshort*)(void)*;
def PFNGLVERTEXATTRIBI4UBVPROC = (index: GLuint, v: GLubyte*)(void)*;
def PFNGLVERTEXATTRIBI4USVPROC = (index: GLuint, v: GLushort*)(void)*;
def PFNGLGETUNIFORMUIVPROC = (program: GLuint, location: GLint, params: GLuint*)(void)*;
def PFNGLBINDFRAGDATALOCATIONPROC = (program: GLuint, color: GLuint, name: GLchar*)(void)*;
def PFNGLGETFRAGDATALOCATIONPROC = (program: GLuint, name: GLchar*)(GLint)*;
def PFNGLUNIFORM1UIPROC = (location: GLint, v0: GLuint)(void)*;
def PFNGLUNIFORM2UIPROC = (location: GLint, v0: GLuint, v1: GLuint)(void)*;
def PFNGLUNIFORM3UIPROC = (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint)(void)*;
def PFNGLUNIFORM4UIPROC = (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint)(void)*;
def PFNGLUNIFORM1UIVPROC = (location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLUNIFORM2UIVPROC = (location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLUNIFORM3UIVPROC = (location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLUNIFORM4UIVPROC = (location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLTEXPARAMETERIIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLTEXPARAMETERIUIVPROC = (target: GLenum, pname: GLenum, params: GLuint*)(void)*;
def PFNGLGETTEXPARAMETERIIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETTEXPARAMETERIUIVPROC = (target: GLenum, pname: GLenum, params: GLuint*)(void)*;
def PFNGLCLEARBUFFERIVPROC = (buffer: GLenum, drawbuffer: GLint, value: GLint*)(void)*;
def PFNGLCLEARBUFFERUIVPROC = (buffer: GLenum, drawbuffer: GLint, value: GLuint*)(void)*;
def PFNGLCLEARBUFFERFVPROC = (buffer: GLenum, drawbuffer: GLint, value: GLfloat*)(void)*;
def PFNGLCLEARBUFFERFIPROC = (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint)(void)*;
def PFNGLGETSTRINGIPROC = (name: GLenum, index: GLuint)(GLubyte*)*;
def PFNGLISRENDERBUFFERPROC = (renderbuffer: GLuint)(GLboolean)*;
def PFNGLBINDRENDERBUFFERPROC = (target: GLenum, renderbuffer: GLuint)(void)*;
def PFNGLDELETERENDERBUFFERSPROC = (n: GLsizei, renderbuffers: GLuint*)(void)*;
def PFNGLGENRENDERBUFFERSPROC = (n: GLsizei, renderbuffers: GLuint*)(void)*;
def PFNGLRENDERBUFFERSTORAGEPROC = (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLGETRENDERBUFFERPARAMETERIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLISFRAMEBUFFERPROC = (framebuffer: GLuint)(GLboolean)*;
def PFNGLBINDFRAMEBUFFERPROC = (target: GLenum, framebuffer: GLuint)(void)*;
def PFNGLDELETEFRAMEBUFFERSPROC = (n: GLsizei, framebuffers: GLuint*)(void)*;
def PFNGLGENFRAMEBUFFERSPROC = (n: GLsizei, framebuffers: GLuint*)(void)*;
def PFNGLCHECKFRAMEBUFFERSTATUSPROC = (target: GLenum)(GLenum)*;
def PFNGLFRAMEBUFFERTEXTURE1DPROC = (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLFRAMEBUFFERTEXTURE2DPROC = (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLFRAMEBUFFERTEXTURE3DPROC = (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint)(void)*;
def PFNGLFRAMEBUFFERRENDERBUFFERPROC = (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint)(void)*;
def PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = (target: GLenum, attachment: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGENERATEMIPMAPPROC = (target: GLenum)(void)*;
def PFNGLBLITFRAMEBUFFERPROC = (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum)(void)*;
def PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLFRAMEBUFFERTEXTURELAYERPROC = (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint)(void)*;
def PFNGLMAPBUFFERRANGEPROC = (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield)(void*)*;
def PFNGLFLUSHMAPPEDBUFFERRANGEPROC = (target: GLenum, offset: GLintptr, length: GLsizeiptr)(void)*;
def PFNGLBINDVERTEXARRAYPROC = (array: GLuint)(void)*;
def PFNGLDELETEVERTEXARRAYSPROC = (n: GLsizei, arrays: GLuint*)(void)*;
def PFNGLGENVERTEXARRAYSPROC = (n: GLsizei, arrays: GLuint*)(void)*;
def PFNGLISVERTEXARRAYPROC = (array: GLuint)(GLboolean)*;

@[c]glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void;
@[c]glGetBooleani_v(target: GLenum, index: GLuint, data: GLboolean*): void;
@[c]glGetIntegeri_v(target: GLenum, index: GLuint, data: GLint*): void;
@[c]glEnablei(target: GLenum, index: GLuint): void;
@[c]glDisablei(target: GLenum, index: GLuint): void;
@[c]glIsEnabledi(target: GLenum, index: GLuint): GLboolean;
@[c]glBeginTransformFeedback(primitiveMode: GLenum): void;
@[c]glEndTransformFeedback::void;
@[c]glBindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void;
@[c]glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint): void;
@[c]glTransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: GLchar**, bufferMode: GLenum): void;
@[c]glGetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: GLsizei*, size: GLsizei*, type: GLenum*, name: GLchar*): void;
@[c]glClampColor(target: GLenum, clamp: GLenum): void;
@[c]glBeginConditionalRender(id: GLuint, mode: GLenum): void;
@[c]glEndConditionalRender::void;
@[c]glVertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void*): void;
@[c]glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: GLuint*): void;
@[c]glVertexAttribI1i(index: GLuint, x: GLint): void;
@[c]glVertexAttribI2i(index: GLuint, x: GLint, y: GLint): void;
@[c]glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint): void;
@[c]glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;
@[c]glVertexAttribI1ui(index: GLuint, x: GLuint): void;
@[c]glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint): void;
@[c]glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint): void;
@[c]glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;
@[c]glVertexAttribI1iv(index: GLuint, v: GLint*): void;
@[c]glVertexAttribI2iv(index: GLuint, v: GLint*): void;
@[c]glVertexAttribI3iv(index: GLuint, v: GLint*): void;
@[c]glVertexAttribI4iv(index: GLuint, v: GLint*): void;
@[c]glVertexAttribI1uiv(index: GLuint, v: GLuint*): void;
@[c]glVertexAttribI2uiv(index: GLuint, v: GLuint*): void;
@[c]glVertexAttribI3uiv(index: GLuint, v: GLuint*): void;
@[c]glVertexAttribI4uiv(index: GLuint, v: GLuint*): void;
@[c]glVertexAttribI4bv(index: GLuint, v: GLbyte*): void;
@[c]glVertexAttribI4sv(index: GLuint, v: GLshort*): void;
@[c]glVertexAttribI4ubv(index: GLuint, v: GLubyte*): void;
@[c]glVertexAttribI4usv(index: GLuint, v: GLushort*): void;
@[c]glGetUniformuiv(program: GLuint, location: GLint, params: GLuint*): void;
@[c]glBindFragDataLocation(program: GLuint, color: GLuint, name: GLchar*): void;
@[c]glGetFragDataLocation(program: GLuint, name: GLchar*): GLint;
@[c]glUniform1ui(location: GLint, v0: GLuint): void;
@[c]glUniform2ui(location: GLint, v0: GLuint, v1: GLuint): void;
@[c]glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void;
@[c]glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;
@[c]glUniform1uiv(location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glUniform2uiv(location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glUniform3uiv(location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glUniform4uiv(location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glTexParameterIiv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glTexParameterIuiv(target: GLenum, pname: GLenum, params: GLuint*): void;
@[c]glGetTexParameterIiv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: GLuint*): void;
@[c]glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: GLint*): void;
@[c]glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: GLuint*): void;
@[c]glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: GLfloat*): void;
@[c]glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;
@[c]glGetStringi(name: GLenum, index: GLuint): GLubyte*;
@[c]glIsRenderbuffer(renderbuffer: GLuint): GLboolean;
@[c]glBindRenderbuffer(target: GLenum, renderbuffer: GLuint): void;
@[c]glDeleteRenderbuffers(n: GLsizei, renderbuffers: GLuint*): void;
@[c]glGenRenderbuffers(n: GLsizei, renderbuffers: GLuint*): void;
@[c]glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glIsFramebuffer(framebuffer: GLuint): GLboolean;
@[c]glBindFramebuffer(target: GLenum, framebuffer: GLuint): void;
@[c]glDeleteFramebuffers(n: GLsizei, framebuffers: GLuint*): void;
@[c]glGenFramebuffers(n: GLsizei, framebuffers: GLuint*): void;
@[c]glCheckFramebufferStatus(target: GLenum): GLenum;
@[c]glFramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void;
@[c]glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void;
@[c]glFramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void;
@[c]glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void;
@[c]glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGenerateMipmap(target: GLenum): void;
@[c]glBlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;
@[c]glRenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glFramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void;
@[c]glMapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;
@[c]glFlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr): void;
@[c]glBindVertexArray(array: GLuint): void;
@[c]glDeleteVertexArrays(n: GLsizei, arrays: GLuint*): void;
@[c]glGenVertexArrays(n: GLsizei, arrays: GLuint*): void;
@[c]glIsVertexArray(array: GLuint): GLboolean;

GL_SAMPLER_2D_RECT: [internal] int32                = 0x8B63;
GL_SAMPLER_2D_RECT_SHADOW: [internal] int32         = 0x8B64;
GL_SAMPLER_BUFFER: [internal] int32                 = 0x8DC2;
GL_INT_SAMPLER_2D_RECT: [internal] int32            = 0x8DCD;
GL_INT_SAMPLER_BUFFER: [internal] int32             = 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_2D_RECT: [internal] int32   = 0x8DD5;
GL_UNSIGNED_INT_SAMPLER_BUFFER: [internal] int32    = 0x8DD8;
GL_TEXTURE_BUFFER: [internal] int32                 = 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE: [internal] int32        = 0x8C2B;
GL_TEXTURE_BINDING_BUFFER: [internal] int32         = 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING: [internal] int32 = 0x8C2D;
GL_TEXTURE_RECTANGLE: [internal] int32              = 0x84F5;
GL_TEXTURE_BINDING_RECTANGLE: [internal] int32      = 0x84F6;
GL_PROXY_TEXTURE_RECTANGLE: [internal] int32        = 0x84F7;
GL_MAX_RECTANGLE_TEXTURE_SIZE: [internal] int32     = 0x84F8;
GL_R8_SNORM: [internal] int32                       = 0x8F94;
GL_RG8_SNORM: [internal] int32                      = 0x8F95;
GL_RGB8_SNORM: [internal] int32                     = 0x8F96;
GL_RGBA8_SNORM: [internal] int32                    = 0x8F97;
GL_R16_SNORM: [internal] int32                      = 0x8F98;
GL_RG16_SNORM: [internal] int32                     = 0x8F99;
GL_RGB16_SNORM: [internal] int32                    = 0x8F9A;
GL_RGBA16_SNORM: [internal] int32                   = 0x8F9B;
GL_SIGNED_NORMALIZED: [internal] int32              = 0x8F9C;
GL_PRIMITIVE_RESTART: [internal] int32              = 0x8F9D;
GL_PRIMITIVE_RESTART_INDEX: [internal] int32        = 0x8F9E;
GL_COPY_READ_BUFFER: [internal] int32               = 0x8F36;
GL_COPY_WRITE_BUFFER: [internal] int32              = 0x8F37;
GL_UNIFORM_BUFFER: [internal] int32                 = 0x8A11;
GL_UNIFORM_BUFFER_BINDING: [internal] int32         = 0x8A28;
GL_UNIFORM_BUFFER_START: [internal] int32           = 0x8A29;
GL_UNIFORM_BUFFER_SIZE: [internal] int32            = 0x8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS: [internal] int32      = 0x8A2B;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS: [internal] int32    = 0x8A2C;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS: [internal] int32    = 0x8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS: [internal] int32    = 0x8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS: [internal] int32    = 0x8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE: [internal] int32         = 0x8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: [internal] int32 = 0x8A31;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: [internal] int32 = 0x8A32;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: [internal] int32 = 0x8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: [internal] int32 = 0x8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: [internal] int32 = 0x8A35;
GL_ACTIVE_UNIFORM_BLOCKS: [internal] int32          = 0x8A36;
GL_UNIFORM_TYPE: [internal] int32                   = 0x8A37;
GL_UNIFORM_SIZE: [internal] int32                   = 0x8A38;
GL_UNIFORM_NAME_LENGTH: [internal] int32            = 0x8A39;
GL_UNIFORM_BLOCK_INDEX: [internal] int32            = 0x8A3A;
GL_UNIFORM_OFFSET: [internal] int32                 = 0x8A3B;
GL_UNIFORM_ARRAY_STRIDE: [internal] int32           = 0x8A3C;
GL_UNIFORM_MATRIX_STRIDE: [internal] int32          = 0x8A3D;
GL_UNIFORM_IS_ROW_MAJOR: [internal] int32           = 0x8A3E;
GL_UNIFORM_BLOCK_BINDING: [internal] int32          = 0x8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE: [internal] int32        = 0x8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH: [internal] int32      = 0x8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: [internal] int32  = 0x8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: [internal] int32 = 0x8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: [internal] int32 = 0x8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: [internal] int32 = 0x8A45;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: [internal] int32 = 0x8A46;
GL_INVALID_INDEX: [internal] int32                  = 0xFFFFFFFF;

def PFNGLDRAWARRAYSINSTANCEDPROC = (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei)(void)*;
def PFNGLDRAWELEMENTSINSTANCEDPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei)(void)*;
def PFNGLTEXBUFFERPROC = (target: GLenum, internalformat: GLenum, buffer: GLuint)(void)*;
def PFNGLPRIMITIVERESTARTINDEXPROC = (index: GLuint)(void)*;
def PFNGLCOPYBUFFERSUBDATAPROC = (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLGETUNIFORMINDICESPROC = (program: GLuint, uniformCount: GLsizei, uniformNames: GLchar**, uniformIndices: GLuint*)(void)*;
def PFNGLGETACTIVEUNIFORMSIVPROC = (program: GLuint, uniformCount: GLsizei, uniformIndices: GLuint*, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETACTIVEUNIFORMNAMEPROC = (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformName: GLchar*)(void)*;
def PFNGLGETUNIFORMBLOCKINDEXPROC = (program: GLuint, uniformBlockName: GLchar*)(GLuint)*;
def PFNGLGETACTIVEUNIFORMBLOCKIVPROC = (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformBlockName: GLchar*)(void)*;
def PFNGLUNIFORMBLOCKBINDINGPROC = (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint)(void)*;

@[c]glDrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei): void;
@[c]glDrawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei): void;
@[c]glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint): void;
@[c]glPrimitiveRestartIndex(index: GLuint): void;
@[c]glCopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;
@[c]glGetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: GLchar**, uniformIndices: GLuint*): void;
@[c]glGetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: GLuint*, pname: GLenum, params: GLint*): void;
@[c]glGetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformName: GLchar*): void;
@[c]glGetUniformBlockIndex(program: GLuint, uniformBlockName: GLchar*): GLuint;
@[c]glGetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: GLsizei*, uniformBlockName: GLchar*): void;
@[c]glUniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;

def __GLsync;
def GLsync = __GLsync*;
def GLuint64 = khronos_uint64_t;
def GLint64 = khronos_int64_t;

GL_CONTEXT_CORE_PROFILE_BIT: [internal] int32       = 0x00000001;
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: [internal] int32 = 0x00000002;
GL_LINES_ADJACENCY: [internal] int32                = 0x000A;
GL_LINE_STRIP_ADJACENCY: [internal] int32           = 0x000B;
GL_TRIANGLES_ADJACENCY: [internal] int32            = 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY: [internal] int32       = 0x000D;
GL_PROGRAM_POINT_SIZE: [internal] int32             = 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: [internal] int32 = 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED: [internal] int32 = 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: [internal] int32 = 0x8DA8;
GL_GEOMETRY_SHADER: [internal] int32                = 0x8DD9;
GL_GEOMETRY_VERTICES_OUT: [internal] int32          = 0x8916;
GL_GEOMETRY_INPUT_TYPE: [internal] int32            = 0x8917;
GL_GEOMETRY_OUTPUT_TYPE: [internal] int32           = 0x8918;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: [internal] int32 = 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES: [internal] int32   = 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: [internal] int32 = 0x8DE1;
GL_MAX_VERTEX_OUTPUT_COMPONENTS: [internal] int32   = 0x9122;
GL_MAX_GEOMETRY_INPUT_COMPONENTS: [internal] int32  = 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: [internal] int32 = 0x9124;
GL_MAX_FRAGMENT_INPUT_COMPONENTS: [internal] int32  = 0x9125;
GL_CONTEXT_PROFILE_MASK: [internal] int32           = 0x9126;
GL_DEPTH_CLAMP: [internal] int32                    = 0x864F;
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: [internal] int32 = 0x8E4C;
GL_FIRST_VERTEX_CONVENTION: [internal] int32        = 0x8E4D;
GL_LAST_VERTEX_CONVENTION: [internal] int32         = 0x8E4E;
GL_PROVOKING_VERTEX: [internal] int32               = 0x8E4F;
GL_TEXTURE_CUBE_MAP_SEAMLESS: [internal] int32      = 0x884F;
GL_MAX_SERVER_WAIT_TIMEOUT: [internal] int32        = 0x9111;
GL_OBJECT_TYPE: [internal] int32                    = 0x9112;
GL_SYNC_CONDITION: [internal] int32                 = 0x9113;
GL_SYNC_STATUS: [internal] int32                    = 0x9114;
GL_SYNC_FLAGS: [internal] int32                     = 0x9115;
GL_SYNC_FENCE: [internal] int32                     = 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE: [internal] int32     = 0x9117;
GL_UNSIGNALED: [internal] int32                     = 0x9118;
GL_SIGNALED: [internal] int32                       = 0x9119;
GL_ALREADY_SIGNALED: [internal] int32               = 0x911A;
GL_TIMEOUT_EXPIRED: [internal] int32                = 0x911B;
GL_CONDITION_SATISFIED: [internal] int32            = 0x911C;
GL_WAIT_FAILED: [internal] int32                    = 0x911D;
GL_TIMEOUT_IGNORED: [internal] int64                = 0xFFFFFFFFFFFFFFFF;
GL_SYNC_FLUSH_COMMANDS_BIT: [internal] int32        = 0x00000001;
GL_SAMPLE_POSITION: [internal] int32                = 0x8E50;
GL_SAMPLE_MASK: [internal] int32                    = 0x8E51;
GL_SAMPLE_MASK_VALUE: [internal] int32              = 0x8E52;
GL_MAX_SAMPLE_MASK_WORDS: [internal] int32          = 0x8E59;
GL_TEXTURE_2D_MULTISAMPLE: [internal] int32         = 0x9100;
GL_PROXY_TEXTURE_2D_MULTISAMPLE: [internal] int32   = 0x9101;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY: [internal] int32   = 0x9102;
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: [internal] int32 = 0x9103;
GL_TEXTURE_BINDING_2D_MULTISAMPLE: [internal] int32 = 0x9104;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: [internal] int32 = 0x9105;
GL_TEXTURE_SAMPLES: [internal] int32                = 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: [internal] int32 = 0x9107;
GL_SAMPLER_2D_MULTISAMPLE: [internal] int32         = 0x9108;
GL_INT_SAMPLER_2D_MULTISAMPLE: [internal] int32     = 0x9109;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: [internal] int32 = 0x910A;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY: [internal] int32   = 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: [internal] int32 = 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: [internal] int32 = 0x910D;
GL_MAX_COLOR_TEXTURE_SAMPLES: [internal] int32      = 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES: [internal] int32      = 0x910F;
GL_MAX_INTEGER_SAMPLES: [internal] int32            = 0x9110;

def PFNGLDRAWELEMENTSBASEVERTEXPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, basevertex: GLint)(void)*;
def PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void*, basevertex: GLint)(void)*;
def PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei, basevertex: GLint)(void)*;
def PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = (mode: GLenum, count: GLsizei*, type: GLenum, indices: void**, drawcount: GLsizei, basevertex: GLint*)(void)*;
def PFNGLPROVOKINGVERTEXPROC = (mode: GLenum)(void)*;
def PFNGLFENCESYNCPROC = (condition: GLenum, flags: GLbitfield)(GLsync)*;
def PFNGLISSYNCPROC = (sync: GLsync)(GLboolean)*;
def PFNGLDELETESYNCPROC = (sync: GLsync)(void)*;
def PFNGLCLIENTWAITSYNCPROC = (sync: GLsync, flags: GLbitfield, timeout: GLuint64)(GLenum)*;
def PFNGLWAITSYNCPROC = (sync: GLsync, flags: GLbitfield, timeout: GLuint64)(void)*;
def PFNGLGETINTEGER64VPROC = (pname: GLenum, data: GLint64*)(void)*;
def PFNGLGETSYNCIVPROC = (sync: GLsync, pname: GLenum, count: GLsizei, length: GLsizei*, values: GLint*)(void)*;
def PFNGLGETINTEGER64I_VPROC = (target: GLenum, index: GLuint, data: GLint64*)(void)*;
def PFNGLGETBUFFERPARAMETERI64VPROC = (target: GLenum, pname: GLenum, params: GLint64*)(void)*;
def PFNGLFRAMEBUFFERTEXTUREPROC = (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLTEXIMAGE2DMULTISAMPLEPROC = (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLTEXIMAGE3DMULTISAMPLEPROC = (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLGETMULTISAMPLEFVPROC = (pname: GLenum, index: GLuint, val: GLfloat*)(void)*;
def PFNGLSAMPLEMASKIPROC = (maskNumber: GLuint, mask: GLbitfield)(void)*;

@[c]glDrawElementsBaseVertex(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, basevertex: GLint): void;
@[c]glDrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: void*, basevertex: GLint): void;
@[c]glDrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei, basevertex: GLint): void;
@[c]glMultiDrawElementsBaseVertex(mode: GLenum, count: GLsizei*, type: GLenum, indices: void**, drawcount: GLsizei, basevertex: GLint*): void;
@[c]glProvokingVertex(mode: GLenum): void;
@[c]glFenceSync(condition: GLenum, flags: GLbitfield): GLsync;
@[c]glIsSync(sync: GLsync): GLboolean;
@[c]glDeleteSync(sync: GLsync): void;
@[c]glClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum;
@[c]glWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64): void;
@[c]glGetInteger64v(pname: GLenum, data: GLint64*): void;
@[c]glGetSynciv(sync: GLsync, pname: GLenum, count: GLsizei, length: GLsizei*, values: GLint*): void;
@[c]glGetInteger64i_v(target: GLenum, index: GLuint, data: GLint64*): void;
@[c]glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: GLint64*): void;
@[c]glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void;
@[c]glTexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glTexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glGetMultisamplefv(pname: GLenum, index: GLuint, val: GLfloat*): void;
@[c]glSampleMaski(maskNumber: GLuint, mask: GLbitfield): void;

GL_VERTEX_ATTRIB_ARRAY_DIVISOR: [internal] int32    = 0x88FE;
GL_SRC1_COLOR: [internal] int32                     = 0x88F9;
GL_ONE_MINUS_SRC1_COLOR: [internal] int32           = 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA: [internal] int32           = 0x88FB;
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: [internal] int32   = 0x88FC;
GL_ANY_SAMPLES_PASSED: [internal] int32             = 0x8C2F;
GL_SAMPLER_BINDING: [internal] int32                = 0x8919;
GL_RGB10_A2UI: [internal] int32                     = 0x906F;
GL_TEXTURE_SWIZZLE_R: [internal] int32              = 0x8E42;
GL_TEXTURE_SWIZZLE_G: [internal] int32              = 0x8E43;
GL_TEXTURE_SWIZZLE_B: [internal] int32              = 0x8E44;
GL_TEXTURE_SWIZZLE_A: [internal] int32              = 0x8E45;
GL_TEXTURE_SWIZZLE_RGBA: [internal] int32           = 0x8E46;
GL_TIME_ELAPSED: [internal] int32                   = 0x88BF;
GL_TIMESTAMP: [internal] int32                      = 0x8E28;
GL_INT_2_10_10_10_REV: [internal] int32             = 0x8D9F;

def PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = (program: GLuint, colorNumber: GLuint, index: GLuint, name: GLchar*)(void)*;
def PFNGLGETFRAGDATAINDEXPROC = (program: GLuint, name: GLchar*)(GLint)*;
def PFNGLGENSAMPLERSPROC = (count: GLsizei, samplers: GLuint*)(void)*;
def PFNGLDELETESAMPLERSPROC = (count: GLsizei, samplers: GLuint*)(void)*;
def PFNGLISSAMPLERPROC = (sampler: GLuint)(GLboolean)*;
def PFNGLBINDSAMPLERPROC = (unit: GLuint, sampler: GLuint)(void)*;
def PFNGLSAMPLERPARAMETERIPROC = (sampler: GLuint, pname: GLenum, param: GLint)(void)*;
def PFNGLSAMPLERPARAMETERIVPROC = (sampler: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLSAMPLERPARAMETERFPROC = (sampler: GLuint, pname: GLenum, param: GLfloat)(void)*;
def PFNGLSAMPLERPARAMETERFVPROC = (sampler: GLuint, pname: GLenum, param: GLfloat*)(void)*;
def PFNGLSAMPLERPARAMETERIIVPROC = (sampler: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLSAMPLERPARAMETERIUIVPROC = (sampler: GLuint, pname: GLenum, param: GLuint*)(void)*;
def PFNGLGETSAMPLERPARAMETERIVPROC = (sampler: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETSAMPLERPARAMETERIIVPROC = (sampler: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETSAMPLERPARAMETERFVPROC = (sampler: GLuint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETSAMPLERPARAMETERIUIVPROC = (sampler: GLuint, pname: GLenum, params: GLuint*)(void)*;
def PFNGLQUERYCOUNTERPROC = (id: GLuint, target: GLenum)(void)*;
def PFNGLGETQUERYOBJECTI64VPROC = (id: GLuint, pname: GLenum, params: GLint64*)(void)*;
def PFNGLGETQUERYOBJECTUI64VPROC = (id: GLuint, pname: GLenum, params: GLuint64*)(void)*;
def PFNGLVERTEXATTRIBDIVISORPROC = (index: GLuint, divisor: GLuint)(void)*;
def PFNGLVERTEXATTRIBP1UIPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint)(void)*;
def PFNGLVERTEXATTRIBP1UIVPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*)(void)*;
def PFNGLVERTEXATTRIBP2UIPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint)(void)*;
def PFNGLVERTEXATTRIBP2UIVPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*)(void)*;
def PFNGLVERTEXATTRIBP3UIPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint)(void)*;
def PFNGLVERTEXATTRIBP3UIVPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*)(void)*;
def PFNGLVERTEXATTRIBP4UIPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint)(void)*;
def PFNGLVERTEXATTRIBP4UIVPROC = (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*)(void)*;

@[c]glBindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: GLchar*): void;
@[c]glGetFragDataIndex(program: GLuint, name: GLchar*): GLint;
@[c]glGenSamplers(count: GLsizei, samplers: GLuint*): void;
@[c]glDeleteSamplers(count: GLsizei, samplers: GLuint*): void;
@[c]glIsSampler(sampler: GLuint): GLboolean;
@[c]glBindSampler(unit: GLuint, sampler: GLuint): void;
@[c]glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint): void;
@[c]glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: GLint*): void;
@[c]glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat): void;
@[c]glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: GLfloat*): void;
@[c]glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: GLint*): void;
@[c]glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: GLuint*): void;
@[c]glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: GLfloat*): void;
@[c]glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: GLuint*): void;
@[c]glQueryCounter(id: GLuint, target: GLenum): void;
@[c]glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: GLint64*): void;
@[c]glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: GLuint64*): void;
@[c]glVertexAttribDivisor(index: GLuint, divisor: GLuint): void;
@[c]glVertexAttribP1ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint): void;
@[c]glVertexAttribP1uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*): void;
@[c]glVertexAttribP2ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint): void;
@[c]glVertexAttribP2uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*): void;
@[c]glVertexAttribP3ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint): void;
@[c]glVertexAttribP3uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*): void;
@[c]glVertexAttribP4ui(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint): void;
@[c]glVertexAttribP4uiv(index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint*): void;

GL_SAMPLE_SHADING: [internal] int32                 = 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE: [internal] int32       = 0x8C37;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: [internal] int32 = 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: [internal] int32 = 0x8E5F;
GL_TEXTURE_CUBE_MAP_ARRAY: [internal] int32         = 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: [internal] int32 = 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY: [internal] int32   = 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY: [internal] int32         = 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW: [internal] int32  = 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY: [internal] int32     = 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: [internal] int32 = 0x900F;
GL_DRAW_INDIRECT_BUFFER: [internal] int32           = 0x8F3F;
GL_DRAW_INDIRECT_BUFFER_BINDING: [internal] int32   = 0x8F43;
GL_GEOMETRY_SHADER_INVOCATIONS: [internal] int32    = 0x887F;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS: [internal] int32 = 0x8E5A;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: [internal] int32 = 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: [internal] int32 = 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: [internal] int32 = 0x8E5D;
GL_MAX_VERTEX_STREAMS: [internal] int32             = 0x8E71;
GL_DOUBLE_VEC2: [internal] int32                    = 0x8FFC;
GL_DOUBLE_VEC3: [internal] int32                    = 0x8FFD;
GL_DOUBLE_VEC4: [internal] int32                    = 0x8FFE;
GL_DOUBLE_MAT2: [internal] int32                    = 0x8F46;
GL_DOUBLE_MAT3: [internal] int32                    = 0x8F47;
GL_DOUBLE_MAT4: [internal] int32                    = 0x8F48;
GL_DOUBLE_MAT2x3: [internal] int32                  = 0x8F49;
GL_DOUBLE_MAT2x4: [internal] int32                  = 0x8F4A;
GL_DOUBLE_MAT3x2: [internal] int32                  = 0x8F4B;
GL_DOUBLE_MAT3x4: [internal] int32                  = 0x8F4C;
GL_DOUBLE_MAT4x2: [internal] int32                  = 0x8F4D;
GL_DOUBLE_MAT4x3: [internal] int32                  = 0x8F4E;
GL_ACTIVE_SUBROUTINES: [internal] int32             = 0x8DE5;
GL_ACTIVE_SUBROUTINE_UNIFORMS: [internal] int32     = 0x8DE6;
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: [internal] int32 = 0x8E47;
GL_ACTIVE_SUBROUTINE_MAX_LENGTH: [internal] int32   = 0x8E48;
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: [internal] int32 = 0x8E49;
GL_MAX_SUBROUTINES: [internal] int32                = 0x8DE7;
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: [internal] int32 = 0x8DE8;
GL_NUM_COMPATIBLE_SUBROUTINES: [internal] int32     = 0x8E4A;
GL_COMPATIBLE_SUBROUTINES: [internal] int32         = 0x8E4B;
GL_PATCHES: [internal] int32                        = 0x000E;
GL_PATCH_VERTICES: [internal] int32                 = 0x8E72;
GL_PATCH_DEFAULT_INNER_LEVEL: [internal] int32      = 0x8E73;
GL_PATCH_DEFAULT_OUTER_LEVEL: [internal] int32      = 0x8E74;
GL_TESS_CONTROL_OUTPUT_VERTICES: [internal] int32   = 0x8E75;
GL_TESS_GEN_MODE: [internal] int32                  = 0x8E76;
GL_TESS_GEN_SPACING: [internal] int32               = 0x8E77;
GL_TESS_GEN_VERTEX_ORDER: [internal] int32          = 0x8E78;
GL_TESS_GEN_POINT_MODE: [internal] int32            = 0x8E79;
GL_ISOLINES: [internal] int32                       = 0x8E7A;
GL_FRACTIONAL_ODD: [internal] int32                 = 0x8E7B;
GL_FRACTIONAL_EVEN: [internal] int32                = 0x8E7C;
GL_MAX_PATCH_VERTICES: [internal] int32             = 0x8E7D;
GL_MAX_TESS_GEN_LEVEL: [internal] int32             = 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: [internal] int32 = 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: [internal] int32 = 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: [internal] int32 = 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: [internal] int32 = 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: [internal] int32 = 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS: [internal] int32      = 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: [internal] int32 = 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: [internal] int32 = 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: [internal] int32 = 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: [internal] int32 = 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: [internal] int32 = 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: [internal] int32 = 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: [internal] int32 = 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: [internal] int32 = 0x8E1F;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: [internal] int32 = 0x84F0;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: [internal] int32 = 0x84F1;
GL_TESS_EVALUATION_SHADER: [internal] int32         = 0x8E87;
GL_TESS_CONTROL_SHADER: [internal] int32            = 0x8E88;
GL_TRANSFORM_FEEDBACK: [internal] int32             = 0x8E22;
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: [internal] int32 = 0x8E23;
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: [internal] int32 = 0x8E24;
GL_TRANSFORM_FEEDBACK_BINDING: [internal] int32     = 0x8E25;
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: [internal] int32 = 0x8E70;

def PFNGLMINSAMPLESHADINGPROC = (value: GLfloat)(void)*;
def PFNGLBLENDEQUATIONIPROC = (buf: GLuint, mode: GLenum)(void)*;
def PFNGLBLENDEQUATIONSEPARATEIPROC = (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)(void)*;
def PFNGLBLENDFUNCIPROC = (buf: GLuint, src: GLenum, dst: GLenum)(void)*;
def PFNGLBLENDFUNCSEPARATEIPROC = (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum)(void)*;
def PFNGLDRAWARRAYSINDIRECTPROC = (mode: GLenum, indirect: void*)(void)*;
def PFNGLDRAWELEMENTSINDIRECTPROC = (mode: GLenum, type: GLenum, indirect: void*)(void)*;
def PFNGLUNIFORM1DPROC = (location: GLint, x: GLdouble)(void)*;
def PFNGLUNIFORM2DPROC = (location: GLint, x: GLdouble, y: GLdouble)(void)*;
def PFNGLUNIFORM3DPROC = (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLUNIFORM4DPROC = (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble)(void)*;
def PFNGLUNIFORM1DVPROC = (location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLUNIFORM2DVPROC = (location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLUNIFORM3DVPROC = (location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLUNIFORM4DVPROC = (location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX2DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX3DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX4DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX2X3DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX2X4DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX3X2DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX3X4DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX4X2DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLUNIFORMMATRIX4X3DVPROC = (location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLGETUNIFORMDVPROC = (program: GLuint, location: GLint, params: GLdouble*)(void)*;
def PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = (program: GLuint, shadertype: GLenum, name: GLchar*)(GLint)*;
def PFNGLGETSUBROUTINEINDEXPROC = (program: GLuint, shadertype: GLenum, name: GLchar*)(GLuint)*;
def PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: GLint*)(void)*;
def PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*)(void)*;
def PFNGLGETACTIVESUBROUTINENAMEPROC = (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*)(void)*;
def PFNGLUNIFORMSUBROUTINESUIVPROC = (shadertype: GLenum, count: GLsizei, indices: GLuint*)(void)*;
def PFNGLGETUNIFORMSUBROUTINEUIVPROC = (shadertype: GLenum, location: GLint, params: GLuint*)(void)*;
def PFNGLGETPROGRAMSTAGEIVPROC = (program: GLuint, shadertype: GLenum, pname: GLenum, values: GLint*)(void)*;
def PFNGLPATCHPARAMETERIPROC = (pname: GLenum, value: GLint)(void)*;
def PFNGLPATCHPARAMETERFVPROC = (pname: GLenum, values: GLfloat*)(void)*;
def PFNGLBINDTRANSFORMFEEDBACKPROC = (target: GLenum, id: GLuint)(void)*;
def PFNGLDELETETRANSFORMFEEDBACKSPROC = (n: GLsizei, ids: GLuint*)(void)*;
def PFNGLGENTRANSFORMFEEDBACKSPROC = (n: GLsizei, ids: GLuint*)(void)*;
def PFNGLISTRANSFORMFEEDBACKPROC = (id: GLuint)(GLboolean)*;
def PFNGLPAUSETRANSFORMFEEDBACKPROC = ()(void)*;
def PFNGLRESUMETRANSFORMFEEDBACKPROC = ()(void)*;
def PFNGLDRAWTRANSFORMFEEDBACKPROC = (mode: GLenum, id: GLuint)(void)*;
def PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = (mode: GLenum, id: GLuint, stream: GLuint)(void)*;
def PFNGLBEGINQUERYINDEXEDPROC = (target: GLenum, index: GLuint, id: GLuint)(void)*;
def PFNGLENDQUERYINDEXEDPROC = (target: GLenum, index: GLuint)(void)*;
def PFNGLGETQUERYINDEXEDIVPROC = (target: GLenum, index: GLuint, pname: GLenum, params: GLint*)(void)*;

@[c]glMinSampleShading(value: GLfloat): void;
@[c]glBlendEquationi(buf: GLuint, mode: GLenum): void;
@[c]glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void;
@[c]glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum): void;
@[c]glBlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;
@[c]glDrawArraysIndirect(mode: GLenum, indirect: void*): void;
@[c]glDrawElementsIndirect(mode: GLenum, type: GLenum, indirect: void*): void;
@[c]glUniform1d(location: GLint, x: GLdouble): void;
@[c]glUniform2d(location: GLint, x: GLdouble, y: GLdouble): void;
@[c]glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void;
@[c]glUniform1dv(location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glUniform2dv(location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glUniform3dv(location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glUniform4dv(location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glUniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glUniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glGetUniformdv(program: GLuint, location: GLint, params: GLdouble*): void;
@[c]glGetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: GLchar*): GLint;
@[c]glGetSubroutineIndex(program: GLuint, shadertype: GLenum, name: GLchar*): GLuint;
@[c]glGetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: GLint*): void;
@[c]glGetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*): void;
@[c]glGetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*): void;
@[c]glUniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: GLuint*): void;
@[c]glGetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: GLuint*): void;
@[c]glGetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: GLint*): void;
@[c]glPatchParameteri(pname: GLenum, value: GLint): void;
@[c]glPatchParameterfv(pname: GLenum, values: GLfloat*): void;
@[c]glBindTransformFeedback(target: GLenum, id: GLuint): void;
@[c]glDeleteTransformFeedbacks(n: GLsizei, ids: GLuint*): void;
@[c]glGenTransformFeedbacks(n: GLsizei, ids: GLuint*): void;
@[c]glIsTransformFeedback(id: GLuint): GLboolean;
@[c]glPauseTransformFeedback::void;
@[c]glResumeTransformFeedback::void;
@[c]glDrawTransformFeedback(mode: GLenum, id: GLuint): void;
@[c]glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint): void;
@[c]glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint): void;
@[c]glEndQueryIndexed(target: GLenum, index: GLuint): void;
@[c]glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: GLint*): void;

GL_FIXED: [internal] int32                          = 0x140C;
GL_IMPLEMENTATION_COLOR_READ_TYPE: [internal] int32 = 0x8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT: [internal] int32 = 0x8B9B;
GL_LOW_FLOAT: [internal] int32                      = 0x8DF0;
GL_MEDIUM_FLOAT: [internal] int32                   = 0x8DF1;
GL_HIGH_FLOAT: [internal] int32                     = 0x8DF2;
GL_LOW_INT: [internal] int32                        = 0x8DF3;
GL_MEDIUM_INT: [internal] int32                     = 0x8DF4;
GL_HIGH_INT: [internal] int32                       = 0x8DF5;
GL_SHADER_COMPILER: [internal] int32                = 0x8DFA;
GL_SHADER_BINARY_FORMATS: [internal] int32          = 0x8DF8;
GL_NUM_SHADER_BINARY_FORMATS: [internal] int32      = 0x8DF9;
GL_MAX_VERTEX_UNIFORM_VECTORS: [internal] int32     = 0x8DFB;
GL_MAX_VARYING_VECTORS: [internal] int32            = 0x8DFC;
GL_MAX_FRAGMENT_UNIFORM_VECTORS: [internal] int32   = 0x8DFD;
GL_RGB565: [internal] int32                         = 0x8D62;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT: [internal] int32 = 0x8257;
GL_PROGRAM_BINARY_LENGTH: [internal] int32          = 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS: [internal] int32     = 0x87FE;
GL_PROGRAM_BINARY_FORMATS: [internal] int32         = 0x87FF;
GL_VERTEX_SHADER_BIT: [internal] int32              = 0x00000001;
GL_FRAGMENT_SHADER_BIT: [internal] int32            = 0x00000002;
GL_GEOMETRY_SHADER_BIT: [internal] int32            = 0x00000004;
GL_TESS_CONTROL_SHADER_BIT: [internal] int32        = 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT: [internal] int32     = 0x00000010;
GL_ALL_SHADER_BITS: [internal] int32                = 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE: [internal] int32              = 0x8258;
GL_ACTIVE_PROGRAM: [internal] int32                 = 0x8259;
GL_PROGRAM_PIPELINE_BINDING: [internal] int32       = 0x825A;
GL_MAX_VIEWPORTS: [internal] int32                  = 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS: [internal] int32         = 0x825C;
GL_VIEWPORT_BOUNDS_RANGE: [internal] int32          = 0x825D;
GL_LAYER_PROVOKING_VERTEX: [internal] int32         = 0x825E;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX: [internal] int32 = 0x825F;
GL_UNDEFINED_VERTEX: [internal] int32               = 0x8260;

def PFNGLRELEASESHADERCOMPILERPROC = ()(void)*;
def PFNGLSHADERBINARYPROC = (count: GLsizei, shaders: GLuint*, binaryFormat: GLenum, binary: void*, length: GLsizei)(void)*;
def PFNGLGETSHADERPRECISIONFORMATPROC = (shadertype: GLenum, precisiontype: GLenum, range: GLint*, precision: GLint*)(void)*;
def PFNGLDEPTHRANGEFPROC = (n: GLfloat, f: GLfloat)(void)*;
def PFNGLCLEARDEPTHFPROC = (d: GLfloat)(void)*;
def PFNGLGETPROGRAMBINARYPROC = (program: GLuint, bufSize: GLsizei, length: GLsizei*, binaryFormat: GLenum*, binary: void*)(void)*;
def PFNGLPROGRAMBINARYPROC = (program: GLuint, binaryFormat: GLenum, binary: void*, length: GLsizei)(void)*;
def PFNGLPROGRAMPARAMETERIPROC = (program: GLuint, pname: GLenum, value: GLint)(void)*;
def PFNGLUSEPROGRAMSTAGESPROC = (pipeline: GLuint, stages: GLbitfield, program: GLuint)(void)*;
def PFNGLACTIVESHADERPROGRAMPROC = (pipeline: GLuint, program: GLuint)(void)*;
def PFNGLCREATESHADERPROGRAMVPROC = (type: GLenum, count: GLsizei, strings: GLchar**)(GLuint)*;
def PFNGLBINDPROGRAMPIPELINEPROC = (pipeline: GLuint)(void)*;
def PFNGLDELETEPROGRAMPIPELINESPROC = (n: GLsizei, pipelines: GLuint*)(void)*;
def PFNGLGENPROGRAMPIPELINESPROC = (n: GLsizei, pipelines: GLuint*)(void)*;
def PFNGLISPROGRAMPIPELINEPROC = (pipeline: GLuint)(GLboolean)*;
def PFNGLGETPROGRAMPIPELINEIVPROC = (pipeline: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM1IPROC = (program: GLuint, location: GLint, v0: GLint)(void)*;
def PFNGLPROGRAMUNIFORM1IVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM1FPROC = (program: GLuint, location: GLint, v0: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM1FVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM1DPROC = (program: GLuint, location: GLint, v0: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM1DVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM1UIPROC = (program: GLuint, location: GLint, v0: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM1UIVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM2IPROC = (program: GLuint, location: GLint, v0: GLint, v1: GLint)(void)*;
def PFNGLPROGRAMUNIFORM2IVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM2FPROC = (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM2FVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM2DPROC = (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM2DVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM2UIPROC = (program: GLuint, location: GLint, v0: GLuint, v1: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM2UIVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM3IPROC = (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint)(void)*;
def PFNGLPROGRAMUNIFORM3IVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM3FPROC = (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM3FVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM3DPROC = (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM3DVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM3UIPROC = (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM3UIVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM4IPROC = (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint)(void)*;
def PFNGLPROGRAMUNIFORM4IVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM4FPROC = (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM4FVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM4DPROC = (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM4DVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM4UIPROC = (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM4UIVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLVALIDATEPROGRAMPIPELINEPROC = (pipeline: GLuint)(void)*;
def PFNGLGETPROGRAMPIPELINEINFOLOGPROC = (pipeline: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*)(void)*;
def PFNGLVERTEXATTRIBL1DPROC = (index: GLuint, x: GLdouble)(void)*;
def PFNGLVERTEXATTRIBL2DPROC = (index: GLuint, x: GLdouble, y: GLdouble)(void)*;
def PFNGLVERTEXATTRIBL3DPROC = (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLVERTEXATTRIBL4DPROC = (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble)(void)*;
def PFNGLVERTEXATTRIBL1DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIBL2DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIBL3DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIBL4DVPROC = (index: GLuint, v: GLdouble*)(void)*;
def PFNGLVERTEXATTRIBLPOINTERPROC = (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void*)(void)*;
def PFNGLGETVERTEXATTRIBLDVPROC = (index: GLuint, pname: GLenum, params: GLdouble*)(void)*;
def PFNGLVIEWPORTARRAYVPROC = (first: GLuint, count: GLsizei, v: GLfloat*)(void)*;
def PFNGLVIEWPORTINDEXEDFPROC = (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat)(void)*;
def PFNGLVIEWPORTINDEXEDFVPROC = (index: GLuint, v: GLfloat*)(void)*;
def PFNGLSCISSORARRAYVPROC = (first: GLuint, count: GLsizei, v: GLint*)(void)*;
def PFNGLSCISSORINDEXEDPROC = (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLSCISSORINDEXEDVPROC = (index: GLuint, v: GLint*)(void)*;
def PFNGLDEPTHRANGEARRAYVPROC = (first: GLuint, count: GLsizei, v: GLdouble*)(void)*;
def PFNGLDEPTHRANGEINDEXEDPROC = (index: GLuint, n: GLdouble, f: GLdouble)(void)*;
def PFNGLGETFLOATI_VPROC = (target: GLenum, index: GLuint, data: GLfloat*)(void)*;
def PFNGLGETDOUBLEI_VPROC = (target: GLenum, index: GLuint, data: GLdouble*)(void)*;

@[c]glReleaseShaderCompiler::void;
@[c]glShaderBinary(count: GLsizei, shaders: GLuint*, binaryFormat: GLenum, binary: void*, length: GLsizei): void;
@[c]glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: GLint*, precision: GLint*): void;
@[c]glDepthRangef(n: GLfloat, f: GLfloat): void;
@[c]glClearDepthf(d: GLfloat): void;
@[c]glGetProgramBinary(program: GLuint, bufSize: GLsizei, length: GLsizei*, binaryFormat: GLenum*, binary: void*): void;
@[c]glProgramBinary(program: GLuint, binaryFormat: GLenum, binary: void*, length: GLsizei): void;
@[c]glProgramParameteri(program: GLuint, pname: GLenum, value: GLint): void;
@[c]glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint): void;
@[c]glActiveShaderProgram(pipeline: GLuint, program: GLuint): void;
@[c]glCreateShaderProgramv(type: GLenum, count: GLsizei, strings: GLchar**): GLuint;
@[c]glBindProgramPipeline(pipeline: GLuint): void;
@[c]glDeleteProgramPipelines(n: GLsizei, pipelines: GLuint*): void;
@[c]glGenProgramPipelines(n: GLsizei, pipelines: GLuint*): void;
@[c]glIsProgramPipeline(pipeline: GLuint): GLboolean;
@[c]glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: GLint*): void;
@[c]glProgramUniform1i(program: GLuint, location: GLint, v0: GLint): void;
@[c]glProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat): void;
@[c]glProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble): void;
@[c]glProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint): void;
@[c]glProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint): void;
@[c]glProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void;
@[c]glProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble): void;
@[c]glProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void;
@[c]glProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void;
@[c]glProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void;
@[c]glProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble): void;
@[c]glProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void;
@[c]glProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void;
@[c]glProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void;
@[c]glProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble): void;
@[c]glProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;
@[c]glProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glValidateProgramPipeline(pipeline: GLuint): void;
@[c]glGetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: GLsizei*, infoLog: GLchar*): void;
@[c]glVertexAttribL1d(index: GLuint, x: GLdouble): void;
@[c]glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble): void;
@[c]glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void;
@[c]glVertexAttribL1dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttribL2dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttribL3dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttribL4dv(index: GLuint, v: GLdouble*): void;
@[c]glVertexAttribLPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: void*): void;
@[c]glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: GLdouble*): void;
@[c]glViewportArrayv(first: GLuint, count: GLsizei, v: GLfloat*): void;
@[c]glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat): void;
@[c]glViewportIndexedfv(index: GLuint, v: GLfloat*): void;
@[c]glScissorArrayv(first: GLuint, count: GLsizei, v: GLint*): void;
@[c]glScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei): void;
@[c]glScissorIndexedv(index: GLuint, v: GLint*): void;
@[c]glDepthRangeArrayv(first: GLuint, count: GLsizei, v: GLdouble*): void;
@[c]glDepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble): void;
@[c]glGetFloati_v(target: GLenum, index: GLuint, data: GLfloat*): void;
@[c]glGetDoublei_v(target: GLenum, index: GLuint, data: GLdouble*): void;

GL_COPY_READ_BUFFER_BINDING: [internal] int32       = 0x8F36;
GL_COPY_WRITE_BUFFER_BINDING: [internal] int32      = 0x8F37;
GL_TRANSFORM_FEEDBACK_ACTIVE: [internal] int32      = 0x8E24;
GL_TRANSFORM_FEEDBACK_PAUSED: [internal] int32      = 0x8E23;
GL_UNPACK_COMPRESSED_BLOCK_WIDTH: [internal] int32  = 0x9127;
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: [internal] int32 = 0x9128;
GL_UNPACK_COMPRESSED_BLOCK_DEPTH: [internal] int32  = 0x9129;
GL_UNPACK_COMPRESSED_BLOCK_SIZE: [internal] int32   = 0x912A;
GL_PACK_COMPRESSED_BLOCK_WIDTH: [internal] int32    = 0x912B;
GL_PACK_COMPRESSED_BLOCK_HEIGHT: [internal] int32   = 0x912C;
GL_PACK_COMPRESSED_BLOCK_DEPTH: [internal] int32    = 0x912D;
GL_PACK_COMPRESSED_BLOCK_SIZE: [internal] int32     = 0x912E;
GL_NUM_SAMPLE_COUNTS: [internal] int32              = 0x9380;
GL_MIN_MAP_BUFFER_ALIGNMENT: [internal] int32       = 0x90BC;
GL_ATOMIC_COUNTER_BUFFER: [internal] int32          = 0x92C0;
GL_ATOMIC_COUNTER_BUFFER_BINDING: [internal] int32  = 0x92C1;
GL_ATOMIC_COUNTER_BUFFER_START: [internal] int32    = 0x92C2;
GL_ATOMIC_COUNTER_BUFFER_SIZE: [internal] int32     = 0x92C3;
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: [internal] int32 = 0x92C4;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: [internal] int32 = 0x92C5;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: [internal] int32 = 0x92C6;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: [internal] int32 = 0x92C7;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: [internal] int32 = 0x92C8;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: [internal] int32 = 0x92C9;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: [internal] int32 = 0x92CA;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: [internal] int32 = 0x92CB;
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x92CC;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x92CE;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x92CF;
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x92D0;
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x92D1;
GL_MAX_VERTEX_ATOMIC_COUNTERS: [internal] int32     = 0x92D2;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: [internal] int32 = 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: [internal] int32 = 0x92D4;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS: [internal] int32   = 0x92D5;
GL_MAX_FRAGMENT_ATOMIC_COUNTERS: [internal] int32   = 0x92D6;
GL_MAX_COMBINED_ATOMIC_COUNTERS: [internal] int32   = 0x92D7;
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: [internal] int32 = 0x92D8;
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: [internal] int32 = 0x92DC;
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: [internal] int32  = 0x92D9;
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: [internal] int32 = 0x92DA;
GL_UNSIGNED_INT_ATOMIC_COUNTER: [internal] int32    = 0x92DB;
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: [internal] int32 = 0x00000001;
GL_ELEMENT_ARRAY_BARRIER_BIT: [internal] int32      = 0x00000002;
GL_UNIFORM_BARRIER_BIT: [internal] int32            = 0x00000004;
GL_TEXTURE_FETCH_BARRIER_BIT: [internal] int32      = 0x00000008;
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: [internal] int32 = 0x00000020;
GL_COMMAND_BARRIER_BIT: [internal] int32            = 0x00000040;
GL_PIXEL_BUFFER_BARRIER_BIT: [internal] int32       = 0x00000080;
GL_TEXTURE_UPDATE_BARRIER_BIT: [internal] int32     = 0x00000100;
GL_BUFFER_UPDATE_BARRIER_BIT: [internal] int32      = 0x00000200;
GL_FRAMEBUFFER_BARRIER_BIT: [internal] int32        = 0x00000400;
GL_TRANSFORM_FEEDBACK_BARRIER_BIT: [internal] int32 = 0x00000800;
GL_ATOMIC_COUNTER_BARRIER_BIT: [internal] int32     = 0x00001000;
GL_ALL_BARRIER_BITS: [internal] int32               = 0xFFFFFFFF;
GL_MAX_IMAGE_UNITS: [internal] int32                = 0x8F38;
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: [internal] int32 = 0x8F39;
GL_IMAGE_BINDING_NAME: [internal] int32             = 0x8F3A;
GL_IMAGE_BINDING_LEVEL: [internal] int32            = 0x8F3B;
GL_IMAGE_BINDING_LAYERED: [internal] int32          = 0x8F3C;
GL_IMAGE_BINDING_LAYER: [internal] int32            = 0x8F3D;
GL_IMAGE_BINDING_ACCESS: [internal] int32           = 0x8F3E;
GL_IMAGE_1D: [internal] int32                       = 0x904C;
GL_IMAGE_2D: [internal] int32                       = 0x904D;
GL_IMAGE_3D: [internal] int32                       = 0x904E;
GL_IMAGE_2D_RECT: [internal] int32                  = 0x904F;
GL_IMAGE_CUBE: [internal] int32                     = 0x9050;
GL_IMAGE_BUFFER: [internal] int32                   = 0x9051;
GL_IMAGE_1D_ARRAY: [internal] int32                 = 0x9052;
GL_IMAGE_2D_ARRAY: [internal] int32                 = 0x9053;
GL_IMAGE_CUBE_MAP_ARRAY: [internal] int32           = 0x9054;
GL_IMAGE_2D_MULTISAMPLE: [internal] int32           = 0x9055;
GL_IMAGE_2D_MULTISAMPLE_ARRAY: [internal] int32     = 0x9056;
GL_INT_IMAGE_1D: [internal] int32                   = 0x9057;
GL_INT_IMAGE_2D: [internal] int32                   = 0x9058;
GL_INT_IMAGE_3D: [internal] int32                   = 0x9059;
GL_INT_IMAGE_2D_RECT: [internal] int32              = 0x905A;
GL_INT_IMAGE_CUBE: [internal] int32                 = 0x905B;
GL_INT_IMAGE_BUFFER: [internal] int32               = 0x905C;
GL_INT_IMAGE_1D_ARRAY: [internal] int32             = 0x905D;
GL_INT_IMAGE_2D_ARRAY: [internal] int32             = 0x905E;
GL_INT_IMAGE_CUBE_MAP_ARRAY: [internal] int32       = 0x905F;
GL_INT_IMAGE_2D_MULTISAMPLE: [internal] int32       = 0x9060;
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: [internal] int32 = 0x9061;
GL_UNSIGNED_INT_IMAGE_1D: [internal] int32          = 0x9062;
GL_UNSIGNED_INT_IMAGE_2D: [internal] int32          = 0x9063;
GL_UNSIGNED_INT_IMAGE_3D: [internal] int32          = 0x9064;
GL_UNSIGNED_INT_IMAGE_2D_RECT: [internal] int32     = 0x9065;
GL_UNSIGNED_INT_IMAGE_CUBE: [internal] int32        = 0x9066;
GL_UNSIGNED_INT_IMAGE_BUFFER: [internal] int32      = 0x9067;
GL_UNSIGNED_INT_IMAGE_1D_ARRAY: [internal] int32    = 0x9068;
GL_UNSIGNED_INT_IMAGE_2D_ARRAY: [internal] int32    = 0x9069;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: [internal] int32 = 0x906A;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: [internal] int32 = 0x906B;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: [internal] int32 = 0x906C;
GL_MAX_IMAGE_SAMPLES: [internal] int32              = 0x906D;
GL_IMAGE_BINDING_FORMAT: [internal] int32           = 0x906E;
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: [internal] int32 = 0x90C7;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: [internal] int32 = 0x90C8;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: [internal] int32 = 0x90C9;
GL_MAX_VERTEX_IMAGE_UNIFORMS: [internal] int32      = 0x90CA;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: [internal] int32 = 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: [internal] int32 = 0x90CC;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS: [internal] int32    = 0x90CD;
GL_MAX_FRAGMENT_IMAGE_UNIFORMS: [internal] int32    = 0x90CE;
GL_MAX_COMBINED_IMAGE_UNIFORMS: [internal] int32    = 0x90CF;
GL_COMPRESSED_RGBA_BPTC_UNORM: [internal] int32     = 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM: [internal] int32 = 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT: [internal] int32 = 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT: [internal] int32 = 0x8E8F;
GL_TEXTURE_IMMUTABLE_FORMAT: [internal] int32       = 0x912F;

def PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint)(void)*;
def PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei, baseinstance: GLuint)(void)*;
def PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint)(void)*;
def PFNGLGETINTERNALFORMATIVPROC = (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: GLint*)(void)*;
def PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLBINDIMAGETEXTUREPROC = (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum)(void)*;
def PFNGLMEMORYBARRIERPROC = (barriers: GLbitfield)(void)*;
def PFNGLTEXSTORAGE1DPROC = (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei)(void)*;
def PFNGLTEXSTORAGE2DPROC = (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXSTORAGE3DPROC = (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)(void)*;
def PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = (mode: GLenum, id: GLuint, instancecount: GLsizei)(void)*;
def PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei)(void)*;

@[c]glDrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint): void;
@[c]glDrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei, baseinstance: GLuint): void;
@[c]glDrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint): void;
@[c]glGetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: GLint*): void;
@[c]glGetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: GLint*): void;
@[c]glBindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum): void;
@[c]glMemoryBarrier(barriers: GLbitfield): void;
@[c]glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void;
@[c]glTexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glTexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;
@[c]glDrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei): void;
@[c]glDrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei): void;

def GLDEBUGPROC = (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: GLchar*, userParam: void*)(void)*;

GL_NUM_SHADING_LANGUAGE_VERSIONS: [internal] int32  = 0x82E9;
GL_VERTEX_ATTRIB_ARRAY_LONG: [internal] int32       = 0x874E;
GL_COMPRESSED_RGB8_ETC2: [internal] int32           = 0x9274;
GL_COMPRESSED_SRGB8_ETC2: [internal] int32          = 0x9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: [internal] int32 = 0x9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: [internal] int32 = 0x9277;
GL_COMPRESSED_RGBA8_ETC2_EAC: [internal] int32      = 0x9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: [internal] int32 = 0x9279;
GL_COMPRESSED_R11_EAC: [internal] int32             = 0x9270;
GL_COMPRESSED_SIGNED_R11_EAC: [internal] int32      = 0x9271;
GL_COMPRESSED_RG11_EAC: [internal] int32            = 0x9272;
GL_COMPRESSED_SIGNED_RG11_EAC: [internal] int32     = 0x9273;
GL_PRIMITIVE_RESTART_FIXED_INDEX: [internal] int32  = 0x8D69;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE: [internal] int32 = 0x8D6A;
GL_MAX_ELEMENT_INDEX: [internal] int32              = 0x8D6B;
GL_COMPUTE_SHADER: [internal] int32                 = 0x91B9;
GL_MAX_COMPUTE_UNIFORM_BLOCKS: [internal] int32     = 0x91BB;
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: [internal] int32 = 0x91BC;
GL_MAX_COMPUTE_IMAGE_UNIFORMS: [internal] int32     = 0x91BD;
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: [internal] int32 = 0x8262;
GL_MAX_COMPUTE_UNIFORM_COMPONENTS: [internal] int32 = 0x8263;
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: [internal] int32 = 0x8264;
GL_MAX_COMPUTE_ATOMIC_COUNTERS: [internal] int32    = 0x8265;
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: [internal] int32 = 0x8266;
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: [internal] int32 = 0x90EB;
GL_MAX_COMPUTE_WORK_GROUP_COUNT: [internal] int32   = 0x91BE;
GL_MAX_COMPUTE_WORK_GROUP_SIZE: [internal] int32    = 0x91BF;
GL_COMPUTE_WORK_GROUP_SIZE: [internal] int32        = 0x8267;
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: [internal] int32 = 0x90EC;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: [internal] int32 = 0x90ED;
GL_DISPATCH_INDIRECT_BUFFER: [internal] int32       = 0x90EE;
GL_DISPATCH_INDIRECT_BUFFER_BINDING: [internal] int32 = 0x90EF;
GL_COMPUTE_SHADER_BIT: [internal] int32             = 0x00000020;
GL_DEBUG_OUTPUT_SYNCHRONOUS: [internal] int32       = 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: [internal] int32 = 0x8243;
GL_DEBUG_CALLBACK_FUNCTION: [internal] int32        = 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM: [internal] int32      = 0x8245;
GL_DEBUG_SOURCE_API: [internal] int32               = 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM: [internal] int32     = 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER: [internal] int32   = 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY: [internal] int32       = 0x8249;
GL_DEBUG_SOURCE_APPLICATION: [internal] int32       = 0x824A;
GL_DEBUG_SOURCE_OTHER: [internal] int32             = 0x824B;
GL_DEBUG_TYPE_ERROR: [internal] int32               = 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: [internal] int32 = 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: [internal] int32  = 0x824E;
GL_DEBUG_TYPE_PORTABILITY: [internal] int32         = 0x824F;
GL_DEBUG_TYPE_PERFORMANCE: [internal] int32         = 0x8250;
GL_DEBUG_TYPE_OTHER: [internal] int32               = 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH: [internal] int32       = 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES: [internal] int32      = 0x9144;
GL_DEBUG_LOGGED_MESSAGES: [internal] int32          = 0x9145;
GL_DEBUG_SEVERITY_HIGH: [internal] int32            = 0x9146;
GL_DEBUG_SEVERITY_MEDIUM: [internal] int32          = 0x9147;
GL_DEBUG_SEVERITY_LOW: [internal] int32             = 0x9148;
GL_DEBUG_TYPE_MARKER: [internal] int32              = 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP: [internal] int32          = 0x8269;
GL_DEBUG_TYPE_POP_GROUP: [internal] int32           = 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION: [internal] int32    = 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH: [internal] int32    = 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH: [internal] int32        = 0x826D;
GL_BUFFER: [internal] int32                         = 0x82E0;
GL_SHADER: [internal] int32                         = 0x82E1;
GL_PROGRAM: [internal] int32                        = 0x82E2;
GL_QUERY: [internal] int32                          = 0x82E3;
GL_PROGRAM_PIPELINE: [internal] int32               = 0x82E4;
GL_SAMPLER: [internal] int32                        = 0x82E6;
GL_MAX_LABEL_LENGTH: [internal] int32               = 0x82E8;
GL_DEBUG_OUTPUT: [internal] int32                   = 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT: [internal] int32         = 0x00000002;
GL_MAX_UNIFORM_LOCATIONS: [internal] int32          = 0x826E;
GL_FRAMEBUFFER_DEFAULT_WIDTH: [internal] int32      = 0x9310;
GL_FRAMEBUFFER_DEFAULT_HEIGHT: [internal] int32     = 0x9311;
GL_FRAMEBUFFER_DEFAULT_LAYERS: [internal] int32     = 0x9312;
GL_FRAMEBUFFER_DEFAULT_SAMPLES: [internal] int32    = 0x9313;
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: [internal] int32 = 0x9314;
GL_MAX_FRAMEBUFFER_WIDTH: [internal] int32          = 0x9315;
GL_MAX_FRAMEBUFFER_HEIGHT: [internal] int32         = 0x9316;
GL_MAX_FRAMEBUFFER_LAYERS: [internal] int32         = 0x9317;
GL_MAX_FRAMEBUFFER_SAMPLES: [internal] int32        = 0x9318;
GL_INTERNALFORMAT_SUPPORTED: [internal] int32       = 0x826F;
GL_INTERNALFORMAT_PREFERRED: [internal] int32       = 0x8270;
GL_INTERNALFORMAT_RED_SIZE: [internal] int32        = 0x8271;
GL_INTERNALFORMAT_GREEN_SIZE: [internal] int32      = 0x8272;
GL_INTERNALFORMAT_BLUE_SIZE: [internal] int32       = 0x8273;
GL_INTERNALFORMAT_ALPHA_SIZE: [internal] int32      = 0x8274;
GL_INTERNALFORMAT_DEPTH_SIZE: [internal] int32      = 0x8275;
GL_INTERNALFORMAT_STENCIL_SIZE: [internal] int32    = 0x8276;
GL_INTERNALFORMAT_SHARED_SIZE: [internal] int32     = 0x8277;
GL_INTERNALFORMAT_RED_TYPE: [internal] int32        = 0x8278;
GL_INTERNALFORMAT_GREEN_TYPE: [internal] int32      = 0x8279;
GL_INTERNALFORMAT_BLUE_TYPE: [internal] int32       = 0x827A;
GL_INTERNALFORMAT_ALPHA_TYPE: [internal] int32      = 0x827B;
GL_INTERNALFORMAT_DEPTH_TYPE: [internal] int32      = 0x827C;
GL_INTERNALFORMAT_STENCIL_TYPE: [internal] int32    = 0x827D;
GL_MAX_WIDTH: [internal] int32                      = 0x827E;
GL_MAX_HEIGHT: [internal] int32                     = 0x827F;
GL_MAX_DEPTH: [internal] int32                      = 0x8280;
GL_MAX_LAYERS: [internal] int32                     = 0x8281;
GL_MAX_COMBINED_DIMENSIONS: [internal] int32        = 0x8282;
GL_COLOR_COMPONENTS: [internal] int32               = 0x8283;
GL_DEPTH_COMPONENTS: [internal] int32               = 0x8284;
GL_STENCIL_COMPONENTS: [internal] int32             = 0x8285;
GL_COLOR_RENDERABLE: [internal] int32               = 0x8286;
GL_DEPTH_RENDERABLE: [internal] int32               = 0x8287;
GL_STENCIL_RENDERABLE: [internal] int32             = 0x8288;
GL_FRAMEBUFFER_RENDERABLE: [internal] int32         = 0x8289;
GL_FRAMEBUFFER_RENDERABLE_LAYERED: [internal] int32 = 0x828A;
GL_FRAMEBUFFER_BLEND: [internal] int32              = 0x828B;
GL_READ_PIXELS: [internal] int32                    = 0x828C;
GL_READ_PIXELS_FORMAT: [internal] int32             = 0x828D;
GL_READ_PIXELS_TYPE: [internal] int32               = 0x828E;
GL_TEXTURE_IMAGE_FORMAT: [internal] int32           = 0x828F;
GL_TEXTURE_IMAGE_TYPE: [internal] int32             = 0x8290;
GL_GET_TEXTURE_IMAGE_FORMAT: [internal] int32       = 0x8291;
GL_GET_TEXTURE_IMAGE_TYPE: [internal] int32         = 0x8292;
GL_MIPMAP: [internal] int32                         = 0x8293;
GL_MANUAL_GENERATE_MIPMAP: [internal] int32         = 0x8294;
GL_AUTO_GENERATE_MIPMAP: [internal] int32           = 0x8295;
GL_COLOR_ENCODING: [internal] int32                 = 0x8296;
GL_SRGB_READ: [internal] int32                      = 0x8297;
GL_SRGB_WRITE: [internal] int32                     = 0x8298;
GL_FILTER: [internal] int32                         = 0x829A;
GL_VERTEX_TEXTURE: [internal] int32                 = 0x829B;
GL_TESS_CONTROL_TEXTURE: [internal] int32           = 0x829C;
GL_TESS_EVALUATION_TEXTURE: [internal] int32        = 0x829D;
GL_GEOMETRY_TEXTURE: [internal] int32               = 0x829E;
GL_FRAGMENT_TEXTURE: [internal] int32               = 0x829F;
GL_COMPUTE_TEXTURE: [internal] int32                = 0x82A0;
GL_TEXTURE_SHADOW: [internal] int32                 = 0x82A1;
GL_TEXTURE_GATHER: [internal] int32                 = 0x82A2;
GL_TEXTURE_GATHER_SHADOW: [internal] int32          = 0x82A3;
GL_SHADER_IMAGE_LOAD: [internal] int32              = 0x82A4;
GL_SHADER_IMAGE_STORE: [internal] int32             = 0x82A5;
GL_SHADER_IMAGE_ATOMIC: [internal] int32            = 0x82A6;
GL_IMAGE_TEXEL_SIZE: [internal] int32               = 0x82A7;
GL_IMAGE_COMPATIBILITY_CLASS: [internal] int32      = 0x82A8;
GL_IMAGE_PIXEL_FORMAT: [internal] int32             = 0x82A9;
GL_IMAGE_PIXEL_TYPE: [internal] int32               = 0x82AA;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: [internal] int32 = 0x82AC;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: [internal] int32 = 0x82AD;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: [internal] int32 = 0x82AE;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: [internal] int32 = 0x82AF;
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: [internal] int32 = 0x82B1;
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: [internal] int32 = 0x82B2;
GL_TEXTURE_COMPRESSED_BLOCK_SIZE: [internal] int32  = 0x82B3;
GL_CLEAR_BUFFER: [internal] int32                   = 0x82B4;
GL_TEXTURE_VIEW: [internal] int32                   = 0x82B5;
GL_VIEW_COMPATIBILITY_CLASS: [internal] int32       = 0x82B6;
GL_FULL_SUPPORT: [internal] int32                   = 0x82B7;
GL_CAVEAT_SUPPORT: [internal] int32                 = 0x82B8;
GL_IMAGE_CLASS_4_X_32: [internal] int32             = 0x82B9;
GL_IMAGE_CLASS_2_X_32: [internal] int32             = 0x82BA;
GL_IMAGE_CLASS_1_X_32: [internal] int32             = 0x82BB;
GL_IMAGE_CLASS_4_X_16: [internal] int32             = 0x82BC;
GL_IMAGE_CLASS_2_X_16: [internal] int32             = 0x82BD;
GL_IMAGE_CLASS_1_X_16: [internal] int32             = 0x82BE;
GL_IMAGE_CLASS_4_X_8: [internal] int32              = 0x82BF;
GL_IMAGE_CLASS_2_X_8: [internal] int32              = 0x82C0;
GL_IMAGE_CLASS_1_X_8: [internal] int32              = 0x82C1;
GL_IMAGE_CLASS_11_11_10: [internal] int32           = 0x82C2;
GL_IMAGE_CLASS_10_10_10_2: [internal] int32         = 0x82C3;
GL_VIEW_CLASS_128_BITS: [internal] int32            = 0x82C4;
GL_VIEW_CLASS_96_BITS: [internal] int32             = 0x82C5;
GL_VIEW_CLASS_64_BITS: [internal] int32             = 0x82C6;
GL_VIEW_CLASS_48_BITS: [internal] int32             = 0x82C7;
GL_VIEW_CLASS_32_BITS: [internal] int32             = 0x82C8;
GL_VIEW_CLASS_24_BITS: [internal] int32             = 0x82C9;
GL_VIEW_CLASS_16_BITS: [internal] int32             = 0x82CA;
GL_VIEW_CLASS_8_BITS: [internal] int32              = 0x82CB;
GL_VIEW_CLASS_S3TC_DXT1_RGB: [internal] int32       = 0x82CC;
GL_VIEW_CLASS_S3TC_DXT1_RGBA: [internal] int32      = 0x82CD;
GL_VIEW_CLASS_S3TC_DXT3_RGBA: [internal] int32      = 0x82CE;
GL_VIEW_CLASS_S3TC_DXT5_RGBA: [internal] int32      = 0x82CF;
GL_VIEW_CLASS_RGTC1_RED: [internal] int32           = 0x82D0;
GL_VIEW_CLASS_RGTC2_RG: [internal] int32            = 0x82D1;
GL_VIEW_CLASS_BPTC_UNORM: [internal] int32          = 0x82D2;
GL_VIEW_CLASS_BPTC_FLOAT: [internal] int32          = 0x82D3;
GL_UNIFORM: [internal] int32                        = 0x92E1;
GL_UNIFORM_BLOCK: [internal] int32                  = 0x92E2;
GL_PROGRAM_INPUT: [internal] int32                  = 0x92E3;
GL_PROGRAM_OUTPUT: [internal] int32                 = 0x92E4;
GL_BUFFER_VARIABLE: [internal] int32                = 0x92E5;
GL_SHADER_STORAGE_BLOCK: [internal] int32           = 0x92E6;
GL_VERTEX_SUBROUTINE: [internal] int32              = 0x92E8;
GL_TESS_CONTROL_SUBROUTINE: [internal] int32        = 0x92E9;
GL_TESS_EVALUATION_SUBROUTINE: [internal] int32     = 0x92EA;
GL_GEOMETRY_SUBROUTINE: [internal] int32            = 0x92EB;
GL_FRAGMENT_SUBROUTINE: [internal] int32            = 0x92EC;
GL_COMPUTE_SUBROUTINE: [internal] int32             = 0x92ED;
GL_VERTEX_SUBROUTINE_UNIFORM: [internal] int32      = 0x92EE;
GL_TESS_CONTROL_SUBROUTINE_UNIFORM: [internal] int32 = 0x92EF;
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: [internal] int32 = 0x92F0;
GL_GEOMETRY_SUBROUTINE_UNIFORM: [internal] int32    = 0x92F1;
GL_FRAGMENT_SUBROUTINE_UNIFORM: [internal] int32    = 0x92F2;
GL_COMPUTE_SUBROUTINE_UNIFORM: [internal] int32     = 0x92F3;
GL_TRANSFORM_FEEDBACK_VARYING: [internal] int32     = 0x92F4;
GL_ACTIVE_RESOURCES: [internal] int32               = 0x92F5;
GL_MAX_NAME_LENGTH: [internal] int32                = 0x92F6;
GL_MAX_NUM_ACTIVE_VARIABLES: [internal] int32       = 0x92F7;
GL_MAX_NUM_COMPATIBLE_SUBROUTINES: [internal] int32 = 0x92F8;
GL_NAME_LENGTH: [internal] int32                    = 0x92F9;
GL_TYPE: [internal] int32                           = 0x92FA;
GL_ARRAY_SIZE: [internal] int32                     = 0x92FB;
GL_OFFSET: [internal] int32                         = 0x92FC;
GL_BLOCK_INDEX: [internal] int32                    = 0x92FD;
GL_ARRAY_STRIDE: [internal] int32                   = 0x92FE;
GL_MATRIX_STRIDE: [internal] int32                  = 0x92FF;
GL_IS_ROW_MAJOR: [internal] int32                   = 0x9300;
GL_ATOMIC_COUNTER_BUFFER_INDEX: [internal] int32    = 0x9301;
GL_BUFFER_BINDING: [internal] int32                 = 0x9302;
GL_BUFFER_DATA_SIZE: [internal] int32               = 0x9303;
GL_NUM_ACTIVE_VARIABLES: [internal] int32           = 0x9304;
GL_ACTIVE_VARIABLES: [internal] int32               = 0x9305;
GL_REFERENCED_BY_VERTEX_SHADER: [internal] int32    = 0x9306;
GL_REFERENCED_BY_TESS_CONTROL_SHADER: [internal] int32 = 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER: [internal] int32 = 0x9308;
GL_REFERENCED_BY_GEOMETRY_SHADER: [internal] int32  = 0x9309;
GL_REFERENCED_BY_FRAGMENT_SHADER: [internal] int32  = 0x930A;
GL_REFERENCED_BY_COMPUTE_SHADER: [internal] int32   = 0x930B;
GL_TOP_LEVEL_ARRAY_SIZE: [internal] int32           = 0x930C;
GL_TOP_LEVEL_ARRAY_STRIDE: [internal] int32         = 0x930D;
GL_LOCATION: [internal] int32                       = 0x930E;
GL_LOCATION_INDEX: [internal] int32                 = 0x930F;
GL_IS_PER_PATCH: [internal] int32                   = 0x92E7;
GL_SHADER_STORAGE_BUFFER: [internal] int32          = 0x90D2;
GL_SHADER_STORAGE_BUFFER_BINDING: [internal] int32  = 0x90D3;
GL_SHADER_STORAGE_BUFFER_START: [internal] int32    = 0x90D4;
GL_SHADER_STORAGE_BUFFER_SIZE: [internal] int32     = 0x90D5;
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90D6;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90D7;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90D9;
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90DA;
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90DB;
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: [internal] int32 = 0x90DC;
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: [internal] int32 = 0x90DD;
GL_MAX_SHADER_STORAGE_BLOCK_SIZE: [internal] int32  = 0x90DE;
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: [internal] int32 = 0x90DF;
GL_SHADER_STORAGE_BARRIER_BIT: [internal] int32     = 0x00002000;
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: [internal] int32 = 0x8F39;
GL_DEPTH_STENCIL_TEXTURE_MODE: [internal] int32     = 0x90EA;
GL_TEXTURE_BUFFER_OFFSET: [internal] int32          = 0x919D;
GL_TEXTURE_BUFFER_SIZE: [internal] int32            = 0x919E;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: [internal] int32 = 0x919F;
GL_TEXTURE_VIEW_MIN_LEVEL: [internal] int32         = 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS: [internal] int32        = 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER: [internal] int32         = 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS: [internal] int32        = 0x82DE;
GL_TEXTURE_IMMUTABLE_LEVELS: [internal] int32       = 0x82DF;
GL_VERTEX_ATTRIB_BINDING: [internal] int32          = 0x82D4;
GL_VERTEX_ATTRIB_RELATIVE_OFFSET: [internal] int32  = 0x82D5;
GL_VERTEX_BINDING_DIVISOR: [internal] int32         = 0x82D6;
GL_VERTEX_BINDING_OFFSET: [internal] int32          = 0x82D7;
GL_VERTEX_BINDING_STRIDE: [internal] int32          = 0x82D8;
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: [internal] int32 = 0x82D9;
GL_MAX_VERTEX_ATTRIB_BINDINGS: [internal] int32     = 0x82DA;
GL_VERTEX_BINDING_BUFFER: [internal] int32          = 0x8F4F;

def PFNGLCLEARBUFFERDATAPROC = (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLCLEARBUFFERSUBDATAPROC = (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLDISPATCHCOMPUTEPROC = (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint)(void)*;
def PFNGLDISPATCHCOMPUTEINDIRECTPROC = (indirect: GLintptr)(void)*;
def PFNGLCOPYIMAGESUBDATAPROC = (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei)(void)*;
def PFNGLFRAMEBUFFERPARAMETERIPROC = (target: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLGETFRAMEBUFFERPARAMETERIVPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETINTERNALFORMATI64VPROC = (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: GLint64*)(void)*;
def PFNGLINVALIDATETEXSUBIMAGEPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei)(void)*;
def PFNGLINVALIDATETEXIMAGEPROC = (texture: GLuint, level: GLint)(void)*;
def PFNGLINVALIDATEBUFFERSUBDATAPROC = (buffer: GLuint, offset: GLintptr, length: GLsizeiptr)(void)*;
def PFNGLINVALIDATEBUFFERDATAPROC = (buffer: GLuint)(void)*;
def PFNGLINVALIDATEFRAMEBUFFERPROC = (target: GLenum, numAttachments: GLsizei, attachments: GLenum*)(void)*;
def PFNGLINVALIDATESUBFRAMEBUFFERPROC = (target: GLenum, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLMULTIDRAWARRAYSINDIRECTPROC = (mode: GLenum, indirect: void*, drawcount: GLsizei, stride: GLsizei)(void)*;
def PFNGLMULTIDRAWELEMENTSINDIRECTPROC = (mode: GLenum, type: GLenum, indirect: void*, drawcount: GLsizei, stride: GLsizei)(void)*;
def PFNGLGETPROGRAMINTERFACEIVPROC = (program: GLuint, programInterface: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETPROGRAMRESOURCEINDEXPROC = (program: GLuint, programInterface: GLenum, name: GLchar*)(GLuint)*;
def PFNGLGETPROGRAMRESOURCENAMEPROC = (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*)(void)*;
def PFNGLGETPROGRAMRESOURCEIVPROC = (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, count: GLsizei, length: GLsizei*, params: GLint*)(void)*;
def PFNGLGETPROGRAMRESOURCELOCATIONPROC = (program: GLuint, programInterface: GLenum, name: GLchar*)(GLint)*;
def PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = (program: GLuint, programInterface: GLenum, name: GLchar*)(GLint)*;
def PFNGLSHADERSTORAGEBLOCKBINDINGPROC = (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint)(void)*;
def PFNGLTEXBUFFERRANGEPROC = (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLTEXSTORAGE2DMULTISAMPLEPROC = (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLTEXSTORAGE3DMULTISAMPLEPROC = (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLTEXTUREVIEWPROC = (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint)(void)*;
def PFNGLBINDVERTEXBUFFERPROC = (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei)(void)*;
def PFNGLVERTEXATTRIBFORMATPROC = (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXATTRIBIFORMATPROC = (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXATTRIBLFORMATPROC = (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXATTRIBBINDINGPROC = (attribindex: GLuint, bindingindex: GLuint)(void)*;
def PFNGLVERTEXBINDINGDIVISORPROC = (bindingindex: GLuint, divisor: GLuint)(void)*;
def PFNGLDEBUGMESSAGECONTROLPROC = (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean)(void)*;
def PFNGLDEBUGMESSAGEINSERTPROC = (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*)(void)*;
def PFNGLDEBUGMESSAGECALLBACKPROC = (callback: GLDEBUGPROC, userParam: void*)(void)*;
def PFNGLGETDEBUGMESSAGELOGPROC = (count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*)(GLuint)*;
def PFNGLPUSHDEBUGGROUPPROC = (source: GLenum, id: GLuint, length: GLsizei, message: GLchar*)(void)*;
def PFNGLPOPDEBUGGROUPPROC = ()(void)*;
def PFNGLOBJECTLABELPROC = (identifier: GLenum, name: GLuint, length: GLsizei, label: GLchar*)(void)*;
def PFNGLGETOBJECTLABELPROC = (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*)(void)*;
def PFNGLOBJECTPTRLABELPROC = (ptr: void*, length: GLsizei, label: GLchar*)(void)*;
def PFNGLGETOBJECTPTRLABELPROC = (ptr: void*, bufSize: GLsizei, length: GLsizei*, label: GLchar*)(void)*;

@[c]glClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: void*): void;
@[c]glClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void*): void;
@[c]glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint): void;
@[c]glDispatchComputeIndirect(indirect: GLintptr): void;
@[c]glCopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei): void;
@[c]glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint): void;
@[c]glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: GLint64*): void;
@[c]glInvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei): void;
@[c]glInvalidateTexImage(texture: GLuint, level: GLint): void;
@[c]glInvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void;
@[c]glInvalidateBufferData(buffer: GLuint): void;
@[c]glInvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: GLenum*): void;
@[c]glInvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glMultiDrawArraysIndirect(mode: GLenum, indirect: void*, drawcount: GLsizei, stride: GLsizei): void;
@[c]glMultiDrawElementsIndirect(mode: GLenum, type: GLenum, indirect: void*, drawcount: GLsizei, stride: GLsizei): void;
@[c]glGetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: GLchar*): GLuint;
@[c]glGetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: GLsizei*, name: GLchar*): void;
@[c]glGetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, count: GLsizei, length: GLsizei*, params: GLint*): void;
@[c]glGetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: GLchar*): GLint;
@[c]glGetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: GLchar*): GLint;
@[c]glShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint): void;
@[c]glTexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void;
@[c]glTexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glTexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glTextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint): void;
@[c]glBindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void;
@[c]glVertexAttribFormat(attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint): void;
@[c]glVertexAttribIFormat(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint): void;
@[c]glVertexAttribLFormat(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint): void;
@[c]glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint): void;
@[c]glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint): void;
@[c]glDebugMessageControl(source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean): void;
@[c]glDebugMessageInsert(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*): void;
@[c]glDebugMessageCallback(callback: GLDEBUGPROC, userParam: void*): void;
@[c]glGetDebugMessageLog(count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*): GLuint;
@[c]glPushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: GLchar*): void;
@[c]glPopDebugGroup::void;
@[c]glObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: GLchar*): void;
@[c]glGetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*): void;
@[c]glObjectPtrLabel(ptr: void*, length: GLsizei, label: GLchar*): void;
@[c]glGetObjectPtrLabel(ptr: void*, bufSize: GLsizei, length: GLsizei*, label: GLchar*): void;

GL_MAX_VERTEX_ATTRIB_STRIDE: [internal] int32       = 0x82E5;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED: [internal] int32 = 0x8221;
GL_TEXTURE_BUFFER_BINDING: [internal] int32         = 0x8C2A;
GL_MAP_PERSISTENT_BIT: [internal] int32             = 0x0040;
GL_MAP_COHERENT_BIT: [internal] int32               = 0x0080;
GL_DYNAMIC_STORAGE_BIT: [internal] int32            = 0x0100;
GL_CLIENT_STORAGE_BIT: [internal] int32             = 0x0200;
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: [internal] int32 = 0x00004000;
GL_BUFFER_IMMUTABLE_STORAGE: [internal] int32       = 0x821F;
GL_BUFFER_STORAGE_FLAGS: [internal] int32           = 0x8220;
GL_CLEAR_TEXTURE: [internal] int32                  = 0x9365;
GL_LOCATION_COMPONENT: [internal] int32             = 0x934A;
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: [internal] int32 = 0x934B;
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: [internal] int32 = 0x934C;
GL_QUERY_BUFFER: [internal] int32                   = 0x9192;
GL_QUERY_BUFFER_BARRIER_BIT: [internal] int32       = 0x00008000;
GL_QUERY_BUFFER_BINDING: [internal] int32           = 0x9193;
GL_QUERY_RESULT_NO_WAIT: [internal] int32           = 0x9194;
GL_MIRROR_CLAMP_TO_EDGE: [internal] int32           = 0x8743;

def PFNGLBUFFERSTORAGEPROC = (target: GLenum, size: GLsizeiptr, data: void*, flags: GLbitfield)(void)*;
def PFNGLCLEARTEXIMAGEPROC = (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLCLEARTEXSUBIMAGEPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLBINDBUFFERSBASEPROC = (target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*)(void)*;
def PFNGLBINDBUFFERSRANGEPROC = (target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, sizes: GLsizeiptr*)(void)*;
def PFNGLBINDTEXTURESPROC = (first: GLuint, count: GLsizei, textures: GLuint*)(void)*;
def PFNGLBINDSAMPLERSPROC = (first: GLuint, count: GLsizei, samplers: GLuint*)(void)*;
def PFNGLBINDIMAGETEXTURESPROC = (first: GLuint, count: GLsizei, textures: GLuint*)(void)*;
def PFNGLBINDVERTEXBUFFERSPROC = (first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*)(void)*;

@[c]glBufferStorage(target: GLenum, size: GLsizeiptr, data: void*, flags: GLbitfield): void;
@[c]glClearTexImage(texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: void*): void;
@[c]glClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: void*): void;
@[c]glBindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*): void;
@[c]glBindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, sizes: GLsizeiptr*): void;
@[c]glBindTextures(first: GLuint, count: GLsizei, textures: GLuint*): void;
@[c]glBindSamplers(first: GLuint, count: GLsizei, samplers: GLuint*): void;
@[c]glBindImageTextures(first: GLuint, count: GLsizei, textures: GLuint*): void;
@[c]glBindVertexBuffers(first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*): void;

GL_CONTEXT_LOST: [internal] int32                   = 0x0507;
GL_NEGATIVE_ONE_TO_ONE: [internal] int32            = 0x935E;
GL_ZERO_TO_ONE: [internal] int32                    = 0x935F;
GL_CLIP_ORIGIN: [internal] int32                    = 0x935C;
GL_CLIP_DEPTH_MODE: [internal] int32                = 0x935D;
GL_QUERY_WAIT_INVERTED: [internal] int32            = 0x8E17;
GL_QUERY_NO_WAIT_INVERTED: [internal] int32         = 0x8E18;
GL_QUERY_BY_REGION_WAIT_INVERTED: [internal] int32  = 0x8E19;
GL_QUERY_BY_REGION_NO_WAIT_INVERTED: [internal] int32 = 0x8E1A;
GL_MAX_CULL_DISTANCES: [internal] int32             = 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES: [internal] int32 = 0x82FA;
GL_TEXTURE_TARGET: [internal] int32                 = 0x1006;
GL_QUERY_TARGET: [internal] int32                   = 0x82EA;
GL_GUILTY_CONTEXT_RESET: [internal] int32           = 0x8253;
GL_INNOCENT_CONTEXT_RESET: [internal] int32         = 0x8254;
GL_UNKNOWN_CONTEXT_RESET: [internal] int32          = 0x8255;
GL_RESET_NOTIFICATION_STRATEGY: [internal] int32    = 0x8256;
GL_LOSE_CONTEXT_ON_RESET: [internal] int32          = 0x8252;
GL_NO_RESET_NOTIFICATION: [internal] int32          = 0x8261;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT: [internal] int32 = 0x00000004;
GL_CONTEXT_RELEASE_BEHAVIOR: [internal] int32       = 0x82FB;
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: [internal] int32 = 0x82FC;

def PFNGLCLIPCONTROLPROC = (origin: GLenum, depth: GLenum)(void)*;
def PFNGLCREATETRANSFORMFEEDBACKSPROC = (n: GLsizei, ids: GLuint*)(void)*;
def PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = (xfb: GLuint, index: GLuint, buffer: GLuint)(void)*;
def PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLGETTRANSFORMFEEDBACKIVPROC = (xfb: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGETTRANSFORMFEEDBACKI_VPROC = (xfb: GLuint, pname: GLenum, index: GLuint, param: GLint*)(void)*;
def PFNGLGETTRANSFORMFEEDBACKI64_VPROC = (xfb: GLuint, pname: GLenum, index: GLuint, param: GLint64*)(void)*;
def PFNGLCREATEBUFFERSPROC = (n: GLsizei, buffers: GLuint*)(void)*;
def PFNGLNAMEDBUFFERSTORAGEPROC = (buffer: GLuint, size: GLsizeiptr, data: void*, flags: GLbitfield)(void)*;
def PFNGLNAMEDBUFFERDATAPROC = (buffer: GLuint, size: GLsizeiptr, data: void*, usage: GLenum)(void)*;
def PFNGLNAMEDBUFFERSUBDATAPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*)(void)*;
def PFNGLCOPYNAMEDBUFFERSUBDATAPROC = (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLCLEARNAMEDBUFFERDATAPROC = (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLCLEARNAMEDBUFFERSUBDATAPROC = (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLMAPNAMEDBUFFERPROC = (buffer: GLuint, access: GLenum)(void*)*;
def PFNGLMAPNAMEDBUFFERRANGEPROC = (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield)(void*)*;
def PFNGLUNMAPNAMEDBUFFERPROC = (buffer: GLuint)(GLboolean)*;
def PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = (buffer: GLuint, offset: GLintptr, length: GLsizeiptr)(void)*;
def PFNGLGETNAMEDBUFFERPARAMETERIVPROC = (buffer: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = (buffer: GLuint, pname: GLenum, params: GLint64*)(void)*;
def PFNGLGETNAMEDBUFFERPOINTERVPROC = (buffer: GLuint, pname: GLenum, params: void**)(void)*;
def PFNGLGETNAMEDBUFFERSUBDATAPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*)(void)*;
def PFNGLCREATEFRAMEBUFFERSPROC = (n: GLsizei, framebuffers: GLuint*)(void)*;
def PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint)(void)*;
def PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = (framebuffer: GLuint, pname: GLenum, param: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = (framebuffer: GLuint, buf: GLenum)(void)*;
def PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = (framebuffer: GLuint, n: GLsizei, bufs: GLenum*)(void)*;
def PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = (framebuffer: GLuint, src: GLenum)(void)*;
def PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = (framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*)(void)*;
def PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = (framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLint*)(void)*;
def PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLuint*)(void)*;
def PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLfloat*)(void)*;
def PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint)(void)*;
def PFNGLBLITNAMEDFRAMEBUFFERPROC = (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum)(void)*;
def PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = (framebuffer: GLuint, target: GLenum)(GLenum)*;
def PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = (framebuffer: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLCREATERENDERBUFFERSPROC = (n: GLsizei, renderbuffers: GLuint*)(void)*;
def PFNGLNAMEDRENDERBUFFERSTORAGEPROC = (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = (renderbuffer: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLCREATETEXTURESPROC = (target: GLenum, n: GLsizei, textures: GLuint*)(void)*;
def PFNGLTEXTUREBUFFERPROC = (texture: GLuint, internalformat: GLenum, buffer: GLuint)(void)*;
def PFNGLTEXTUREBUFFERRANGEPROC = (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLTEXTURESTORAGE1DPROC = (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei)(void)*;
def PFNGLTEXTURESTORAGE2DPROC = (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXTURESTORAGE3DPROC = (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)(void)*;
def PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLTEXTURESUBIMAGE1DPROC = (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXTURESUBIMAGE2DPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXTURESUBIMAGE3DPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void*)(void)*;
def PFNGLCOPYTEXTURESUBIMAGE1DPROC = (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei)(void)*;
def PFNGLCOPYTEXTURESUBIMAGE2DPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLCOPYTEXTURESUBIMAGE3DPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXTUREPARAMETERFPROC = (texture: GLuint, pname: GLenum, param: GLfloat)(void)*;
def PFNGLTEXTUREPARAMETERFVPROC = (texture: GLuint, pname: GLenum, param: GLfloat*)(void)*;
def PFNGLTEXTUREPARAMETERIPROC = (texture: GLuint, pname: GLenum, param: GLint)(void)*;
def PFNGLTEXTUREPARAMETERIIVPROC = (texture: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLTEXTUREPARAMETERIUIVPROC = (texture: GLuint, pname: GLenum, params: GLuint*)(void)*;
def PFNGLTEXTUREPARAMETERIVPROC = (texture: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGENERATETEXTUREMIPMAPPROC = (texture: GLuint)(void)*;
def PFNGLBINDTEXTUREUNITPROC = (unit: GLuint, texture: GLuint)(void)*;
def PFNGLGETTEXTUREIMAGEPROC = (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*)(void)*;
def PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: void*)(void)*;
def PFNGLGETTEXTURELEVELPARAMETERFVPROC = (texture: GLuint, level: GLint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETTEXTURELEVELPARAMETERIVPROC = (texture: GLuint, level: GLint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETTEXTUREPARAMETERFVPROC = (texture: GLuint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETTEXTUREPARAMETERIIVPROC = (texture: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETTEXTUREPARAMETERIUIVPROC = (texture: GLuint, pname: GLenum, params: GLuint*)(void)*;
def PFNGLGETTEXTUREPARAMETERIVPROC = (texture: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLCREATEVERTEXARRAYSPROC = (n: GLsizei, arrays: GLuint*)(void)*;
def PFNGLDISABLEVERTEXARRAYATTRIBPROC = (vaobj: GLuint, index: GLuint)(void)*;
def PFNGLENABLEVERTEXARRAYATTRIBPROC = (vaobj: GLuint, index: GLuint)(void)*;
def PFNGLVERTEXARRAYELEMENTBUFFERPROC = (vaobj: GLuint, buffer: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXBUFFERPROC = (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei)(void)*;
def PFNGLVERTEXARRAYVERTEXBUFFERSPROC = (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*)(void)*;
def PFNGLVERTEXARRAYATTRIBBINDINGPROC = (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint)(void)*;
def PFNGLVERTEXARRAYATTRIBFORMATPROC = (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXARRAYATTRIBIFORMATPROC = (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXARRAYATTRIBLFORMATPROC = (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXARRAYBINDINGDIVISORPROC = (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint)(void)*;
def PFNGLGETVERTEXARRAYIVPROC = (vaobj: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGETVERTEXARRAYINDEXEDIVPROC = (vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGETVERTEXARRAYINDEXED64IVPROC = (vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint64*)(void)*;
def PFNGLCREATESAMPLERSPROC = (n: GLsizei, samplers: GLuint*)(void)*;
def PFNGLCREATEPROGRAMPIPELINESPROC = (n: GLsizei, pipelines: GLuint*)(void)*;
def PFNGLCREATEQUERIESPROC = (target: GLenum, n: GLsizei, ids: GLuint*)(void)*;
def PFNGLGETQUERYBUFFEROBJECTI64VPROC = (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr)(void)*;
def PFNGLGETQUERYBUFFEROBJECTIVPROC = (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr)(void)*;
def PFNGLGETQUERYBUFFEROBJECTUI64VPROC = (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr)(void)*;
def PFNGLGETQUERYBUFFEROBJECTUIVPROC = (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr)(void)*;
def PFNGLMEMORYBARRIERBYREGIONPROC = (barriers: GLbitfield)(void)*;
def PFNGLGETTEXTURESUBIMAGEPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*)(void)*;
def PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: void*)(void)*;
def PFNGLGETGRAPHICSRESETSTATUSPROC = ()(GLenum)*;
def PFNGLGETNCOMPRESSEDTEXIMAGEPROC = (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: void*)(void)*;
def PFNGLGETNTEXIMAGEPROC = (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*)(void)*;
def PFNGLGETNUNIFORMDVPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*)(void)*;
def PFNGLGETNUNIFORMFVPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*)(void)*;
def PFNGLGETNUNIFORMIVPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*)(void)*;
def PFNGLGETNUNIFORMUIVPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*)(void)*;
def PFNGLREADNPIXELSPROC = (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*)(void)*;
def PFNGLTEXTUREBARRIERPROC = ()(void)*;

@[c]glClipControl(origin: GLenum, depth: GLenum): void;
@[c]glCreateTransformFeedbacks(n: GLsizei, ids: GLuint*): void;
@[c]glTransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint): void;
@[c]glTransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void;
@[c]glGetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint*): void;
@[c]glGetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: GLint64*): void;
@[c]glCreateBuffers(n: GLsizei, buffers: GLuint*): void;
@[c]glNamedBufferStorage(buffer: GLuint, size: GLsizeiptr, data: void*, flags: GLbitfield): void;
@[c]glNamedBufferData(buffer: GLuint, size: GLsizeiptr, data: void*, usage: GLenum): void;
@[c]glNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*): void;
@[c]glCopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;
@[c]glClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void*): void;
@[c]glClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void*): void;
@[c]glMapNamedBuffer(buffer: GLuint, access: GLenum): void*;
@[c]glMapNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;
@[c]glUnmapNamedBuffer(buffer: GLuint): GLboolean;
@[c]glFlushMappedNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void;
@[c]glGetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: GLint64*): void;
@[c]glGetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: void**): void;
@[c]glGetNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*): void;
@[c]glCreateFramebuffers(n: GLsizei, framebuffers: GLuint*): void;
@[c]glNamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void;
@[c]glNamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint): void;
@[c]glNamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void;
@[c]glNamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void;
@[c]glNamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum): void;
@[c]glNamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: GLenum*): void;
@[c]glNamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum): void;
@[c]glInvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*): void;
@[c]glInvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: GLenum*, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLint*): void;
@[c]glClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLuint*): void;
@[c]glClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: GLfloat*): void;
@[c]glClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;
@[c]glBlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;
@[c]glCheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum): GLenum;
@[c]glGetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*): void;
@[c]glCreateRenderbuffers(n: GLsizei, renderbuffers: GLuint*): void;
@[c]glNamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glNamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glGetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: GLint*): void;
@[c]glCreateTextures(target: GLenum, n: GLsizei, textures: GLuint*): void;
@[c]glTextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint): void;
@[c]glTextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void;
@[c]glTextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei): void;
@[c]glTextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glTextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;
@[c]glTextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glTextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glCompressedTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: void*): void;
@[c]glCompressedTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: void*): void;
@[c]glCopyTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void;
@[c]glCopyTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glCopyTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glTextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat): void;
@[c]glTextureParameterfv(texture: GLuint, pname: GLenum, param: GLfloat*): void;
@[c]glTextureParameteri(texture: GLuint, pname: GLenum, param: GLint): void;
@[c]glTextureParameterIiv(texture: GLuint, pname: GLenum, params: GLint*): void;
@[c]glTextureParameterIuiv(texture: GLuint, pname: GLenum, params: GLuint*): void;
@[c]glTextureParameteriv(texture: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGenerateTextureMipmap(texture: GLuint): void;
@[c]glBindTextureUnit(unit: GLuint, texture: GLuint): void;
@[c]glGetTextureImage(texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*): void;
@[c]glGetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: void*): void;
@[c]glGetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: GLfloat*): void;
@[c]glGetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: GLint*): void;
@[c]glGetTextureParameterfv(texture: GLuint, pname: GLenum, params: GLfloat*): void;
@[c]glGetTextureParameterIiv(texture: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: GLuint*): void;
@[c]glGetTextureParameteriv(texture: GLuint, pname: GLenum, params: GLint*): void;
@[c]glCreateVertexArrays(n: GLsizei, arrays: GLuint*): void;
@[c]glDisableVertexArrayAttrib(vaobj: GLuint, index: GLuint): void;
@[c]glEnableVertexArrayAttrib(vaobj: GLuint, index: GLuint): void;
@[c]glVertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint): void;
@[c]glVertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void;
@[c]glVertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: GLuint*, offsets: GLintptr*, strides: GLsizei*): void;
@[c]glVertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void;
@[c]glVertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint): void;
@[c]glVertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint): void;
@[c]glVertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint): void;
@[c]glVertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void;
@[c]glGetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint64*): void;
@[c]glCreateSamplers(n: GLsizei, samplers: GLuint*): void;
@[c]glCreateProgramPipelines(n: GLsizei, pipelines: GLuint*): void;
@[c]glCreateQueries(target: GLenum, n: GLsizei, ids: GLuint*): void;
@[c]glGetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void;
@[c]glGetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void;
@[c]glGetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void;
@[c]glGetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr): void;
@[c]glMemoryBarrierByRegion(barriers: GLbitfield): void;
@[c]glGetTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*): void;
@[c]glGetCompressedTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: void*): void;
@[c]glGetGraphicsResetStatus::GLenum;
@[c]glGetnCompressedTexImage(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: void*): void;
@[c]glGetnTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: void*): void;
@[c]glGetnUniformdv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*): void;
@[c]glGetnUniformfv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*): void;
@[c]glGetnUniformiv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*): void;
@[c]glGetnUniformuiv(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*): void;
@[c]glReadnPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*): void;
@[c]glTextureBarrier::void;

GL_SHADER_BINARY_FORMAT_SPIR_V: [internal] int32    = 0x9551;
GL_SPIR_V_BINARY: [internal] int32                  = 0x9552;
GL_PARAMETER_BUFFER: [internal] int32               = 0x80EE;
GL_PARAMETER_BUFFER_BINDING: [internal] int32       = 0x80EF;
GL_CONTEXT_FLAG_NO_ERROR_BIT: [internal] int32      = 0x00000008;
GL_VERTICES_SUBMITTED: [internal] int32             = 0x82EE;
GL_PRIMITIVES_SUBMITTED: [internal] int32           = 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS: [internal] int32      = 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES: [internal] int32    = 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS: [internal] int32 = 0x82F2;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED: [internal] int32 = 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS: [internal] int32    = 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS: [internal] int32     = 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES: [internal] int32      = 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES: [internal] int32     = 0x82F7;
GL_POLYGON_OFFSET_CLAMP: [internal] int32           = 0x8E1B;
GL_SPIR_V_EXTENSIONS: [internal] int32              = 0x9553;
GL_NUM_SPIR_V_EXTENSIONS: [internal] int32          = 0x9554;
GL_TEXTURE_MAX_ANISOTROPY: [internal] int32         = 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY: [internal] int32     = 0x84FF;
GL_TRANSFORM_FEEDBACK_OVERFLOW: [internal] int32    = 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW: [internal] int32 = 0x82ED;

def PFNGLSPECIALIZESHADERPROC = (shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*)(void)*;
def PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = (mode: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei)(void)*;
def PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = (mode: GLenum, type: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei)(void)*;
def PFNGLPOLYGONOFFSETCLAMPPROC = (factor: GLfloat, units: GLfloat, clamp: GLfloat)(void)*;

@[c]glSpecializeShader(shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*): void;
@[c]glMultiDrawArraysIndirectCount(mode: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void;
@[c]glMultiDrawElementsIndirectCount(mode: GLenum, type: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void;
@[c]glPolygonOffsetClamp(factor: GLfloat, units: GLfloat, clamp: GLfloat): void;

GL_PRIMITIVE_BOUNDING_BOX_ARB: [internal] int32     = 0x92BE;
GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB: [internal] int32 = 0x9381;
GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB: [internal] int32 = 0x9382;

def PFNGLPRIMITIVEBOUNDINGBOXARBPROC = (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat)(void)*;

@[c]glPrimitiveBoundingBoxARB(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat): void;

def GLuint64EXT = khronos_uint64_t;

GL_UNSIGNED_INT64_ARB: [internal] int32             = 0x140F;

def PFNGLGETTEXTUREHANDLEARBPROC = (texture: GLuint)(GLuint64)*;
def PFNGLGETTEXTURESAMPLERHANDLEARBPROC = (texture: GLuint, sampler: GLuint)(GLuint64)*;
def PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = (handle: GLuint64)(void)*;
def PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = (handle: GLuint64)(void)*;
def PFNGLGETIMAGEHANDLEARBPROC = (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum)(GLuint64)*;
def PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = (handle: GLuint64, access: GLenum)(void)*;
def PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = (handle: GLuint64)(void)*;
def PFNGLUNIFORMHANDLEUI64ARBPROC = (location: GLint, value: GLuint64)(void)*;
def PFNGLUNIFORMHANDLEUI64VARBPROC = (location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = (program: GLuint, location: GLint, value: GLuint64)(void)*;
def PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, values: GLuint64*)(void)*;
def PFNGLISTEXTUREHANDLERESIDENTARBPROC = (handle: GLuint64)(GLboolean)*;
def PFNGLISIMAGEHANDLERESIDENTARBPROC = (handle: GLuint64)(GLboolean)*;
def PFNGLVERTEXATTRIBL1UI64ARBPROC = (index: GLuint, x: GLuint64EXT)(void)*;
def PFNGLVERTEXATTRIBL1UI64VARBPROC = (index: GLuint, v: GLuint64EXT*)(void)*;
def PFNGLGETVERTEXATTRIBLUI64VARBPROC = (index: GLuint, pname: GLenum, params: GLuint64EXT*)(void)*;

@[c]glGetTextureHandleARB(texture: GLuint): GLuint64;
@[c]glGetTextureSamplerHandleARB(texture: GLuint, sampler: GLuint): GLuint64;
@[c]glMakeTextureHandleResidentARB(handle: GLuint64): void;
@[c]glMakeTextureHandleNonResidentARB(handle: GLuint64): void;
@[c]glGetImageHandleARB(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64;
@[c]glMakeImageHandleResidentARB(handle: GLuint64, access: GLenum): void;
@[c]glMakeImageHandleNonResidentARB(handle: GLuint64): void;
@[c]glUniformHandleui64ARB(location: GLint, value: GLuint64): void;
@[c]glUniformHandleui64vARB(location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glProgramUniformHandleui64ARB(program: GLuint, location: GLint, value: GLuint64): void;
@[c]glProgramUniformHandleui64vARB(program: GLuint, location: GLint, count: GLsizei, values: GLuint64*): void;
@[c]glIsTextureHandleResidentARB(handle: GLuint64): GLboolean;
@[c]glIsImageHandleResidentARB(handle: GLuint64): GLboolean;
@[c]glVertexAttribL1ui64ARB(index: GLuint, x: GLuint64EXT): void;
@[c]glVertexAttribL1ui64vARB(index: GLuint, v: GLuint64EXT*): void;
@[c]glGetVertexAttribLui64vARB(index: GLuint, pname: GLenum, params: GLuint64EXT*): void;

def _cl_context;
def _cl_event;

GL_SYNC_CL_EVENT_ARB: [internal] int32              = 0x8240;
GL_SYNC_CL_EVENT_COMPLETE_ARB: [internal] int32     = 0x8241;

def PFNGLCREATESYNCFROMCLEVENTARBPROC = (context: _cl_context*, event: _cl_event*, flags: GLbitfield)(GLsync)*;

@[c]glCreateSyncFromCLeventARB(context: _cl_context*, event: _cl_event*, flags: GLbitfield): GLsync;

GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: [internal] int32 = 0x9344;
GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: [internal] int32 = 0x90EB;
GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: [internal] int32 = 0x9345;
GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: [internal] int32 = 0x91BF;

def PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint)(void)*;

@[c]glDispatchComputeGroupSizeARB(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint): void;

def GLDEBUGPROCARB = (source: GLenum,type: GLenum,id: GLuint,severity: GLenum,length: GLsizei,message: GLchar*,userParam: void*)(void)*;

GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB: [internal] int32   = 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: [internal] int32 = 0x8243;
GL_DEBUG_CALLBACK_FUNCTION_ARB: [internal] int32    = 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM_ARB: [internal] int32  = 0x8245;
GL_DEBUG_SOURCE_API_ARB: [internal] int32           = 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: [internal] int32 = 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: [internal] int32 = 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY_ARB: [internal] int32   = 0x8249;
GL_DEBUG_SOURCE_APPLICATION_ARB: [internal] int32   = 0x824A;
GL_DEBUG_SOURCE_OTHER_ARB: [internal] int32         = 0x824B;
GL_DEBUG_TYPE_ERROR_ARB: [internal] int32           = 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: [internal] int32 = 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: [internal] int32 = 0x824E;
GL_DEBUG_TYPE_PORTABILITY_ARB: [internal] int32     = 0x824F;
GL_DEBUG_TYPE_PERFORMANCE_ARB: [internal] int32     = 0x8250;
GL_DEBUG_TYPE_OTHER_ARB: [internal] int32           = 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB: [internal] int32   = 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB: [internal] int32  = 0x9144;
GL_DEBUG_LOGGED_MESSAGES_ARB: [internal] int32      = 0x9145;
GL_DEBUG_SEVERITY_HIGH_ARB: [internal] int32        = 0x9146;
GL_DEBUG_SEVERITY_MEDIUM_ARB: [internal] int32      = 0x9147;
GL_DEBUG_SEVERITY_LOW_ARB: [internal] int32         = 0x9148;

def PFNGLDEBUGMESSAGECONTROLARBPROC = (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean)(void)*;
def PFNGLDEBUGMESSAGEINSERTARBPROC = (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*)(void)*;
def PFNGLDEBUGMESSAGECALLBACKARBPROC = (callback: GLDEBUGPROCARB, userParam: void*)(void)*;
def PFNGLGETDEBUGMESSAGELOGARBPROC = (count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*)(GLuint)*;

@[c]glDebugMessageControlARB(source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: GLuint*, enabled: GLboolean): void;
@[c]glDebugMessageInsertARB(source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: GLchar*): void;
@[c]glDebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: void*): void;
@[c]glGetDebugMessageLogARB(count: GLuint, bufSize: GLsizei, sources: GLenum*, types: GLenum*, ids: GLuint*, severities: GLenum*, lengths: GLsizei*, messageLog: GLchar*): GLuint;

def PFNGLBLENDEQUATIONIARBPROC = (buf: GLuint, mode: GLenum)(void)*;
def PFNGLBLENDEQUATIONSEPARATEIARBPROC = (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)(void)*;
def PFNGLBLENDFUNCIARBPROC = (buf: GLuint, src: GLenum, dst: GLenum)(void)*;
def PFNGLBLENDFUNCSEPARATEIARBPROC = (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum)(void)*;

@[c]glBlendEquationiARB(buf: GLuint, mode: GLenum): void;
@[c]glBlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void;
@[c]glBlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum): void;
@[c]glBlendFuncSeparateiARB(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;

def PFNGLDRAWARRAYSINSTANCEDARBPROC = (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei)(void)*;
def PFNGLDRAWELEMENTSINSTANCEDARBPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, primcount: GLsizei)(void)*;

@[c]glDrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void;
@[c]glDrawElementsInstancedARB(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, primcount: GLsizei): void;

GL_LINES_ADJACENCY_ARB: [internal] int32            = 0x000A;
GL_LINE_STRIP_ADJACENCY_ARB: [internal] int32       = 0x000B;
GL_TRIANGLES_ADJACENCY_ARB: [internal] int32        = 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY_ARB: [internal] int32   = 0x000D;
GL_PROGRAM_POINT_SIZE_ARB: [internal] int32         = 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: [internal] int32 = 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: [internal] int32 = 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: [internal] int32 = 0x8DA8;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: [internal] int32 = 0x8DA9;
GL_GEOMETRY_SHADER_ARB: [internal] int32            = 0x8DD9;
GL_GEOMETRY_VERTICES_OUT_ARB: [internal] int32      = 0x8DDA;
GL_GEOMETRY_INPUT_TYPE_ARB: [internal] int32        = 0x8DDB;
GL_GEOMETRY_OUTPUT_TYPE_ARB: [internal] int32       = 0x8DDC;
GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: [internal] int32 = 0x8DDD;
GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: [internal] int32 = 0x8DDE;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: [internal] int32 = 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB: [internal] int32 = 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: [internal] int32 = 0x8DE1;

def PFNGLPROGRAMPARAMETERIARBPROC = (program: GLuint, pname: GLenum, value: GLint)(void)*;
def PFNGLFRAMEBUFFERTEXTUREARBPROC = (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint)(void)*;
def PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum)(void)*;

@[c]glProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint): void;
@[c]glFramebufferTextureARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint): void;
@[c]glFramebufferTextureLayerARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void;
@[c]glFramebufferTextureFaceARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void;

GL_SHADER_BINARY_FORMAT_SPIR_V_ARB: [internal] int32 = 0x9551;
GL_SPIR_V_BINARY_ARB: [internal] int32              = 0x9552;

def PFNGLSPECIALIZESHADERARBPROC = (shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*)(void)*;

@[c]glSpecializeShaderARB(shader: GLuint, pEntryPoint: GLchar*, numSpecializationConstants: GLuint, pConstantIndex: GLuint*, pConstantValue: GLuint*): void;

GL_INT64_ARB: [internal] int32                      = 0x140E;
GL_INT64_VEC2_ARB: [internal] int32                 = 0x8FE9;
GL_INT64_VEC3_ARB: [internal] int32                 = 0x8FEA;
GL_INT64_VEC4_ARB: [internal] int32                 = 0x8FEB;
GL_UNSIGNED_INT64_VEC2_ARB: [internal] int32        = 0x8FF5;
GL_UNSIGNED_INT64_VEC3_ARB: [internal] int32        = 0x8FF6;
GL_UNSIGNED_INT64_VEC4_ARB: [internal] int32        = 0x8FF7;

def PFNGLUNIFORM1I64ARBPROC = (location: GLint, x: GLint64)(void)*;
def PFNGLUNIFORM2I64ARBPROC = (location: GLint, x: GLint64, y: GLint64)(void)*;
def PFNGLUNIFORM3I64ARBPROC = (location: GLint, x: GLint64, y: GLint64, z: GLint64)(void)*;
def PFNGLUNIFORM4I64ARBPROC = (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64)(void)*;
def PFNGLUNIFORM1I64VARBPROC = (location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLUNIFORM2I64VARBPROC = (location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLUNIFORM3I64VARBPROC = (location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLUNIFORM4I64VARBPROC = (location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLUNIFORM1UI64ARBPROC = (location: GLint, x: GLuint64)(void)*;
def PFNGLUNIFORM2UI64ARBPROC = (location: GLint, x: GLuint64, y: GLuint64)(void)*;
def PFNGLUNIFORM3UI64ARBPROC = (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64)(void)*;
def PFNGLUNIFORM4UI64ARBPROC = (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64)(void)*;
def PFNGLUNIFORM1UI64VARBPROC = (location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLUNIFORM2UI64VARBPROC = (location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLUNIFORM3UI64VARBPROC = (location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLUNIFORM4UI64VARBPROC = (location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLGETUNIFORMI64VARBPROC = (program: GLuint, location: GLint, params: GLint64*)(void)*;
def PFNGLGETUNIFORMUI64VARBPROC = (program: GLuint, location: GLint, params: GLuint64*)(void)*;
def PFNGLGETNUNIFORMI64VARBPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLint64*)(void)*;
def PFNGLGETNUNIFORMUI64VARBPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint64*)(void)*;
def PFNGLPROGRAMUNIFORM1I64ARBPROC = (program: GLuint, location: GLint, x: GLint64)(void)*;
def PFNGLPROGRAMUNIFORM2I64ARBPROC = (program: GLuint, location: GLint, x: GLint64, y: GLint64)(void)*;
def PFNGLPROGRAMUNIFORM3I64ARBPROC = (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64)(void)*;
def PFNGLPROGRAMUNIFORM4I64ARBPROC = (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64)(void)*;
def PFNGLPROGRAMUNIFORM1I64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLPROGRAMUNIFORM2I64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLPROGRAMUNIFORM3I64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLPROGRAMUNIFORM4I64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64*)(void)*;
def PFNGLPROGRAMUNIFORM1UI64ARBPROC = (program: GLuint, location: GLint, x: GLuint64)(void)*;
def PFNGLPROGRAMUNIFORM2UI64ARBPROC = (program: GLuint, location: GLint, x: GLuint64, y: GLuint64)(void)*;
def PFNGLPROGRAMUNIFORM3UI64ARBPROC = (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64)(void)*;
def PFNGLPROGRAMUNIFORM4UI64ARBPROC = (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64)(void)*;
def PFNGLPROGRAMUNIFORM1UI64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLPROGRAMUNIFORM2UI64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLPROGRAMUNIFORM3UI64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLPROGRAMUNIFORM4UI64VARBPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64*)(void)*;

@[c]glUniform1i64ARB(location: GLint, x: GLint64): void;
@[c]glUniform2i64ARB(location: GLint, x: GLint64, y: GLint64): void;
@[c]glUniform3i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64): void;
@[c]glUniform4i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64): void;
@[c]glUniform1i64vARB(location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glUniform2i64vARB(location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glUniform3i64vARB(location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glUniform4i64vARB(location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glUniform1ui64ARB(location: GLint, x: GLuint64): void;
@[c]glUniform2ui64ARB(location: GLint, x: GLuint64, y: GLuint64): void;
@[c]glUniform3ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64): void;
@[c]glUniform4ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64): void;
@[c]glUniform1ui64vARB(location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glUniform2ui64vARB(location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glUniform3ui64vARB(location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glUniform4ui64vARB(location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glGetUniformi64vARB(program: GLuint, location: GLint, params: GLint64*): void;
@[c]glGetUniformui64vARB(program: GLuint, location: GLint, params: GLuint64*): void;
@[c]glGetnUniformi64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint64*): void;
@[c]glGetnUniformui64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint64*): void;
@[c]glProgramUniform1i64ARB(program: GLuint, location: GLint, x: GLint64): void;
@[c]glProgramUniform2i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64): void;
@[c]glProgramUniform3i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64): void;
@[c]glProgramUniform4i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64): void;
@[c]glProgramUniform1i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glProgramUniform2i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glProgramUniform3i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glProgramUniform4i64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLint64*): void;
@[c]glProgramUniform1ui64ARB(program: GLuint, location: GLint, x: GLuint64): void;
@[c]glProgramUniform2ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64): void;
@[c]glProgramUniform3ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64): void;
@[c]glProgramUniform4ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64): void;
@[c]glProgramUniform1ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glProgramUniform2ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glProgramUniform3ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glProgramUniform4ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: GLuint64*): void;

GL_PARAMETER_BUFFER_ARB: [internal] int32           = 0x80EE;
GL_PARAMETER_BUFFER_BINDING_ARB: [internal] int32   = 0x80EF;

def PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = (mode: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei)(void)*;
def PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = (mode: GLenum, type: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei)(void)*;

@[c]glMultiDrawArraysIndirectCountARB(mode: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void;
@[c]glMultiDrawElementsIndirectCountARB(mode: GLenum, type: GLenum, indirect: void*, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void;

GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: [internal] int32 = 0x88FE;

def PFNGLVERTEXATTRIBDIVISORARBPROC = (index: GLuint, divisor: GLuint)(void)*;

@[c]glVertexAttribDivisorARB(index: GLuint, divisor: GLuint): void;

GL_SRGB_DECODE_ARB: [internal] int32                = 0x8299;
GL_VIEW_CLASS_EAC_R11: [internal] int32             = 0x9383;
GL_VIEW_CLASS_EAC_RG11: [internal] int32            = 0x9384;
GL_VIEW_CLASS_ETC2_RGB: [internal] int32            = 0x9385;
GL_VIEW_CLASS_ETC2_RGBA: [internal] int32           = 0x9386;
GL_VIEW_CLASS_ETC2_EAC_RGBA: [internal] int32       = 0x9387;
GL_VIEW_CLASS_ASTC_4x4_RGBA: [internal] int32       = 0x9388;
GL_VIEW_CLASS_ASTC_5x4_RGBA: [internal] int32       = 0x9389;
GL_VIEW_CLASS_ASTC_5x5_RGBA: [internal] int32       = 0x938A;
GL_VIEW_CLASS_ASTC_6x5_RGBA: [internal] int32       = 0x938B;
GL_VIEW_CLASS_ASTC_6x6_RGBA: [internal] int32       = 0x938C;
GL_VIEW_CLASS_ASTC_8x5_RGBA: [internal] int32       = 0x938D;
GL_VIEW_CLASS_ASTC_8x6_RGBA: [internal] int32       = 0x938E;
GL_VIEW_CLASS_ASTC_8x8_RGBA: [internal] int32       = 0x938F;
GL_VIEW_CLASS_ASTC_10x5_RGBA: [internal] int32      = 0x9390;
GL_VIEW_CLASS_ASTC_10x6_RGBA: [internal] int32      = 0x9391;
GL_VIEW_CLASS_ASTC_10x8_RGBA: [internal] int32      = 0x9392;
GL_VIEW_CLASS_ASTC_10x10_RGBA: [internal] int32     = 0x9393;
GL_VIEW_CLASS_ASTC_12x10_RGBA: [internal] int32     = 0x9394;
GL_VIEW_CLASS_ASTC_12x12_RGBA: [internal] int32     = 0x9395;

GL_MAX_SHADER_COMPILER_THREADS_ARB: [internal] int32 = 0x91B0;
GL_COMPLETION_STATUS_ARB: [internal] int32          = 0x91B1;

def PFNGLMAXSHADERCOMPILERTHREADSARBPROC = (count: GLuint)(void)*;

@[c]glMaxShaderCompilerThreadsARB(count: GLuint): void;

GL_VERTICES_SUBMITTED_ARB: [internal] int32         = 0x82EE;
GL_PRIMITIVES_SUBMITTED_ARB: [internal] int32       = 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS_ARB: [internal] int32  = 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES_ARB: [internal] int32 = 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB: [internal] int32 = 0x82F2;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB: [internal] int32 = 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS_ARB: [internal] int32 = 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS_ARB: [internal] int32 = 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES_ARB: [internal] int32  = 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES_ARB: [internal] int32 = 0x82F7;

GL_PIXEL_PACK_BUFFER_ARB: [internal] int32          = 0x88EB;
GL_PIXEL_UNPACK_BUFFER_ARB: [internal] int32        = 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING_ARB: [internal] int32  = 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING_ARB: [internal] int32 = 0x88EF;

GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: [internal] int32 = 0x00000004;
GL_LOSE_CONTEXT_ON_RESET_ARB: [internal] int32      = 0x8252;
GL_GUILTY_CONTEXT_RESET_ARB: [internal] int32       = 0x8253;
GL_INNOCENT_CONTEXT_RESET_ARB: [internal] int32     = 0x8254;
GL_UNKNOWN_CONTEXT_RESET_ARB: [internal] int32      = 0x8255;
GL_RESET_NOTIFICATION_STRATEGY_ARB: [internal] int32 = 0x8256;
GL_NO_RESET_NOTIFICATION_ARB: [internal] int32      = 0x8261;

def PFNGLGETGRAPHICSRESETSTATUSARBPROC = ()(GLenum)*;
def PFNGLGETNTEXIMAGEARBPROC = (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: void*)(void)*;
def PFNGLREADNPIXELSARBPROC = (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*)(void)*;
def PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = (target: GLenum, lod: GLint, bufSize: GLsizei, img: void*)(void)*;
def PFNGLGETNUNIFORMFVARBPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*)(void)*;
def PFNGLGETNUNIFORMIVARBPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*)(void)*;
def PFNGLGETNUNIFORMUIVARBPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*)(void)*;
def PFNGLGETNUNIFORMDVARBPROC = (program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*)(void)*;

@[c]glGetGraphicsResetStatusARB::GLenum;
@[c]glGetnTexImageARB(target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, img: void*): void;
@[c]glReadnPixelsARB(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: void*): void;
@[c]glGetnCompressedTexImageARB(target: GLenum, lod: GLint, bufSize: GLsizei, img: void*): void;
@[c]glGetnUniformfvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLfloat*): void;
@[c]glGetnUniformivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLint*): void;
@[c]glGetnUniformuivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLuint*): void;
@[c]glGetnUniformdvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: GLdouble*): void;

GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB: [internal] int32 = 0x933D;
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB: [internal] int32 = 0x933E;
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB: [internal] int32 = 0x933F;
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB: [internal] int32 = 0x9340;
GL_SAMPLE_LOCATION_ARB: [internal] int32            = 0x8E50;
GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB: [internal] int32 = 0x9341;
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB: [internal] int32 = 0x9342;
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB: [internal] int32 = 0x9343;

def PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = (target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*)(void)*;
def PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = (framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*)(void)*;
def PFNGLEVALUATEDEPTHVALUESARBPROC = ()(void)*;

@[c]glFramebufferSampleLocationsfvARB(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*): void;
@[c]glNamedFramebufferSampleLocationsfvARB(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*): void;
@[c]glEvaluateDepthValuesARB::void;

GL_SAMPLE_SHADING_ARB: [internal] int32             = 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE_ARB: [internal] int32   = 0x8C37;

def PFNGLMINSAMPLESHADINGARBPROC = (value: GLfloat)(void)*;

@[c]glMinSampleShadingARB(value: GLfloat): void;

GL_SHADER_INCLUDE_ARB: [internal] int32             = 0x8DAE;
GL_NAMED_STRING_LENGTH_ARB: [internal] int32        = 0x8DE9;
GL_NAMED_STRING_TYPE_ARB: [internal] int32          = 0x8DEA;

def PFNGLNAMEDSTRINGARBPROC = (type: GLenum, namelen: GLint, name: GLchar*, stringlen: GLint, string: GLchar*)(void)*;
def PFNGLDELETENAMEDSTRINGARBPROC = (namelen: GLint, name: GLchar*)(void)*;
def PFNGLCOMPILESHADERINCLUDEARBPROC = (shader: GLuint, count: GLsizei, path: GLchar**, length: GLint*)(void)*;
def PFNGLISNAMEDSTRINGARBPROC = (namelen: GLint, name: GLchar*)(GLboolean)*;
def PFNGLGETNAMEDSTRINGARBPROC = (namelen: GLint, name: GLchar*, bufSize: GLsizei, stringlen: GLint*, string: GLchar*)(void)*;
def PFNGLGETNAMEDSTRINGIVARBPROC = (namelen: GLint, name: GLchar*, pname: GLenum, params: GLint*)(void)*;

@[c]glNamedStringARB(type: GLenum, namelen: GLint, name: GLchar*, stringlen: GLint, string: GLchar*): void;
@[c]glDeleteNamedStringARB(namelen: GLint, name: GLchar*): void;
@[c]glCompileShaderIncludeARB(shader: GLuint, count: GLsizei, path: GLchar**, length: GLint*): void;
@[c]glIsNamedStringARB(namelen: GLint, name: GLchar*): GLboolean;
@[c]glGetNamedStringARB(namelen: GLint, name: GLchar*, bufSize: GLsizei, stringlen: GLint*, string: GLchar*): void;
@[c]glGetNamedStringivARB(namelen: GLint, name: GLchar*, pname: GLenum, params: GLint*): void;

GL_SPARSE_STORAGE_BIT_ARB: [internal] int32         = 0x0400;
GL_SPARSE_BUFFER_PAGE_SIZE_ARB: [internal] int32    = 0x82F8;

def PFNGLBUFFERPAGECOMMITMENTARBPROC = (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean)(void)*;
def PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean)(void)*;
def PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean)(void)*;

@[c]glBufferPageCommitmentARB(target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void;
@[c]glNamedBufferPageCommitmentEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void;
@[c]glNamedBufferPageCommitmentARB(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean): void;

GL_TEXTURE_SPARSE_ARB: [internal] int32             = 0x91A6;
GL_VIRTUAL_PAGE_SIZE_INDEX_ARB: [internal] int32    = 0x91A7;
GL_NUM_SPARSE_LEVELS_ARB: [internal] int32          = 0x91AA;
GL_NUM_VIRTUAL_PAGE_SIZES_ARB: [internal] int32     = 0x91A8;
GL_VIRTUAL_PAGE_SIZE_X_ARB: [internal] int32        = 0x9195;
GL_VIRTUAL_PAGE_SIZE_Y_ARB: [internal] int32        = 0x9196;
GL_VIRTUAL_PAGE_SIZE_Z_ARB: [internal] int32        = 0x9197;
GL_MAX_SPARSE_TEXTURE_SIZE_ARB: [internal] int32    = 0x9198;
GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB: [internal] int32 = 0x9199;
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: [internal] int32 = 0x919A;
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: [internal] int32 = 0x91A9;

def PFNGLTEXPAGECOMMITMENTARBPROC = (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean)(void)*;

@[c]glTexPageCommitmentARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void;

GL_CLAMP_TO_BORDER_ARB: [internal] int32            = 0x812D;

GL_TEXTURE_BUFFER_ARB: [internal] int32             = 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE_ARB: [internal] int32    = 0x8C2B;
GL_TEXTURE_BINDING_BUFFER_ARB: [internal] int32     = 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: [internal] int32 = 0x8C2D;
GL_TEXTURE_BUFFER_FORMAT_ARB: [internal] int32      = 0x8C2E;

def PFNGLTEXBUFFERARBPROC = (target: GLenum, internalformat: GLenum, buffer: GLuint)(void)*;

@[c]glTexBufferARB(target: GLenum, internalformat: GLenum, buffer: GLuint): void;

GL_COMPRESSED_RGBA_BPTC_UNORM_ARB: [internal] int32 = 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: [internal] int32 = 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: [internal] int32 = 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: [internal] int32 = 0x8E8F;

GL_TEXTURE_CUBE_MAP_ARRAY_ARB: [internal] int32     = 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: [internal] int32 = 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: [internal] int32 = 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY_ARB: [internal] int32     = 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: [internal] int32 = 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: [internal] int32 = 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: [internal] int32 = 0x900F;

GL_TEXTURE_REDUCTION_MODE_ARB: [internal] int32     = 0x9366;
GL_WEIGHTED_AVERAGE_ARB: [internal] int32           = 0x9367;

GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: [internal] int32 = 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: [internal] int32 = 0x8E5F;
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: [internal] int32 = 0x8F9F;

GL_MIRRORED_REPEAT_ARB: [internal] int32            = 0x8370;

GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB: [internal] int32 = 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB: [internal] int32 = 0x82ED;

def PFNGLDEPTHRANGEARRAYDVNVPROC = (first: GLuint, count: GLsizei, v: GLdouble*)(void)*;
def PFNGLDEPTHRANGEINDEXEDDNVPROC = (index: GLuint, n: GLdouble, f: GLdouble)(void)*;

@[c]glDepthRangeArraydvNV(first: GLuint, count: GLsizei, v: GLdouble*): void;
@[c]glDepthRangeIndexeddNV(index: GLuint, n: GLdouble, f: GLdouble): void;

GL_MULTIPLY_KHR: [internal] int32                   = 0x9294;
GL_SCREEN_KHR: [internal] int32                     = 0x9295;
GL_OVERLAY_KHR: [internal] int32                    = 0x9296;
GL_DARKEN_KHR: [internal] int32                     = 0x9297;
GL_LIGHTEN_KHR: [internal] int32                    = 0x9298;
GL_COLORDODGE_KHR: [internal] int32                 = 0x9299;
GL_COLORBURN_KHR: [internal] int32                  = 0x929A;
GL_HARDLIGHT_KHR: [internal] int32                  = 0x929B;
GL_SOFTLIGHT_KHR: [internal] int32                  = 0x929C;
GL_DIFFERENCE_KHR: [internal] int32                 = 0x929E;
GL_EXCLUSION_KHR: [internal] int32                  = 0x92A0;
GL_HSL_HUE_KHR: [internal] int32                    = 0x92AD;
GL_HSL_SATURATION_KHR: [internal] int32             = 0x92AE;
GL_HSL_COLOR_KHR: [internal] int32                  = 0x92AF;
GL_HSL_LUMINOSITY_KHR: [internal] int32             = 0x92B0;

def PFNGLBLENDBARRIERKHRPROC = ()(void)*;

@[c]glBlendBarrierKHR::void;

GL_BLEND_ADVANCED_COHERENT_KHR: [internal] int32    = 0x9285;

GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR: [internal] int32  = 0x00000008;

GL_MAX_SHADER_COMPILER_THREADS_KHR: [internal] int32 = 0x91B0;
GL_COMPLETION_STATUS_KHR: [internal] int32          = 0x91B1;

def PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = (count: GLuint)(void)*;

@[c]glMaxShaderCompilerThreadsKHR(count: GLuint): void;

GL_CONTEXT_ROBUST_ACCESS: [internal] int32          = 0x90F3;

GL_SUBGROUP_SIZE_KHR: [internal] int32              = 0x9532;
GL_SUBGROUP_SUPPORTED_STAGES_KHR: [internal] int32  = 0x9533;
GL_SUBGROUP_SUPPORTED_FEATURES_KHR: [internal] int32 = 0x9534;
GL_SUBGROUP_QUAD_ALL_STAGES_KHR: [internal] int32   = 0x9535;
GL_SUBGROUP_FEATURE_BASIC_BIT_KHR: [internal] int32 = 0x00000001;
GL_SUBGROUP_FEATURE_VOTE_BIT_KHR: [internal] int32  = 0x00000002;
GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR: [internal] int32 = 0x00000004;
GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR: [internal] int32 = 0x00000008;
GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR: [internal] int32 = 0x00000010;
GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR: [internal] int32 = 0x00000020;
GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR: [internal] int32 = 0x00000040;
GL_SUBGROUP_FEATURE_QUAD_BIT_KHR: [internal] int32  = 0x00000080;

GL_COMPRESSED_RGBA_ASTC_4x4_KHR: [internal] int32   = 0x93B0;
GL_COMPRESSED_RGBA_ASTC_5x4_KHR: [internal] int32   = 0x93B1;
GL_COMPRESSED_RGBA_ASTC_5x5_KHR: [internal] int32   = 0x93B2;
GL_COMPRESSED_RGBA_ASTC_6x5_KHR: [internal] int32   = 0x93B3;
GL_COMPRESSED_RGBA_ASTC_6x6_KHR: [internal] int32   = 0x93B4;
GL_COMPRESSED_RGBA_ASTC_8x5_KHR: [internal] int32   = 0x93B5;
GL_COMPRESSED_RGBA_ASTC_8x6_KHR: [internal] int32   = 0x93B6;
GL_COMPRESSED_RGBA_ASTC_8x8_KHR: [internal] int32   = 0x93B7;
GL_COMPRESSED_RGBA_ASTC_10x5_KHR: [internal] int32  = 0x93B8;
GL_COMPRESSED_RGBA_ASTC_10x6_KHR: [internal] int32  = 0x93B9;
GL_COMPRESSED_RGBA_ASTC_10x8_KHR: [internal] int32  = 0x93BA;
GL_COMPRESSED_RGBA_ASTC_10x10_KHR: [internal] int32 = 0x93BB;
GL_COMPRESSED_RGBA_ASTC_12x10_KHR: [internal] int32 = 0x93BC;
GL_COMPRESSED_RGBA_ASTC_12x12_KHR: [internal] int32 = 0x93BD;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: [internal] int32 = 0x93D0;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: [internal] int32 = 0x93D1;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: [internal] int32 = 0x93D2;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: [internal] int32 = 0x93D3;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: [internal] int32 = 0x93D4;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: [internal] int32 = 0x93D5;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: [internal] int32 = 0x93D6;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: [internal] int32 = 0x93D7;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: [internal] int32 = 0x93D8;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: [internal] int32 = 0x93D9;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: [internal] int32 = 0x93DA;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: [internal] int32 = 0x93DB;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: [internal] int32 = 0x93DC;
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: [internal] int32 = 0x93DD;

GL_RENDERBUFFER_STORAGE_SAMPLES_AMD: [internal] int32 = 0x91B2;
GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD: [internal] int32 = 0x91B3;
GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD: [internal] int32 = 0x91B4;
GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD: [internal] int32 = 0x91B5;
GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD: [internal] int32 = 0x91B6;
GL_SUPPORTED_MULTISAMPLE_MODES_AMD: [internal] int32 = 0x91B7;

def PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;

@[c]glRenderbufferStorageMultisampleAdvancedAMD(target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;

GL_COUNTER_TYPE_AMD: [internal] int32               = 0x8BC0;
GL_COUNTER_RANGE_AMD: [internal] int32              = 0x8BC1;
GL_UNSIGNED_INT64_AMD: [internal] int32             = 0x8BC2;
GL_PERCENTAGE_AMD: [internal] int32                 = 0x8BC3;
GL_PERFMON_RESULT_AVAILABLE_AMD: [internal] int32   = 0x8BC4;
GL_PERFMON_RESULT_SIZE_AMD: [internal] int32        = 0x8BC5;
GL_PERFMON_RESULT_AMD: [internal] int32             = 0x8BC6;

def PFNGLGETPERFMONITORGROUPSAMDPROC = (numGroups: GLint*, groupsSize: GLsizei, groups: GLuint*)(void)*;
def PFNGLGETPERFMONITORCOUNTERSAMDPROC = (group: GLuint, numCounters: GLint*, maxActiveCounters: GLint*, counterSize: GLsizei, counters: GLuint*)(void)*;
def PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = (group: GLuint, bufSize: GLsizei, length: GLsizei*, groupString: GLchar*)(void)*;
def PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = (group: GLuint, counter: GLuint, bufSize: GLsizei, length: GLsizei*, counterString: GLchar*)(void)*;
def PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = (group: GLuint, counter: GLuint, pname: GLenum, data: void*)(void)*;
def PFNGLGENPERFMONITORSAMDPROC = (n: GLsizei, monitors: GLuint*)(void)*;
def PFNGLDELETEPERFMONITORSAMDPROC = (n: GLsizei, monitors: GLuint*)(void)*;
def PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: GLuint*)(void)*;
def PFNGLBEGINPERFMONITORAMDPROC = (monitor: GLuint)(void)*;
def PFNGLENDPERFMONITORAMDPROC = (monitor: GLuint)(void)*;
def PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: GLuint*, bytesWritten: GLint*)(void)*;

@[c]glGetPerfMonitorGroupsAMD(numGroups: GLint*, groupsSize: GLsizei, groups: GLuint*): void;
@[c]glGetPerfMonitorCountersAMD(group: GLuint, numCounters: GLint*, maxActiveCounters: GLint*, counterSize: GLsizei, counters: GLuint*): void;
@[c]glGetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, length: GLsizei*, groupString: GLchar*): void;
@[c]glGetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, length: GLsizei*, counterString: GLchar*): void;
@[c]glGetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: void*): void;
@[c]glGenPerfMonitorsAMD(n: GLsizei, monitors: GLuint*): void;
@[c]glDeletePerfMonitorsAMD(n: GLsizei, monitors: GLuint*): void;
@[c]glSelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: GLuint*): void;
@[c]glBeginPerfMonitorAMD(monitor: GLuint): void;
@[c]glEndPerfMonitorAMD(monitor: GLuint): void;
@[c]glGetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: GLuint*, bytesWritten: GLint*): void;

GL_RGB_422_APPLE: [internal] int32                  = 0x8A1F;
GL_UNSIGNED_SHORT_8_8_APPLE: [internal] int32       = 0x85BA;
GL_UNSIGNED_SHORT_8_8_REV_APPLE: [internal] int32   = 0x85BB;
GL_RGB_RAW_422_APPLE: [internal] int32              = 0x8A51;

def GLeglImageOES = void*;

def PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = (target: GLenum, image: GLeglImageOES, attrib_list: GLint*)(void)*;
def PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = (texture: GLuint, image: GLeglImageOES, attrib_list: GLint*)(void)*;

@[c]glEGLImageTargetTexStorageEXT(target: GLenum, image: GLeglImageOES, attrib_list: GLint*): void;
@[c]glEGLImageTargetTextureStorageEXT(texture: GLuint, image: GLeglImageOES, attrib_list: GLint*): void;

GL_PROGRAM_PIPELINE_OBJECT_EXT: [internal] int32    = 0x8A4F;
GL_PROGRAM_OBJECT_EXT: [internal] int32             = 0x8B40;
GL_SHADER_OBJECT_EXT: [internal] int32              = 0x8B48;
GL_BUFFER_OBJECT_EXT: [internal] int32              = 0x9151;
GL_QUERY_OBJECT_EXT: [internal] int32               = 0x9153;
GL_VERTEX_ARRAY_OBJECT_EXT: [internal] int32        = 0x9154;

def PFNGLLABELOBJECTEXTPROC = (type: GLenum, object: GLuint, length: GLsizei, label: GLchar*)(void)*;
def PFNGLGETOBJECTLABELEXTPROC = (type: GLenum, object: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*)(void)*;

@[c]glLabelObjectEXT(type: GLenum, object: GLuint, length: GLsizei, label: GLchar*): void;
@[c]glGetObjectLabelEXT(type: GLenum, object: GLuint, bufSize: GLsizei, length: GLsizei*, label: GLchar*): void;

def PFNGLINSERTEVENTMARKEREXTPROC = (length: GLsizei, marker: GLchar*)(void)*;
def PFNGLPUSHGROUPMARKEREXTPROC = (length: GLsizei, marker: GLchar*)(void)*;
def PFNGLPOPGROUPMARKEREXTPROC = ()(void)*;

@[c]glInsertEventMarkerEXT(length: GLsizei, marker: GLchar*): void;
@[c]glPushGroupMarkerEXT(length: GLsizei, marker: GLchar*): void;
@[c]glPopGroupMarkerEXT::void;

GL_PROGRAM_MATRIX_EXT: [internal] int32             = 0x8E2D;
GL_TRANSPOSE_PROGRAM_MATRIX_EXT: [internal] int32   = 0x8E2E;
GL_PROGRAM_MATRIX_STACK_DEPTH_EXT: [internal] int32 = 0x8E2F;

def PFNGLMATRIXLOADFEXTPROC = (mode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXLOADDEXTPROC = (mode: GLenum, m: GLdouble*)(void)*;
def PFNGLMATRIXMULTFEXTPROC = (mode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXMULTDEXTPROC = (mode: GLenum, m: GLdouble*)(void)*;
def PFNGLMATRIXLOADIDENTITYEXTPROC = (mode: GLenum)(void)*;
def PFNGLMATRIXROTATEFEXTPROC = (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat)(void)*;
def PFNGLMATRIXROTATEDEXTPROC = (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLMATRIXSCALEFEXTPROC = (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat)(void)*;
def PFNGLMATRIXSCALEDEXTPROC = (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLMATRIXTRANSLATEFEXTPROC = (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat)(void)*;
def PFNGLMATRIXTRANSLATEDEXTPROC = (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLMATRIXFRUSTUMEXTPROC = (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble)(void)*;
def PFNGLMATRIXORTHOEXTPROC = (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble)(void)*;
def PFNGLMATRIXPOPEXTPROC = (mode: GLenum)(void)*;
def PFNGLMATRIXPUSHEXTPROC = (mode: GLenum)(void)*;
def PFNGLCLIENTATTRIBDEFAULTEXTPROC = (mask: GLbitfield)(void)*;
def PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = (mask: GLbitfield)(void)*;
def PFNGLTEXTUREPARAMETERFEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat)(void)*;
def PFNGLTEXTUREPARAMETERFVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLTEXTUREPARAMETERIEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLTEXTUREPARAMETERIVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLTEXTUREIMAGE1DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXTUREIMAGE2DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXTURESUBIMAGE1DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXTURESUBIMAGE2DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLCOPYTEXTUREIMAGE1DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint)(void)*;
def PFNGLCOPYTEXTUREIMAGE2DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)(void)*;
def PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei)(void)*;
def PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLGETTEXTUREIMAGEEXTPROC = (texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLGETTEXTUREPARAMETERFVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETTEXTUREPARAMETERIVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLint*)(void)*;
def PFNGLTEXTUREIMAGE3DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLTEXTURESUBIMAGE3DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLBINDMULTITEXTUREEXTPROC = (texunit: GLenum, target: GLenum, texture: GLuint)(void)*;
def PFNGLMULTITEXCOORDPOINTEREXTPROC = (texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: void*)(void)*;
def PFNGLMULTITEXENVFEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat)(void)*;
def PFNGLMULTITEXENVFVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLMULTITEXENVIEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLMULTITEXENVIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLMULTITEXGENDEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble)(void)*;
def PFNGLMULTITEXGENDVEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*)(void)*;
def PFNGLMULTITEXGENFEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat)(void)*;
def PFNGLMULTITEXGENFVEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLMULTITEXGENIEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLMULTITEXGENIVEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETMULTITEXENVFVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETMULTITEXENVIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETMULTITEXGENDVEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*)(void)*;
def PFNGLGETMULTITEXGENFVEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETMULTITEXGENIVEXTPROC = (texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLMULTITEXPARAMETERIEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLMULTITEXPARAMETERIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLMULTITEXPARAMETERFEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat)(void)*;
def PFNGLMULTITEXPARAMETERFVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLMULTITEXIMAGE1DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLMULTITEXIMAGE2DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLMULTITEXSUBIMAGE1DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLMULTITEXSUBIMAGE2DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLCOPYMULTITEXIMAGE1DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint)(void)*;
def PFNGLCOPYMULTITEXIMAGE2DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint)(void)*;
def PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei)(void)*;
def PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLGETMULTITEXIMAGEEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLGETMULTITEXPARAMETERFVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETMULTITEXPARAMETERIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*)(void)*;
def PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLint*)(void)*;
def PFNGLMULTITEXIMAGE3DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLMULTITEXSUBIMAGE3DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*)(void)*;
def PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = (array: GLenum, index: GLuint)(void)*;
def PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = (array: GLenum, index: GLuint)(void)*;
def PFNGLGETFLOATINDEXEDVEXTPROC = (target: GLenum, index: GLuint, data: GLfloat*)(void)*;
def PFNGLGETDOUBLEINDEXEDVEXTPROC = (target: GLenum, index: GLuint, data: GLdouble*)(void)*;
def PFNGLGETPOINTERINDEXEDVEXTPROC = (target: GLenum, index: GLuint, data: void**)(void)*;
def PFNGLENABLEINDEXEDEXTPROC = (target: GLenum, index: GLuint)(void)*;
def PFNGLDISABLEINDEXEDEXTPROC = (target: GLenum, index: GLuint)(void)*;
def PFNGLISENABLEDINDEXEDEXTPROC = (target: GLenum, index: GLuint)(GLboolean)*;
def PFNGLGETINTEGERINDEXEDVEXTPROC = (target: GLenum, index: GLuint, data: GLint*)(void)*;
def PFNGLGETBOOLEANINDEXEDVEXTPROC = (target: GLenum, index: GLuint, data: GLboolean*)(void)*;
def PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = (texture: GLuint, target: GLenum, lod: GLint, img: void*)(void)*;
def PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*)(void)*;
def PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = (texunit: GLenum, target: GLenum, lod: GLint, img: void*)(void)*;
def PFNGLMATRIXLOADTRANSPOSEFEXTPROC = (mode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXLOADTRANSPOSEDEXTPROC = (mode: GLenum, m: GLdouble*)(void)*;
def PFNGLMATRIXMULTTRANSPOSEFEXTPROC = (mode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXMULTTRANSPOSEDEXTPROC = (mode: GLenum, m: GLdouble*)(void)*;
def PFNGLNAMEDBUFFERDATAEXTPROC = (buffer: GLuint, size: GLsizeiptr, data: void*, usage: GLenum)(void)*;
def PFNGLNAMEDBUFFERSUBDATAEXTPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*)(void)*;
def PFNGLMAPNAMEDBUFFEREXTPROC = (buffer: GLuint, access: GLenum)(void*)*;
def PFNGLUNMAPNAMEDBUFFEREXTPROC = (buffer: GLuint)(GLboolean)*;
def PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = (buffer: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = (buffer: GLuint, pname: GLenum, params: void**)(void)*;
def PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*)(void)*;
def PFNGLPROGRAMUNIFORM1FEXTPROC = (program: GLuint, location: GLint, v0: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM2FEXTPROC = (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM3FEXTPROC = (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM4FEXTPROC = (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat)(void)*;
def PFNGLPROGRAMUNIFORM1IEXTPROC = (program: GLuint, location: GLint, v0: GLint)(void)*;
def PFNGLPROGRAMUNIFORM2IEXTPROC = (program: GLuint, location: GLint, v0: GLint, v1: GLint)(void)*;
def PFNGLPROGRAMUNIFORM3IEXTPROC = (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint)(void)*;
def PFNGLPROGRAMUNIFORM4IEXTPROC = (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint)(void)*;
def PFNGLPROGRAMUNIFORM1FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM2FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM3FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM4FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORM1IVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM2IVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM3IVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM4IVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*)(void)*;
def PFNGLTEXTUREBUFFEREXTPROC = (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint)(void)*;
def PFNGLMULTITEXBUFFEREXTPROC = (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint)(void)*;
def PFNGLTEXTUREPARAMETERIIVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLTEXTUREPARAMETERIUIVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*)(void)*;
def PFNGLGETTEXTUREPARAMETERIIVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = (texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*)(void)*;
def PFNGLMULTITEXPARAMETERIIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLMULTITEXPARAMETERIUIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*)(void)*;
def PFNGLGETMULTITEXPARAMETERIIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = (texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM1UIEXTPROC = (program: GLuint, location: GLint, v0: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM2UIEXTPROC = (program: GLuint, location: GLint, v0: GLuint, v1: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM3UIEXTPROC = (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM4UIEXTPROC = (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint)(void)*;
def PFNGLPROGRAMUNIFORM1UIVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM2UIVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM3UIVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLPROGRAMUNIFORM4UIVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLint*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLint*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLuint*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLuint*)(void)*;
def PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLint*)(void)*;
def PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLuint*)(void)*;
def PFNGLENABLECLIENTSTATEIEXTPROC = (array: GLenum, index: GLuint)(void)*;
def PFNGLDISABLECLIENTSTATEIEXTPROC = (array: GLenum, index: GLuint)(void)*;
def PFNGLGETFLOATI_VEXTPROC = (pname: GLenum, index: GLuint, params: GLfloat*)(void)*;
def PFNGLGETDOUBLEI_VEXTPROC = (pname: GLenum, index: GLuint, params: GLdouble*)(void)*;
def PFNGLGETPOINTERI_VEXTPROC = (pname: GLenum, index: GLuint, params: void**)(void)*;
def PFNGLNAMEDPROGRAMSTRINGEXTPROC = (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: void*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLdouble*)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)(void)*;
def PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLfloat*)(void)*;
def PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLdouble*)(void)*;
def PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = (program: GLuint, target: GLenum, index: GLuint, params: GLfloat*)(void)*;
def PFNGLGETNAMEDPROGRAMIVEXTPROC = (program: GLuint, target: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = (program: GLuint, target: GLenum, pname: GLenum, string: void*)(void)*;
def PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = (renderbuffer: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = (framebuffer: GLuint, target: GLenum)(GLenum)*;
def PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint)(void)*;
def PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*)(void)*;
def PFNGLGENERATETEXTUREMIPMAPEXTPROC = (texture: GLuint, target: GLenum)(void)*;
def PFNGLGENERATEMULTITEXMIPMAPEXTPROC = (texunit: GLenum, target: GLenum)(void)*;
def PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = (framebuffer: GLuint, mode: GLenum)(void)*;
def PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = (framebuffer: GLuint, n: GLsizei, bufs: GLenum*)(void)*;
def PFNGLFRAMEBUFFERREADBUFFEREXTPROC = (framebuffer: GLuint, mode: GLenum)(void)*;
def PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = (framebuffer: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum)(void)*;
def PFNGLTEXTURERENDERBUFFEREXTPROC = (texture: GLuint, target: GLenum, renderbuffer: GLuint)(void)*;
def PFNGLMULTITEXRENDERBUFFEREXTPROC = (texunit: GLenum, target: GLenum, renderbuffer: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLENABLEVERTEXARRAYEXTPROC = (vaobj: GLuint, array: GLenum)(void)*;
def PFNGLDISABLEVERTEXARRAYEXTPROC = (vaobj: GLuint, array: GLenum)(void)*;
def PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = (vaobj: GLuint, index: GLuint)(void)*;
def PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = (vaobj: GLuint, index: GLuint)(void)*;
def PFNGLGETVERTEXARRAYINTEGERVEXTPROC = (vaobj: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGETVERTEXARRAYPOINTERVEXTPROC = (vaobj: GLuint, pname: GLenum, param: void**)(void)*;
def PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = (vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*)(void)*;
def PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = (vaobj: GLuint, index: GLuint, pname: GLenum, param: void**)(void)*;
def PFNGLMAPNAMEDBUFFERRANGEEXTPROC = (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield)(void*)*;
def PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = (buffer: GLuint, offset: GLintptr, length: GLsizeiptr)(void)*;
def PFNGLNAMEDBUFFERSTORAGEEXTPROC = (buffer: GLuint, size: GLsizeiptr, data: void*, flags: GLbitfield)(void)*;
def PFNGLCLEARNAMEDBUFFERDATAEXTPROC = (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void*)(void)*;
def PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = (framebuffer: GLuint, pname: GLenum, param: GLint)(void)*;
def PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = (framebuffer: GLuint, pname: GLenum, params: GLint*)(void)*;
def PFNGLPROGRAMUNIFORM1DEXTPROC = (program: GLuint, location: GLint, x: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM2DEXTPROC = (program: GLuint, location: GLint, x: GLdouble, y: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM3DEXTPROC = (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM4DEXTPROC = (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble)(void)*;
def PFNGLPROGRAMUNIFORM1DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM2DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM3DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORM4DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*)(void)*;
def PFNGLTEXTUREBUFFERRANGEEXTPROC = (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr)(void)*;
def PFNGLTEXTURESTORAGE1DEXTPROC = (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei)(void)*;
def PFNGLTEXTURESTORAGE2DEXTPROC = (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXTURESTORAGE3DEXTPROC = (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)(void)*;
def PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean)(void)*;
def PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr)(void)*;
def PFNGLTEXTUREPAGECOMMITMENTEXTPROC = (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean)(void)*;
def PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = (vaobj: GLuint, index: GLuint, divisor: GLuint)(void)*;

@[c]glMatrixLoadfEXT(mode: GLenum, m: GLfloat*): void;
@[c]glMatrixLoaddEXT(mode: GLenum, m: GLdouble*): void;
@[c]glMatrixMultfEXT(mode: GLenum, m: GLfloat*): void;
@[c]glMatrixMultdEXT(mode: GLenum, m: GLdouble*): void;
@[c]glMatrixLoadIdentityEXT(mode: GLenum): void;
@[c]glMatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat): void;
@[c]glMatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glMatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void;
@[c]glMatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glMatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat): void;
@[c]glMatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glMatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void;
@[c]glMatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble): void;
@[c]glMatrixPopEXT(mode: GLenum): void;
@[c]glMatrixPushEXT(mode: GLenum): void;
@[c]glClientAttribDefaultEXT(mask: GLbitfield): void;
@[c]glPushClientAttribDefaultEXT(mask: GLbitfield): void;
@[c]glTextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat): void;
@[c]glTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glTextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint): void;
@[c]glTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glCopyTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void;
@[c]glCopyTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;
@[c]glCopyTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void;
@[c]glCopyTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glGetTextureImageEXT(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glGetTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glGetTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetTextureLevelParameterfvEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*): void;
@[c]glGetTextureLevelParameterivEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: GLint*): void;
@[c]glTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glCopyTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glBindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint): void;
@[c]glMultiTexCoordPointerEXT(texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, pointer: void*): void;
@[c]glMultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat): void;
@[c]glMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glMultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint): void;
@[c]glMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glMultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble): void;
@[c]glMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*): void;
@[c]glMultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat): void;
@[c]glMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glMultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint): void;
@[c]glMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glGetMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLdouble*): void;
@[c]glGetMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glGetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: GLint*): void;
@[c]glMultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint): void;
@[c]glMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glMultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat): void;
@[c]glMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glCopyMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint): void;
@[c]glCopyMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;
@[c]glCopyMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei): void;
@[c]glCopyMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glGetMultiTexImageEXT(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glGetMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLfloat*): void;
@[c]glGetMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetMultiTexLevelParameterfvEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLfloat*): void;
@[c]glGetMultiTexLevelParameterivEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: GLint*): void;
@[c]glMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: void*): void;
@[c]glCopyMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glEnableClientStateIndexedEXT(array: GLenum, index: GLuint): void;
@[c]glDisableClientStateIndexedEXT(array: GLenum, index: GLuint): void;
@[c]glGetFloatIndexedvEXT(target: GLenum, index: GLuint, data: GLfloat*): void;
@[c]glGetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: GLdouble*): void;
@[c]glGetPointerIndexedvEXT(target: GLenum, index: GLuint, data: void**): void;
@[c]glEnableIndexedEXT(target: GLenum, index: GLuint): void;
@[c]glDisableIndexedEXT(target: GLenum, index: GLuint): void;
@[c]glIsEnabledIndexedEXT(target: GLenum, index: GLuint): GLboolean;
@[c]glGetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: GLint*): void;
@[c]glGetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: GLboolean*): void;
@[c]glCompressedTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*): void;
@[c]glGetCompressedTextureImageEXT(texture: GLuint, target: GLenum, lod: GLint, img: void*): void;
@[c]glCompressedMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*): void;
@[c]glCompressedMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: void*): void;
@[c]glGetCompressedMultiTexImageEXT(texunit: GLenum, target: GLenum, lod: GLint, img: void*): void;
@[c]glMatrixLoadTransposefEXT(mode: GLenum, m: GLfloat*): void;
@[c]glMatrixLoadTransposedEXT(mode: GLenum, m: GLdouble*): void;
@[c]glMatrixMultTransposefEXT(mode: GLenum, m: GLfloat*): void;
@[c]glMatrixMultTransposedEXT(mode: GLenum, m: GLdouble*): void;
@[c]glNamedBufferDataEXT(buffer: GLuint, size: GLsizeiptr, data: void*, usage: GLenum): void;
@[c]glNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*): void;
@[c]glMapNamedBufferEXT(buffer: GLuint, access: GLenum): void*;
@[c]glUnmapNamedBufferEXT(buffer: GLuint): GLboolean;
@[c]glGetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: GLint*): void;
@[c]glGetNamedBufferPointervEXT(buffer: GLuint, pname: GLenum, params: void**): void;
@[c]glGetNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: void*): void;
@[c]glProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat): void;
@[c]glProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat): void;
@[c]glProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat): void;
@[c]glProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat): void;
@[c]glProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint): void;
@[c]glProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint): void;
@[c]glProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint): void;
@[c]glProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint): void;
@[c]glProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLfloat*): void;
@[c]glProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLint*): void;
@[c]glProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLfloat*): void;
@[c]glTextureBufferEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint): void;
@[c]glMultiTexBufferEXT(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint): void;
@[c]glTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*): void;
@[c]glGetTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: GLuint*): void;
@[c]glMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*): void;
@[c]glGetMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: GLuint*): void;
@[c]glProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint): void;
@[c]glProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint): void;
@[c]glProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint): void;
@[c]glProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;
@[c]glProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: GLuint*): void;
@[c]glNamedProgramLocalParameters4fvEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLfloat*): void;
@[c]glNamedProgramLocalParameterI4iEXT(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;
@[c]glNamedProgramLocalParameterI4ivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLint*): void;
@[c]glNamedProgramLocalParametersI4ivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLint*): void;
@[c]glNamedProgramLocalParameterI4uiEXT(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;
@[c]glNamedProgramLocalParameterI4uivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLuint*): void;
@[c]glNamedProgramLocalParametersI4uivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: GLuint*): void;
@[c]glGetNamedProgramLocalParameterIivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLint*): void;
@[c]glGetNamedProgramLocalParameterIuivEXT(program: GLuint, target: GLenum, index: GLuint, params: GLuint*): void;
@[c]glEnableClientStateiEXT(array: GLenum, index: GLuint): void;
@[c]glDisableClientStateiEXT(array: GLenum, index: GLuint): void;
@[c]glGetFloati_vEXT(pname: GLenum, index: GLuint, params: GLfloat*): void;
@[c]glGetDoublei_vEXT(pname: GLenum, index: GLuint, params: GLdouble*): void;
@[c]glGetPointeri_vEXT(pname: GLenum, index: GLuint, params: void**): void;
@[c]glNamedProgramStringEXT(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: void*): void;
@[c]glNamedProgramLocalParameter4dEXT(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void;
@[c]glNamedProgramLocalParameter4dvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLdouble*): void;
@[c]glNamedProgramLocalParameter4fEXT(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;
@[c]glNamedProgramLocalParameter4fvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLfloat*): void;
@[c]glGetNamedProgramLocalParameterdvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLdouble*): void;
@[c]glGetNamedProgramLocalParameterfvEXT(program: GLuint, target: GLenum, index: GLuint, params: GLfloat*): void;
@[c]glGetNamedProgramivEXT(program: GLuint, target: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGetNamedProgramStringEXT(program: GLuint, target: GLenum, pname: GLenum, string: void*): void;
@[c]glNamedRenderbufferStorageEXT(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glGetNamedRenderbufferParameterivEXT(renderbuffer: GLuint, pname: GLenum, params: GLint*): void;
@[c]glNamedRenderbufferStorageMultisampleEXT(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glCheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum): GLenum;
@[c]glNamedFramebufferTexture1DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void;
@[c]glNamedFramebufferTexture2DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint): void;
@[c]glNamedFramebufferTexture3DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint): void;
@[c]glNamedFramebufferRenderbufferEXT(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint): void;
@[c]glGetNamedFramebufferAttachmentParameterivEXT(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: GLint*): void;
@[c]glGenerateTextureMipmapEXT(texture: GLuint, target: GLenum): void;
@[c]glGenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum): void;
@[c]glFramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum): void;
@[c]glFramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: GLenum*): void;
@[c]glFramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum): void;
@[c]glGetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: GLint*): void;
@[c]glNamedCopyBufferSubDataEXT(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;
@[c]glNamedFramebufferTextureEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint): void;
@[c]glNamedFramebufferTextureLayerEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint): void;
@[c]glNamedFramebufferTextureFaceEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum): void;
@[c]glTextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint): void;
@[c]glMultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint): void;
@[c]glVertexArrayVertexOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayEdgeFlagOffsetEXT(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayIndexOffsetEXT(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayNormalOffsetEXT(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayMultiTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayFogCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArraySecondaryColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayVertexAttribOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;
@[c]glVertexArrayVertexAttribIOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glEnableVertexArrayEXT(vaobj: GLuint, array: GLenum): void;
@[c]glDisableVertexArrayEXT(vaobj: GLuint, array: GLenum): void;
@[c]glEnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint): void;
@[c]glDisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint): void;
@[c]glGetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGetVertexArrayPointervEXT(vaobj: GLuint, pname: GLenum, param: void**): void;
@[c]glGetVertexArrayIntegeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: GLint*): void;
@[c]glGetVertexArrayPointeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: void**): void;
@[c]glMapNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): void*;
@[c]glFlushMappedNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr): void;
@[c]glNamedBufferStorageEXT(buffer: GLuint, size: GLsizeiptr, data: void*, flags: GLbitfield): void;
@[c]glClearNamedBufferDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: void*): void;
@[c]glClearNamedBufferSubDataEXT(buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: void*): void;
@[c]glNamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint): void;
@[c]glGetNamedFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: GLint*): void;
@[c]glProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble): void;
@[c]glProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble): void;
@[c]glProgramUniform3dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble): void;
@[c]glProgramUniform4dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble): void;
@[c]glProgramUniform1dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform2dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform3dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniform4dvEXT(program: GLuint, location: GLint, count: GLsizei, value: GLdouble*): void;
@[c]glProgramUniformMatrix2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix2x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix2x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix3x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix3x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix4x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glProgramUniformMatrix4x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: GLdouble*): void;
@[c]glTextureBufferRangeEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr): void;
@[c]glTextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void;
@[c]glTextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glTextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;
@[c]glTextureStorage2DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glTextureStorage3DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean): void;
@[c]glVertexArrayBindVertexBufferEXT(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei): void;
@[c]glVertexArrayVertexAttribFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint): void;
@[c]glVertexArrayVertexAttribIFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint): void;
@[c]glVertexArrayVertexAttribLFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint): void;
@[c]glVertexArrayVertexAttribBindingEXT(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint): void;
@[c]glVertexArrayVertexBindingDivisorEXT(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint): void;
@[c]glVertexArrayVertexAttribLOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
@[c]glTexturePageCommitmentEXT(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean): void;
@[c]glVertexArrayVertexAttribDivisorEXT(vaobj: GLuint, index: GLuint, divisor: GLuint): void;

def PFNGLDRAWARRAYSINSTANCEDEXTPROC = (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei)(void)*;
def PFNGLDRAWELEMENTSINSTANCEDEXTPROC = (mode: GLenum, count: GLsizei, type: GLenum, indices: void*, primcount: GLsizei)(void)*;

@[c]glDrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei): void;
@[c]glDrawElementsInstancedEXT(mode: GLenum, count: GLsizei, type: GLenum, indices: void*, primcount: GLsizei): void;

GL_POLYGON_OFFSET_CLAMP_EXT: [internal] int32       = 0x8E1B;

def PFNGLPOLYGONOFFSETCLAMPEXTPROC = (factor: GLfloat, units: GLfloat, clamp: GLfloat)(void)*;

@[c]glPolygonOffsetClampEXT(factor: GLfloat, units: GLfloat, clamp: GLfloat): void;

GL_RASTER_MULTISAMPLE_EXT: [internal] int32         = 0x9327;
GL_RASTER_SAMPLES_EXT: [internal] int32             = 0x9328;
GL_MAX_RASTER_SAMPLES_EXT: [internal] int32         = 0x9329;
GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT: [internal] int32 = 0x932A;
GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT: [internal] int32 = 0x932B;
GL_EFFECTIVE_RASTER_SAMPLES_EXT: [internal] int32   = 0x932C;

def PFNGLRASTERSAMPLESEXTPROC = (samples: GLuint, fixedsamplelocations: GLboolean)(void)*;

@[c]glRasterSamplesEXT(samples: GLuint, fixedsamplelocations: GLboolean): void;

GL_ACTIVE_PROGRAM_EXT: [internal] int32             = 0x8B8D;

def PFNGLUSESHADERPROGRAMEXTPROC = (type: GLenum, program: GLuint)(void)*;
def PFNGLACTIVEPROGRAMEXTPROC = (program: GLuint)(void)*;
def PFNGLCREATESHADERPROGRAMEXTPROC = (type: GLenum, string: GLchar*)(GLuint)*;

@[c]glUseShaderProgramEXT(type: GLenum, program: GLuint): void;
@[c]glActiveProgramEXT(program: GLuint): void;
@[c]glCreateShaderProgramEXT(type: GLenum, string: GLchar*): GLuint;

GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: [internal] int32 = 0x8A52;

def PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ()(void)*;

@[c]glFramebufferFetchBarrierEXT::void;

GL_COMPRESSED_RGB_S3TC_DXT1_EXT: [internal] int32   = 0x83F0;
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: [internal] int32  = 0x83F1;
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: [internal] int32  = 0x83F2;
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: [internal] int32  = 0x83F3;

GL_TEXTURE_REDUCTION_MODE_EXT: [internal] int32     = 0x9366;
GL_WEIGHTED_AVERAGE_EXT: [internal] int32           = 0x9367;

GL_SR8_EXT: [internal] int32                        = 0x8FBD;

GL_SRG8_EXT: [internal] int32                       = 0x8FBE;

GL_TEXTURE_SRGB_DECODE_EXT: [internal] int32        = 0x8A48;
GL_DECODE_EXT: [internal] int32                     = 0x8A49;
GL_SKIP_DECODE_EXT: [internal] int32                = 0x8A4A;

GL_TEXTURE_IMMUTABLE_FORMAT_EXT: [internal] int32   = 0x912F;
GL_ALPHA8_EXT: [internal] int32                     = 0x803C;
GL_LUMINANCE8_EXT: [internal] int32                 = 0x8040;
GL_LUMINANCE8_ALPHA8_EXT: [internal] int32          = 0x8045;
GL_RGBA32F_EXT: [internal] int32                    = 0x8814;
GL_RGB32F_EXT: [internal] int32                     = 0x8815;
GL_ALPHA32F_EXT: [internal] int32                   = 0x8816;
GL_LUMINANCE32F_EXT: [internal] int32               = 0x8818;
GL_LUMINANCE_ALPHA32F_EXT: [internal] int32         = 0x8819;
GL_RGBA16F_EXT: [internal] int32                    = 0x881A;
GL_RGB16F_EXT: [internal] int32                     = 0x881B;
GL_ALPHA16F_EXT: [internal] int32                   = 0x881C;
GL_LUMINANCE16F_EXT: [internal] int32               = 0x881E;
GL_LUMINANCE_ALPHA16F_EXT: [internal] int32         = 0x881F;
GL_RGB10_A2_EXT: [internal] int32                   = 0x8059;
GL_RGB10_EXT: [internal] int32                      = 0x8052;
GL_BGRA8_EXT: [internal] int32                      = 0x93A1;
GL_R8_EXT: [internal] int32                         = 0x8229;
GL_RG8_EXT: [internal] int32                        = 0x822B;
GL_R32F_EXT: [internal] int32                       = 0x822E;
GL_RG32F_EXT: [internal] int32                      = 0x8230;
GL_R16F_EXT: [internal] int32                       = 0x822D;
GL_RG16F_EXT: [internal] int32                      = 0x822F;

def PFNGLTEXSTORAGE1DEXTPROC = (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei)(void)*;
def PFNGLTEXSTORAGE2DEXTPROC = (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;
def PFNGLTEXSTORAGE3DEXTPROC = (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei)(void)*;

@[c]glTexStorage1DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei): void;
@[c]glTexStorage2DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
@[c]glTexStorage3DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;

GL_INCLUSIVE_EXT: [internal] int32                  = 0x8F10;
GL_EXCLUSIVE_EXT: [internal] int32                  = 0x8F11;
GL_WINDOW_RECTANGLE_EXT: [internal] int32           = 0x8F12;
GL_WINDOW_RECTANGLE_MODE_EXT: [internal] int32      = 0x8F13;
GL_MAX_WINDOW_RECTANGLES_EXT: [internal] int32      = 0x8F14;
GL_NUM_WINDOW_RECTANGLES_EXT: [internal] int32      = 0x8F15;

def PFNGLWINDOWRECTANGLESEXTPROC = (mode: GLenum, count: GLsizei, box: GLint*)(void)*;

@[c]glWindowRectanglesEXT(mode: GLenum, count: GLsizei, box: GLint*): void;

GL_BLACKHOLE_RENDER_INTEL: [internal] int32         = 0x83FC;

GL_CONSERVATIVE_RASTERIZATION_INTEL: [internal] int32 = 0x83FE;

def PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ()(void)*;

@[c]glApplyFramebufferAttachmentCMAAINTEL::void;

GL_PERFQUERY_SINGLE_CONTEXT_INTEL: [internal] int32 = 0x00000000;
GL_PERFQUERY_GLOBAL_CONTEXT_INTEL: [internal] int32 = 0x00000001;
GL_PERFQUERY_WAIT_INTEL: [internal] int32           = 0x83FB;
GL_PERFQUERY_FLUSH_INTEL: [internal] int32          = 0x83FA;
GL_PERFQUERY_DONOT_FLUSH_INTEL: [internal] int32    = 0x83F9;
GL_PERFQUERY_COUNTER_EVENT_INTEL: [internal] int32  = 0x94F0;
GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL: [internal] int32 = 0x94F1;
GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL: [internal] int32 = 0x94F2;
GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL: [internal] int32 = 0x94F3;
GL_PERFQUERY_COUNTER_RAW_INTEL: [internal] int32    = 0x94F4;
GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL: [internal] int32 = 0x94F5;
GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL: [internal] int32 = 0x94F8;
GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL: [internal] int32 = 0x94F9;
GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL: [internal] int32 = 0x94FA;
GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: [internal] int32 = 0x94FB;
GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL: [internal] int32 = 0x94FC;
GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: [internal] int32 = 0x94FD;
GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: [internal] int32 = 0x94FE;
GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: [internal] int32 = 0x94FF;
GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: [internal] int32 = 0x9500;

def PFNGLBEGINPERFQUERYINTELPROC = (queryHandle: GLuint)(void)*;
def PFNGLCREATEPERFQUERYINTELPROC = (queryId: GLuint, queryHandle: GLuint*)(void)*;
def PFNGLDELETEPERFQUERYINTELPROC = (queryHandle: GLuint)(void)*;
def PFNGLENDPERFQUERYINTELPROC = (queryHandle: GLuint)(void)*;
def PFNGLGETFIRSTPERFQUERYIDINTELPROC = (queryId: GLuint*)(void)*;
def PFNGLGETNEXTPERFQUERYIDINTELPROC = (queryId: GLuint, nextQueryId: GLuint*)(void)*;
def PFNGLGETPERFCOUNTERINFOINTELPROC = (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: GLchar*, counterDescLength: GLuint, counterDesc: GLchar*, counterOffset: GLuint*, counterDataSize: GLuint*, counterTypeEnum: GLuint*, counterDataTypeEnum: GLuint*, rawCounterMaxValue: GLuint64*)(void)*;
def PFNGLGETPERFQUERYDATAINTELPROC = (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: void*, bytesWritten: GLuint*)(void)*;
def PFNGLGETPERFQUERYIDBYNAMEINTELPROC = (queryName: GLchar*, queryId: GLuint*)(void)*;
def PFNGLGETPERFQUERYINFOINTELPROC = (queryId: GLuint, queryNameLength: GLuint, queryName: GLchar*, dataSize: GLuint*, noCounters: GLuint*, noInstances: GLuint*, capsMask: GLuint*)(void)*;

@[c]glBeginPerfQueryINTEL(queryHandle: GLuint): void;
@[c]glCreatePerfQueryINTEL(queryId: GLuint, queryHandle: GLuint*): void;
@[c]glDeletePerfQueryINTEL(queryHandle: GLuint): void;
@[c]glEndPerfQueryINTEL(queryHandle: GLuint): void;
@[c]glGetFirstPerfQueryIdINTEL(queryId: GLuint*): void;
@[c]glGetNextPerfQueryIdINTEL(queryId: GLuint, nextQueryId: GLuint*): void;
@[c]glGetPerfCounterInfoINTEL(queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: GLchar*, counterDescLength: GLuint, counterDesc: GLchar*, counterOffset: GLuint*, counterDataSize: GLuint*, counterTypeEnum: GLuint*, counterDataTypeEnum: GLuint*, rawCounterMaxValue: GLuint64*): void;
@[c]glGetPerfQueryDataINTEL(queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: void*, bytesWritten: GLuint*): void;
@[c]glGetPerfQueryIdByNameINTEL(queryName: GLchar*, queryId: GLuint*): void;
@[c]glGetPerfQueryInfoINTEL(queryId: GLuint, queryNameLength: GLuint, queryName: GLchar*, dataSize: GLuint*, noCounters: GLuint*, noInstances: GLuint*, capsMask: GLuint*): void;

GL_FRAMEBUFFER_FLIP_X_MESA: [internal] int32        = 0x8BBC;

GL_FRAMEBUFFER_FLIP_Y_MESA: [internal] int32        = 0x8BBB;

def PFNGLFRAMEBUFFERPARAMETERIMESAPROC = (target: GLenum, pname: GLenum, param: GLint)(void)*;
def PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = (target: GLenum, pname: GLenum, params: GLint*)(void)*;

@[c]glFramebufferParameteriMESA(target: GLenum, pname: GLenum, param: GLint): void;
@[c]glGetFramebufferParameterivMESA(target: GLenum, pname: GLenum, params: GLint*): void;

GL_FRAMEBUFFER_SWAP_XY_MESA: [internal] int32       = 0x8BBD;

def PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = (mode: GLenum, indirect: void*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint)(void)*;
def PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = (mode: GLenum, type: GLenum, indirect: void*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint)(void)*;

@[c]glMultiDrawArraysIndirectBindlessNV(mode: GLenum, indirect: void*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void;
@[c]glMultiDrawElementsIndirectBindlessNV(mode: GLenum, type: GLenum, indirect: void*, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void;

def PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = (mode: GLenum, indirect: void*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint)(void)*;
def PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = (mode: GLenum, type: GLenum, indirect: void*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint)(void)*;

@[c]glMultiDrawArraysIndirectBindlessCountNV(mode: GLenum, indirect: void*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void;
@[c]glMultiDrawElementsIndirectBindlessCountNV(mode: GLenum, type: GLenum, indirect: void*, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint): void;

def PFNGLGETTEXTUREHANDLENVPROC = (texture: GLuint)(GLuint64)*;
def PFNGLGETTEXTURESAMPLERHANDLENVPROC = (texture: GLuint, sampler: GLuint)(GLuint64)*;
def PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = (handle: GLuint64)(void)*;
def PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = (handle: GLuint64)(void)*;
def PFNGLGETIMAGEHANDLENVPROC = (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum)(GLuint64)*;
def PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = (handle: GLuint64, access: GLenum)(void)*;
def PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = (handle: GLuint64)(void)*;
def PFNGLUNIFORMHANDLEUI64NVPROC = (location: GLint, value: GLuint64)(void)*;
def PFNGLUNIFORMHANDLEUI64VNVPROC = (location: GLint, count: GLsizei, value: GLuint64*)(void)*;
def PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = (program: GLuint, location: GLint, value: GLuint64)(void)*;
def PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, values: GLuint64*)(void)*;
def PFNGLISTEXTUREHANDLERESIDENTNVPROC = (handle: GLuint64)(GLboolean)*;
def PFNGLISIMAGEHANDLERESIDENTNVPROC = (handle: GLuint64)(GLboolean)*;

@[c]glGetTextureHandleNV(texture: GLuint): GLuint64;
@[c]glGetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint): GLuint64;
@[c]glMakeTextureHandleResidentNV(handle: GLuint64): void;
@[c]glMakeTextureHandleNonResidentNV(handle: GLuint64): void;
@[c]glGetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64;
@[c]glMakeImageHandleResidentNV(handle: GLuint64, access: GLenum): void;
@[c]glMakeImageHandleNonResidentNV(handle: GLuint64): void;
@[c]glUniformHandleui64NV(location: GLint, value: GLuint64): void;
@[c]glUniformHandleui64vNV(location: GLint, count: GLsizei, value: GLuint64*): void;
@[c]glProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64): void;
@[c]glProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: GLuint64*): void;
@[c]glIsTextureHandleResidentNV(handle: GLuint64): GLboolean;
@[c]glIsImageHandleResidentNV(handle: GLuint64): GLboolean;

GL_BLEND_OVERLAP_NV: [internal] int32               = 0x9281;
GL_BLEND_PREMULTIPLIED_SRC_NV: [internal] int32     = 0x9280;
GL_BLUE_NV: [internal] int32                        = 0x1905;
GL_COLORBURN_NV: [internal] int32                   = 0x929A;
GL_COLORDODGE_NV: [internal] int32                  = 0x9299;
GL_CONJOINT_NV: [internal] int32                    = 0x9284;
GL_CONTRAST_NV: [internal] int32                    = 0x92A1;
GL_DARKEN_NV: [internal] int32                      = 0x9297;
GL_DIFFERENCE_NV: [internal] int32                  = 0x929E;
GL_DISJOINT_NV: [internal] int32                    = 0x9283;
GL_DST_ATOP_NV: [internal] int32                    = 0x928F;
GL_DST_IN_NV: [internal] int32                      = 0x928B;
GL_DST_NV: [internal] int32                         = 0x9287;
GL_DST_OUT_NV: [internal] int32                     = 0x928D;
GL_DST_OVER_NV: [internal] int32                    = 0x9289;
GL_EXCLUSION_NV: [internal] int32                   = 0x92A0;
GL_GREEN_NV: [internal] int32                       = 0x1904;
GL_HARDLIGHT_NV: [internal] int32                   = 0x929B;
GL_HARDMIX_NV: [internal] int32                     = 0x92A9;
GL_HSL_COLOR_NV: [internal] int32                   = 0x92AF;
GL_HSL_HUE_NV: [internal] int32                     = 0x92AD;
GL_HSL_LUMINOSITY_NV: [internal] int32              = 0x92B0;
GL_HSL_SATURATION_NV: [internal] int32              = 0x92AE;
GL_INVERT_OVG_NV: [internal] int32                  = 0x92B4;
GL_INVERT_RGB_NV: [internal] int32                  = 0x92A3;
GL_LIGHTEN_NV: [internal] int32                     = 0x9298;
GL_LINEARBURN_NV: [internal] int32                  = 0x92A5;
GL_LINEARDODGE_NV: [internal] int32                 = 0x92A4;
GL_LINEARLIGHT_NV: [internal] int32                 = 0x92A7;
GL_MINUS_CLAMPED_NV: [internal] int32               = 0x92B3;
GL_MINUS_NV: [internal] int32                       = 0x929F;
GL_MULTIPLY_NV: [internal] int32                    = 0x9294;
GL_OVERLAY_NV: [internal] int32                     = 0x9296;
GL_PINLIGHT_NV: [internal] int32                    = 0x92A8;
GL_PLUS_CLAMPED_ALPHA_NV: [internal] int32          = 0x92B2;
GL_PLUS_CLAMPED_NV: [internal] int32                = 0x92B1;
GL_PLUS_DARKER_NV: [internal] int32                 = 0x9292;
GL_PLUS_NV: [internal] int32                        = 0x9291;
GL_RED_NV: [internal] int32                         = 0x1903;
GL_SCREEN_NV: [internal] int32                      = 0x9295;
GL_SOFTLIGHT_NV: [internal] int32                   = 0x929C;
GL_SRC_ATOP_NV: [internal] int32                    = 0x928E;
GL_SRC_IN_NV: [internal] int32                      = 0x928A;
GL_SRC_NV: [internal] int32                         = 0x9286;
GL_SRC_OUT_NV: [internal] int32                     = 0x928C;
GL_SRC_OVER_NV: [internal] int32                    = 0x9288;
GL_UNCORRELATED_NV: [internal] int32                = 0x9282;
GL_VIVIDLIGHT_NV: [internal] int32                  = 0x92A6;
GL_XOR_NV: [internal] int32                         = 0x1506;

def PFNGLBLENDPARAMETERINVPROC = (pname: GLenum, value: GLint)(void)*;
def PFNGLBLENDBARRIERNVPROC = ()(void)*;

@[c]glBlendParameteriNV(pname: GLenum, value: GLint): void;
@[c]glBlendBarrierNV::void;

GL_BLEND_ADVANCED_COHERENT_NV: [internal] int32     = 0x9285;

GL_FACTOR_MIN_AMD: [internal] int32                 = 0x901C;
GL_FACTOR_MAX_AMD: [internal] int32                 = 0x901D;

GL_VIEWPORT_POSITION_W_SCALE_NV: [internal] int32   = 0x937C;
GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV: [internal] int32 = 0x937D;
GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV: [internal] int32 = 0x937E;

def PFNGLVIEWPORTPOSITIONWSCALENVPROC = (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat)(void)*;

@[c]glViewportPositionWScaleNV(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat): void;

GL_TERMINATE_SEQUENCE_COMMAND_NV: [internal] int32  = 0x0000;
GL_NOP_COMMAND_NV: [internal] int32                 = 0x0001;
GL_DRAW_ELEMENTS_COMMAND_NV: [internal] int32       = 0x0002;
GL_DRAW_ARRAYS_COMMAND_NV: [internal] int32         = 0x0003;
GL_DRAW_ELEMENTS_STRIP_COMMAND_NV: [internal] int32 = 0x0004;
GL_DRAW_ARRAYS_STRIP_COMMAND_NV: [internal] int32   = 0x0005;
GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV: [internal] int32 = 0x0006;
GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV: [internal] int32 = 0x0007;
GL_ELEMENT_ADDRESS_COMMAND_NV: [internal] int32     = 0x0008;
GL_ATTRIBUTE_ADDRESS_COMMAND_NV: [internal] int32   = 0x0009;
GL_UNIFORM_ADDRESS_COMMAND_NV: [internal] int32     = 0x000A;
GL_BLEND_COLOR_COMMAND_NV: [internal] int32         = 0x000B;
GL_STENCIL_REF_COMMAND_NV: [internal] int32         = 0x000C;
GL_LINE_WIDTH_COMMAND_NV: [internal] int32          = 0x000D;
GL_POLYGON_OFFSET_COMMAND_NV: [internal] int32      = 0x000E;
GL_ALPHA_REF_COMMAND_NV: [internal] int32           = 0x000F;
GL_VIEWPORT_COMMAND_NV: [internal] int32            = 0x0010;
GL_SCISSOR_COMMAND_NV: [internal] int32             = 0x0011;
GL_FRONT_FACE_COMMAND_NV: [internal] int32          = 0x0012;

def PFNGLCREATESTATESNVPROC = (n: GLsizei, states: GLuint*)(void)*;
def PFNGLDELETESTATESNVPROC = (n: GLsizei, states: GLuint*)(void)*;
def PFNGLISSTATENVPROC = (state: GLuint)(GLboolean)*;
def PFNGLSTATECAPTURENVPROC = (state: GLuint, mode: GLenum)(void)*;
def PFNGLGETCOMMANDHEADERNVPROC = (tokenID: GLenum, size: GLuint)(GLuint)*;
def PFNGLGETSTAGEINDEXNVPROC = (shadertype: GLenum)(GLushort)*;
def PFNGLDRAWCOMMANDSNVPROC = (primitiveMode: GLenum, buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, count: GLuint)(void)*;
def PFNGLDRAWCOMMANDSADDRESSNVPROC = (primitiveMode: GLenum, indirects: GLuint64*, sizes: GLsizei*, count: GLuint)(void)*;
def PFNGLDRAWCOMMANDSSTATESNVPROC = (buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint)(void)*;
def PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = (indirects: GLuint64*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint)(void)*;
def PFNGLCREATECOMMANDLISTSNVPROC = (n: GLsizei, lists: GLuint*)(void)*;
def PFNGLDELETECOMMANDLISTSNVPROC = (n: GLsizei, lists: GLuint*)(void)*;
def PFNGLISCOMMANDLISTNVPROC = (list: GLuint)(GLboolean)*;
def PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = (list: GLuint, segment: GLuint, indirects: void**, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint)(void)*;
def PFNGLCOMMANDLISTSEGMENTSNVPROC = (list: GLuint, segments: GLuint)(void)*;
def PFNGLCOMPILECOMMANDLISTNVPROC = (list: GLuint)(void)*;
def PFNGLCALLCOMMANDLISTNVPROC = (list: GLuint)(void)*;

@[c]glCreateStatesNV(n: GLsizei, states: GLuint*): void;
@[c]glDeleteStatesNV(n: GLsizei, states: GLuint*): void;
@[c]glIsStateNV(state: GLuint): GLboolean;
@[c]glStateCaptureNV(state: GLuint, mode: GLenum): void;
@[c]glGetCommandHeaderNV(tokenID: GLenum, size: GLuint): GLuint;
@[c]glGetStageIndexNV(shadertype: GLenum): GLushort;
@[c]glDrawCommandsNV(primitiveMode: GLenum, buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, count: GLuint): void;
@[c]glDrawCommandsAddressNV(primitiveMode: GLenum, indirects: GLuint64*, sizes: GLsizei*, count: GLuint): void;
@[c]glDrawCommandsStatesNV(buffer: GLuint, indirects: GLintptr*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint): void;
@[c]glDrawCommandsStatesAddressNV(indirects: GLuint64*, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint): void;
@[c]glCreateCommandListsNV(n: GLsizei, lists: GLuint*): void;
@[c]glDeleteCommandListsNV(n: GLsizei, lists: GLuint*): void;
@[c]glIsCommandListNV(list: GLuint): GLboolean;
@[c]glListDrawCommandsStatesClientNV(list: GLuint, segment: GLuint, indirects: void**, sizes: GLsizei*, states: GLuint*, fbos: GLuint*, count: GLuint): void;
@[c]glCommandListSegmentsNV(list: GLuint, segments: GLuint): void;
@[c]glCompileCommandListNV(list: GLuint): void;
@[c]glCallCommandListNV(list: GLuint): void;

GL_QUERY_WAIT_NV: [internal] int32                  = 0x8E13;
GL_QUERY_NO_WAIT_NV: [internal] int32               = 0x8E14;
GL_QUERY_BY_REGION_WAIT_NV: [internal] int32        = 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT_NV: [internal] int32     = 0x8E16;

def PFNGLBEGINCONDITIONALRENDERNVPROC = (id: GLuint, mode: GLenum)(void)*;
def PFNGLENDCONDITIONALRENDERNVPROC = ()(void)*;

@[c]glBeginConditionalRenderNV(id: GLuint, mode: GLenum): void;
@[c]glEndConditionalRenderNV::void;

GL_CONSERVATIVE_RASTERIZATION_NV: [internal] int32  = 0x9346;
GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV: [internal] int32 = 0x9347;
GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV: [internal] int32 = 0x9348;
GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV: [internal] int32 = 0x9349;

def PFNGLSUBPIXELPRECISIONBIASNVPROC = (xbits: GLuint, ybits: GLuint)(void)*;

@[c]glSubpixelPrecisionBiasNV(xbits: GLuint, ybits: GLuint): void;

GL_CONSERVATIVE_RASTER_DILATE_NV: [internal] int32  = 0x9379;
GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV: [internal] int32 = 0x937A;
GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV: [internal] int32 = 0x937B;

def PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = (pname: GLenum, value: GLfloat)(void)*;

@[c]glConservativeRasterParameterfNV(pname: GLenum, value: GLfloat): void;

GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: [internal] int32 = 0x9550;

GL_CONSERVATIVE_RASTER_MODE_NV: [internal] int32    = 0x954D;
GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV: [internal] int32 = 0x954E;
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV: [internal] int32 = 0x954F;

def PFNGLCONSERVATIVERASTERPARAMETERINVPROC = (pname: GLenum, param: GLint)(void)*;

@[c]glConservativeRasterParameteriNV(pname: GLenum, param: GLint): void;

GL_DEPTH_COMPONENT32F_NV: [internal] int32          = 0x8DAB;
GL_DEPTH32F_STENCIL8_NV: [internal] int32           = 0x8DAC;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV: [internal] int32 = 0x8DAD;
GL_DEPTH_BUFFER_FLOAT_MODE_NV: [internal] int32     = 0x8DAF;

def PFNGLDEPTHRANGEDNVPROC = (zNear: GLdouble, zFar: GLdouble)(void)*;
def PFNGLCLEARDEPTHDNVPROC = (depth: GLdouble)(void)*;
def PFNGLDEPTHBOUNDSDNVPROC = (zmin: GLdouble, zmax: GLdouble)(void)*;

@[c]glDepthRangedNV(zNear: GLdouble, zFar: GLdouble): void;
@[c]glClearDepthdNV(depth: GLdouble): void;
@[c]glDepthBoundsdNV(zmin: GLdouble, zmax: GLdouble): void;

def GLVULKANPROCNV = ()(void)*;
def PFNGLDRAWVKIMAGENVPROC = (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat)(void)*;
def PFNGLGETVKPROCADDRNVPROC = (name: GLchar*)(GLVULKANPROCNV)*;
def PFNGLWAITVKSEMAPHORENVPROC = (vkSemaphore: GLuint64)(void)*;
def PFNGLSIGNALVKSEMAPHORENVPROC = (vkSemaphore: GLuint64)(void)*;
def PFNGLSIGNALVKFENCENVPROC = (vkFence: GLuint64)(void)*;

@[c]glDrawVkImageNV(vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat): void;
@[c]glGetVkProcAddrNV(name: GLchar*): GLVULKANPROCNV;
@[c]glWaitVkSemaphoreNV(vkSemaphore: GLuint64): void;
@[c]glSignalVkSemaphoreNV(vkSemaphore: GLuint64): void;
@[c]glSignalVkFenceNV(vkFence: GLuint64): void;

GL_FILL_RECTANGLE_NV: [internal] int32              = 0x933C;

GL_FRAGMENT_COVERAGE_TO_COLOR_NV: [internal] int32  = 0x92DD;
GL_FRAGMENT_COVERAGE_COLOR_NV: [internal] int32     = 0x92DE;

def PFNGLFRAGMENTCOVERAGECOLORNVPROC = (color: GLuint)(void)*;

@[c]glFragmentCoverageColorNV(color: GLuint): void;

GL_COVERAGE_MODULATION_TABLE_NV: [internal] int32   = 0x9331;
GL_COLOR_SAMPLES_NV: [internal] int32               = 0x8E20;
GL_DEPTH_SAMPLES_NV: [internal] int32               = 0x932D;
GL_STENCIL_SAMPLES_NV: [internal] int32             = 0x932E;
GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV: [internal] int32 = 0x932F;
GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV: [internal] int32 = 0x9330;
GL_COVERAGE_MODULATION_NV: [internal] int32         = 0x9332;
GL_COVERAGE_MODULATION_TABLE_SIZE_NV: [internal] int32 = 0x9333;

def PFNGLCOVERAGEMODULATIONTABLENVPROC = (n: GLsizei, v: GLfloat*)(void)*;
def PFNGLGETCOVERAGEMODULATIONTABLENVPROC = (bufSize: GLsizei, v: GLfloat*)(void)*;
def PFNGLCOVERAGEMODULATIONNVPROC = (components: GLenum)(void)*;

@[c]glCoverageModulationTableNV(n: GLsizei, v: GLfloat*): void;
@[c]glGetCoverageModulationTableNV(bufSize: GLsizei, v: GLfloat*): void;
@[c]glCoverageModulationNV(components: GLenum): void;

GL_RENDERBUFFER_COVERAGE_SAMPLES_NV: [internal] int32 = 0x8CAB;
GL_RENDERBUFFER_COLOR_SAMPLES_NV: [internal] int32  = 0x8E10;
GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV: [internal] int32 = 0x8E11;
GL_MULTISAMPLE_COVERAGE_MODES_NV: [internal] int32  = 0x8E12;

def PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei)(void)*;

@[c]glRenderbufferStorageMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;

def GLint64EXT = khronos_int64_t;

GL_INT64_NV: [internal] int32                       = 0x140E;
GL_UNSIGNED_INT64_NV: [internal] int32              = 0x140F;
GL_INT8_NV: [internal] int32                        = 0x8FE0;
GL_INT8_VEC2_NV: [internal] int32                   = 0x8FE1;
GL_INT8_VEC3_NV: [internal] int32                   = 0x8FE2;
GL_INT8_VEC4_NV: [internal] int32                   = 0x8FE3;
GL_INT16_NV: [internal] int32                       = 0x8FE4;
GL_INT16_VEC2_NV: [internal] int32                  = 0x8FE5;
GL_INT16_VEC3_NV: [internal] int32                  = 0x8FE6;
GL_INT16_VEC4_NV: [internal] int32                  = 0x8FE7;
GL_INT64_VEC2_NV: [internal] int32                  = 0x8FE9;
GL_INT64_VEC3_NV: [internal] int32                  = 0x8FEA;
GL_INT64_VEC4_NV: [internal] int32                  = 0x8FEB;
GL_UNSIGNED_INT8_NV: [internal] int32               = 0x8FEC;
GL_UNSIGNED_INT8_VEC2_NV: [internal] int32          = 0x8FED;
GL_UNSIGNED_INT8_VEC3_NV: [internal] int32          = 0x8FEE;
GL_UNSIGNED_INT8_VEC4_NV: [internal] int32          = 0x8FEF;
GL_UNSIGNED_INT16_NV: [internal] int32              = 0x8FF0;
GL_UNSIGNED_INT16_VEC2_NV: [internal] int32         = 0x8FF1;
GL_UNSIGNED_INT16_VEC3_NV: [internal] int32         = 0x8FF2;
GL_UNSIGNED_INT16_VEC4_NV: [internal] int32         = 0x8FF3;
GL_UNSIGNED_INT64_VEC2_NV: [internal] int32         = 0x8FF5;
GL_UNSIGNED_INT64_VEC3_NV: [internal] int32         = 0x8FF6;
GL_UNSIGNED_INT64_VEC4_NV: [internal] int32         = 0x8FF7;
GL_FLOAT16_NV: [internal] int32                     = 0x8FF8;
GL_FLOAT16_VEC2_NV: [internal] int32                = 0x8FF9;
GL_FLOAT16_VEC3_NV: [internal] int32                = 0x8FFA;
GL_FLOAT16_VEC4_NV: [internal] int32                = 0x8FFB;

def PFNGLUNIFORM1I64NVPROC = (location: GLint, x: GLint64EXT)(void)*;
def PFNGLUNIFORM2I64NVPROC = (location: GLint, x: GLint64EXT, y: GLint64EXT)(void)*;
def PFNGLUNIFORM3I64NVPROC = (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT)(void)*;
def PFNGLUNIFORM4I64NVPROC = (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT)(void)*;
def PFNGLUNIFORM1I64VNVPROC = (location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLUNIFORM2I64VNVPROC = (location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLUNIFORM3I64VNVPROC = (location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLUNIFORM4I64VNVPROC = (location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLUNIFORM1UI64NVPROC = (location: GLint, x: GLuint64EXT)(void)*;
def PFNGLUNIFORM2UI64NVPROC = (location: GLint, x: GLuint64EXT, y: GLuint64EXT)(void)*;
def PFNGLUNIFORM3UI64NVPROC = (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT)(void)*;
def PFNGLUNIFORM4UI64NVPROC = (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT)(void)*;
def PFNGLUNIFORM1UI64VNVPROC = (location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLUNIFORM2UI64VNVPROC = (location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLUNIFORM3UI64VNVPROC = (location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLUNIFORM4UI64VNVPROC = (location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLGETUNIFORMI64VNVPROC = (program: GLuint, location: GLint, params: GLint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM1I64NVPROC = (program: GLuint, location: GLint, x: GLint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM2I64NVPROC = (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM3I64NVPROC = (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM4I64NVPROC = (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM1I64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM2I64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM3I64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM4I64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM1UI64NVPROC = (program: GLuint, location: GLint, x: GLuint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM2UI64NVPROC = (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM3UI64NVPROC = (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM4UI64NVPROC = (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT)(void)*;
def PFNGLPROGRAMUNIFORM1UI64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM2UI64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM3UI64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORM4UI64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;

@[c]glUniform1i64NV(location: GLint, x: GLint64EXT): void;
@[c]glUniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT): void;
@[c]glUniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void;
@[c]glUniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void;
@[c]glUniform1i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glUniform2i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glUniform3i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glUniform4i64vNV(location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glUniform1ui64NV(location: GLint, x: GLuint64EXT): void;
@[c]glUniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT): void;
@[c]glUniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void;
@[c]glUniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void;
@[c]glUniform1ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glUniform2ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glUniform3ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glUniform4ui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glGetUniformi64vNV(program: GLuint, location: GLint, params: GLint64EXT*): void;
@[c]glProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT): void;
@[c]glProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT): void;
@[c]glProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void;
@[c]glProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void;
@[c]glProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLint64EXT*): void;
@[c]glProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT): void;
@[c]glProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT): void;
@[c]glProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void;
@[c]glProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void;
@[c]glProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*): void;

GL_MULTISAMPLES_NV: [internal] int32                = 0x9371;
GL_SUPERSAMPLE_SCALE_X_NV: [internal] int32         = 0x9372;
GL_SUPERSAMPLE_SCALE_Y_NV: [internal] int32         = 0x9373;
GL_CONFORMANT_NV: [internal] int32                  = 0x9374;

def PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: GLint*)(void)*;

@[c]glGetInternalformatSampleivNV(target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: GLint*): void;

GL_ATTACHED_MEMORY_OBJECT_NV: [internal] int32      = 0x95A4;
GL_ATTACHED_MEMORY_OFFSET_NV: [internal] int32      = 0x95A5;
GL_MEMORY_ATTACHABLE_ALIGNMENT_NV: [internal] int32 = 0x95A6;
GL_MEMORY_ATTACHABLE_SIZE_NV: [internal] int32      = 0x95A7;
GL_MEMORY_ATTACHABLE_NV: [internal] int32           = 0x95A8;
GL_DETACHED_MEMORY_INCARNATION_NV: [internal] int32 = 0x95A9;
GL_DETACHED_TEXTURES_NV: [internal] int32           = 0x95AA;
GL_DETACHED_BUFFERS_NV: [internal] int32            = 0x95AB;
GL_MAX_DETACHED_TEXTURES_NV: [internal] int32       = 0x95AC;
GL_MAX_DETACHED_BUFFERS_NV: [internal] int32        = 0x95AD;

def PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: GLuint*)(void)*;
def PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = (memory: GLuint, pname: GLenum)(void)*;
def PFNGLTEXATTACHMEMORYNVPROC = (target: GLenum, memory: GLuint, offset: GLuint64)(void)*;
def PFNGLBUFFERATTACHMEMORYNVPROC = (target: GLenum, memory: GLuint, offset: GLuint64)(void)*;
def PFNGLTEXTUREATTACHMEMORYNVPROC = (texture: GLuint, memory: GLuint, offset: GLuint64)(void)*;
def PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = (buffer: GLuint, memory: GLuint, offset: GLuint64)(void)*;

@[c]glGetMemoryObjectDetachedResourcesuivNV(memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: GLuint*): void;
@[c]glResetMemoryObjectParameterNV(memory: GLuint, pname: GLenum): void;
@[c]glTexAttachMemoryNV(target: GLenum, memory: GLuint, offset: GLuint64): void;
@[c]glBufferAttachMemoryNV(target: GLenum, memory: GLuint, offset: GLuint64): void;
@[c]glTextureAttachMemoryNV(texture: GLuint, memory: GLuint, offset: GLuint64): void;
@[c]glNamedBufferAttachMemoryNV(buffer: GLuint, memory: GLuint, offset: GLuint64): void;

def PFNGLBUFFERPAGECOMMITMENTMEMNVPROC = (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean)(void)*;
def PFNGLTEXPAGECOMMITMENTMEMNVPROC = (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean)(void)*;
def PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC = (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean)(void)*;
def PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC = (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean)(void)*;

@[c]glBufferPageCommitmentMemNV(target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean): void;
@[c]glTexPageCommitmentMemNV(target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean): void;
@[c]glNamedBufferPageCommitmentMemNV(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean): void;
@[c]glTexturePageCommitmentMemNV(texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean): void;

GL_MESH_SHADER_NV: [internal] int32                 = 0x9559;
GL_TASK_SHADER_NV: [internal] int32                 = 0x955A;
GL_MAX_MESH_UNIFORM_BLOCKS_NV: [internal] int32     = 0x8E60;
GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV: [internal] int32 = 0x8E61;
GL_MAX_MESH_IMAGE_UNIFORMS_NV: [internal] int32     = 0x8E62;
GL_MAX_MESH_UNIFORM_COMPONENTS_NV: [internal] int32 = 0x8E63;
GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV: [internal] int32 = 0x8E64;
GL_MAX_MESH_ATOMIC_COUNTERS_NV: [internal] int32    = 0x8E65;
GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV: [internal] int32 = 0x8E66;
GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV: [internal] int32 = 0x8E67;
GL_MAX_TASK_UNIFORM_BLOCKS_NV: [internal] int32     = 0x8E68;
GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV: [internal] int32 = 0x8E69;
GL_MAX_TASK_IMAGE_UNIFORMS_NV: [internal] int32     = 0x8E6A;
GL_MAX_TASK_UNIFORM_COMPONENTS_NV: [internal] int32 = 0x8E6B;
GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV: [internal] int32 = 0x8E6C;
GL_MAX_TASK_ATOMIC_COUNTERS_NV: [internal] int32    = 0x8E6D;
GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV: [internal] int32 = 0x8E6E;
GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV: [internal] int32 = 0x8E6F;
GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV: [internal] int32 = 0x95A2;
GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV: [internal] int32 = 0x95A3;
GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV: [internal] int32  = 0x9536;
GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV: [internal] int32  = 0x9537;
GL_MAX_MESH_OUTPUT_VERTICES_NV: [internal] int32    = 0x9538;
GL_MAX_MESH_OUTPUT_PRIMITIVES_NV: [internal] int32  = 0x9539;
GL_MAX_TASK_OUTPUT_COUNT_NV: [internal] int32       = 0x953A;
GL_MAX_DRAW_MESH_TASKS_COUNT_NV: [internal] int32   = 0x953D;
GL_MAX_MESH_VIEWS_NV: [internal] int32              = 0x9557;
GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV: [internal] int32 = 0x92DF;
GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV: [internal] int32 = 0x9543;
GL_MAX_MESH_WORK_GROUP_SIZE_NV: [internal] int32    = 0x953B;
GL_MAX_TASK_WORK_GROUP_SIZE_NV: [internal] int32    = 0x953C;
GL_MESH_WORK_GROUP_SIZE_NV: [internal] int32        = 0x953E;
GL_TASK_WORK_GROUP_SIZE_NV: [internal] int32        = 0x953F;
GL_MESH_VERTICES_OUT_NV: [internal] int32           = 0x9579;
GL_MESH_PRIMITIVES_OUT_NV: [internal] int32         = 0x957A;
GL_MESH_OUTPUT_TYPE_NV: [internal] int32            = 0x957B;
GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV: [internal] int32 = 0x959C;
GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV: [internal] int32 = 0x959D;
GL_REFERENCED_BY_MESH_SHADER_NV: [internal] int32   = 0x95A0;
GL_REFERENCED_BY_TASK_SHADER_NV: [internal] int32   = 0x95A1;
GL_MESH_SHADER_BIT_NV: [internal] int32             = 0x00000040;
GL_TASK_SHADER_BIT_NV: [internal] int32             = 0x00000080;
GL_MESH_SUBROUTINE_NV: [internal] int32             = 0x957C;
GL_TASK_SUBROUTINE_NV: [internal] int32             = 0x957D;
GL_MESH_SUBROUTINE_UNIFORM_NV: [internal] int32     = 0x957E;
GL_TASK_SUBROUTINE_UNIFORM_NV: [internal] int32     = 0x957F;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV: [internal] int32 = 0x959E;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV: [internal] int32 = 0x959F;

def PFNGLDRAWMESHTASKSNVPROC = (first: GLuint, count: GLuint)(void)*;
def PFNGLDRAWMESHTASKSINDIRECTNVPROC = (indirect: GLintptr)(void)*;
def PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei)(void)*;
def PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei)(void)*;

@[c]glDrawMeshTasksNV(first: GLuint, count: GLuint): void;
@[c]glDrawMeshTasksIndirectNV(indirect: GLintptr): void;
@[c]glMultiDrawMeshTasksIndirectNV(indirect: GLintptr, drawcount: GLsizei, stride: GLsizei): void;
@[c]glMultiDrawMeshTasksIndirectCountNV(indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei): void;

GL_PATH_FORMAT_SVG_NV: [internal] int32             = 0x9070;
GL_PATH_FORMAT_PS_NV: [internal] int32              = 0x9071;
GL_STANDARD_FONT_NAME_NV: [internal] int32          = 0x9072;
GL_SYSTEM_FONT_NAME_NV: [internal] int32            = 0x9073;
GL_FILE_NAME_NV: [internal] int32                   = 0x9074;
GL_PATH_STROKE_WIDTH_NV: [internal] int32           = 0x9075;
GL_PATH_END_CAPS_NV: [internal] int32               = 0x9076;
GL_PATH_INITIAL_END_CAP_NV: [internal] int32        = 0x9077;
GL_PATH_TERMINAL_END_CAP_NV: [internal] int32       = 0x9078;
GL_PATH_JOIN_STYLE_NV: [internal] int32             = 0x9079;
GL_PATH_MITER_LIMIT_NV: [internal] int32            = 0x907A;
GL_PATH_DASH_CAPS_NV: [internal] int32              = 0x907B;
GL_PATH_INITIAL_DASH_CAP_NV: [internal] int32       = 0x907C;
GL_PATH_TERMINAL_DASH_CAP_NV: [internal] int32      = 0x907D;
GL_PATH_DASH_OFFSET_NV: [internal] int32            = 0x907E;
GL_PATH_CLIENT_LENGTH_NV: [internal] int32          = 0x907F;
GL_PATH_FILL_MODE_NV: [internal] int32              = 0x9080;
GL_PATH_FILL_MASK_NV: [internal] int32              = 0x9081;
GL_PATH_FILL_COVER_MODE_NV: [internal] int32        = 0x9082;
GL_PATH_STROKE_COVER_MODE_NV: [internal] int32      = 0x9083;
GL_PATH_STROKE_MASK_NV: [internal] int32            = 0x9084;
GL_COUNT_UP_NV: [internal] int32                    = 0x9088;
GL_COUNT_DOWN_NV: [internal] int32                  = 0x9089;
GL_PATH_OBJECT_BOUNDING_BOX_NV: [internal] int32    = 0x908A;
GL_CONVEX_HULL_NV: [internal] int32                 = 0x908B;
GL_BOUNDING_BOX_NV: [internal] int32                = 0x908D;
GL_TRANSLATE_X_NV: [internal] int32                 = 0x908E;
GL_TRANSLATE_Y_NV: [internal] int32                 = 0x908F;
GL_TRANSLATE_2D_NV: [internal] int32                = 0x9090;
GL_TRANSLATE_3D_NV: [internal] int32                = 0x9091;
GL_AFFINE_2D_NV: [internal] int32                   = 0x9092;
GL_AFFINE_3D_NV: [internal] int32                   = 0x9094;
GL_TRANSPOSE_AFFINE_2D_NV: [internal] int32         = 0x9096;
GL_TRANSPOSE_AFFINE_3D_NV: [internal] int32         = 0x9098;
GL_UTF8_NV: [internal] int32                        = 0x909A;
GL_UTF16_NV: [internal] int32                       = 0x909B;
GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV: [internal] int32 = 0x909C;
GL_PATH_COMMAND_COUNT_NV: [internal] int32          = 0x909D;
GL_PATH_COORD_COUNT_NV: [internal] int32            = 0x909E;
GL_PATH_DASH_ARRAY_COUNT_NV: [internal] int32       = 0x909F;
GL_PATH_COMPUTED_LENGTH_NV: [internal] int32        = 0x90A0;
GL_PATH_FILL_BOUNDING_BOX_NV: [internal] int32      = 0x90A1;
GL_PATH_STROKE_BOUNDING_BOX_NV: [internal] int32    = 0x90A2;
GL_SQUARE_NV: [internal] int32                      = 0x90A3;
GL_ROUND_NV: [internal] int32                       = 0x90A4;
GL_TRIANGULAR_NV: [internal] int32                  = 0x90A5;
GL_BEVEL_NV: [internal] int32                       = 0x90A6;
GL_MITER_REVERT_NV: [internal] int32                = 0x90A7;
GL_MITER_TRUNCATE_NV: [internal] int32              = 0x90A8;
GL_SKIP_MISSING_GLYPH_NV: [internal] int32          = 0x90A9;
GL_USE_MISSING_GLYPH_NV: [internal] int32           = 0x90AA;
GL_PATH_ERROR_POSITION_NV: [internal] int32         = 0x90AB;
GL_ACCUM_ADJACENT_PAIRS_NV: [internal] int32        = 0x90AD;
GL_ADJACENT_PAIRS_NV: [internal] int32              = 0x90AE;
GL_FIRST_TO_REST_NV: [internal] int32               = 0x90AF;
GL_PATH_GEN_MODE_NV: [internal] int32               = 0x90B0;
GL_PATH_GEN_COEFF_NV: [internal] int32              = 0x90B1;
GL_PATH_GEN_COMPONENTS_NV: [internal] int32         = 0x90B3;
GL_PATH_STENCIL_FUNC_NV: [internal] int32           = 0x90B7;
GL_PATH_STENCIL_REF_NV: [internal] int32            = 0x90B8;
GL_PATH_STENCIL_VALUE_MASK_NV: [internal] int32     = 0x90B9;
GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: [internal] int32 = 0x90BD;
GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: [internal] int32 = 0x90BE;
GL_PATH_COVER_DEPTH_FUNC_NV: [internal] int32       = 0x90BF;
GL_PATH_DASH_OFFSET_RESET_NV: [internal] int32      = 0x90B4;
GL_MOVE_TO_RESETS_NV: [internal] int32              = 0x90B5;
GL_MOVE_TO_CONTINUES_NV: [internal] int32           = 0x90B6;
GL_CLOSE_PATH_NV: [internal] int32                  = 0x00;
GL_MOVE_TO_NV: [internal] int32                     = 0x02;
GL_RELATIVE_MOVE_TO_NV: [internal] int32            = 0x03;
GL_LINE_TO_NV: [internal] int32                     = 0x04;
GL_RELATIVE_LINE_TO_NV: [internal] int32            = 0x05;
GL_HORIZONTAL_LINE_TO_NV: [internal] int32          = 0x06;
GL_RELATIVE_HORIZONTAL_LINE_TO_NV: [internal] int32 = 0x07;
GL_VERTICAL_LINE_TO_NV: [internal] int32            = 0x08;
GL_RELATIVE_VERTICAL_LINE_TO_NV: [internal] int32   = 0x09;
GL_QUADRATIC_CURVE_TO_NV: [internal] int32          = 0x0A;
GL_RELATIVE_QUADRATIC_CURVE_TO_NV: [internal] int32 = 0x0B;
GL_CUBIC_CURVE_TO_NV: [internal] int32              = 0x0C;
GL_RELATIVE_CUBIC_CURVE_TO_NV: [internal] int32     = 0x0D;
GL_SMOOTH_QUADRATIC_CURVE_TO_NV: [internal] int32   = 0x0E;
GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: [internal] int32 = 0x0F;
GL_SMOOTH_CUBIC_CURVE_TO_NV: [internal] int32       = 0x10;
GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: [internal] int32 = 0x11;
GL_SMALL_CCW_ARC_TO_NV: [internal] int32            = 0x12;
GL_RELATIVE_SMALL_CCW_ARC_TO_NV: [internal] int32   = 0x13;
GL_SMALL_CW_ARC_TO_NV: [internal] int32             = 0x14;
GL_RELATIVE_SMALL_CW_ARC_TO_NV: [internal] int32    = 0x15;
GL_LARGE_CCW_ARC_TO_NV: [internal] int32            = 0x16;
GL_RELATIVE_LARGE_CCW_ARC_TO_NV: [internal] int32   = 0x17;
GL_LARGE_CW_ARC_TO_NV: [internal] int32             = 0x18;
GL_RELATIVE_LARGE_CW_ARC_TO_NV: [internal] int32    = 0x19;
GL_RESTART_PATH_NV: [internal] int32                = 0xF0;
GL_DUP_FIRST_CUBIC_CURVE_TO_NV: [internal] int32    = 0xF2;
GL_DUP_LAST_CUBIC_CURVE_TO_NV: [internal] int32     = 0xF4;
GL_RECT_NV: [internal] int32                        = 0xF6;
GL_CIRCULAR_CCW_ARC_TO_NV: [internal] int32         = 0xF8;
GL_CIRCULAR_CW_ARC_TO_NV: [internal] int32          = 0xFA;
GL_CIRCULAR_TANGENT_ARC_TO_NV: [internal] int32     = 0xFC;
GL_ARC_TO_NV: [internal] int32                      = 0xFE;
GL_RELATIVE_ARC_TO_NV: [internal] int32             = 0xFF;
GL_BOLD_BIT_NV: [internal] int32                    = 0x01;
GL_ITALIC_BIT_NV: [internal] int32                  = 0x02;
GL_GLYPH_WIDTH_BIT_NV: [internal] int32             = 0x01;
GL_GLYPH_HEIGHT_BIT_NV: [internal] int32            = 0x02;
GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV: [internal] int32 = 0x04;
GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: [internal] int32 = 0x08;
GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: [internal] int32 = 0x10;
GL_GLYPH_VERTICAL_BEARING_X_BIT_NV: [internal] int32 = 0x20;
GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV: [internal] int32 = 0x40;
GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: [internal] int32 = 0x80;
GL_GLYPH_HAS_KERNING_BIT_NV: [internal] int32       = 0x100;
GL_FONT_X_MIN_BOUNDS_BIT_NV: [internal] int32       = 0x00010000;
GL_FONT_Y_MIN_BOUNDS_BIT_NV: [internal] int32       = 0x00020000;
GL_FONT_X_MAX_BOUNDS_BIT_NV: [internal] int32       = 0x00040000;
GL_FONT_Y_MAX_BOUNDS_BIT_NV: [internal] int32       = 0x00080000;
GL_FONT_UNITS_PER_EM_BIT_NV: [internal] int32       = 0x00100000;
GL_FONT_ASCENDER_BIT_NV: [internal] int32           = 0x00200000;
GL_FONT_DESCENDER_BIT_NV: [internal] int32          = 0x00400000;
GL_FONT_HEIGHT_BIT_NV: [internal] int32             = 0x00800000;
GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV: [internal] int32  = 0x01000000;
GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV: [internal] int32 = 0x02000000;
GL_FONT_UNDERLINE_POSITION_BIT_NV: [internal] int32 = 0x04000000;
GL_FONT_UNDERLINE_THICKNESS_BIT_NV: [internal] int32 = 0x08000000;
GL_FONT_HAS_KERNING_BIT_NV: [internal] int32        = 0x10000000;
GL_ROUNDED_RECT_NV: [internal] int32                = 0xE8;
GL_RELATIVE_ROUNDED_RECT_NV: [internal] int32       = 0xE9;
GL_ROUNDED_RECT2_NV: [internal] int32               = 0xEA;
GL_RELATIVE_ROUNDED_RECT2_NV: [internal] int32      = 0xEB;
GL_ROUNDED_RECT4_NV: [internal] int32               = 0xEC;
GL_RELATIVE_ROUNDED_RECT4_NV: [internal] int32      = 0xED;
GL_ROUNDED_RECT8_NV: [internal] int32               = 0xEE;
GL_RELATIVE_ROUNDED_RECT8_NV: [internal] int32      = 0xEF;
GL_RELATIVE_RECT_NV: [internal] int32               = 0xF7;
GL_FONT_GLYPHS_AVAILABLE_NV: [internal] int32       = 0x9368;
GL_FONT_TARGET_UNAVAILABLE_NV: [internal] int32     = 0x9369;
GL_FONT_UNAVAILABLE_NV: [internal] int32            = 0x936A;
GL_FONT_UNINTELLIGIBLE_NV: [internal] int32         = 0x936B;
GL_CONIC_CURVE_TO_NV: [internal] int32              = 0x1A;
GL_RELATIVE_CONIC_CURVE_TO_NV: [internal] int32     = 0x1B;
GL_FONT_NUM_GLYPH_INDICES_BIT_NV: [internal] int32  = 0x20000000;
GL_STANDARD_FONT_FORMAT_NV: [internal] int32        = 0x936C;
GL_PATH_PROJECTION_NV: [internal] int32             = 0x1701;
GL_PATH_MODELVIEW_NV: [internal] int32              = 0x1700;
GL_PATH_MODELVIEW_STACK_DEPTH_NV: [internal] int32  = 0x0BA3;
GL_PATH_MODELVIEW_MATRIX_NV: [internal] int32       = 0x0BA6;
GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV: [internal] int32 = 0x0D36;
GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV: [internal] int32 = 0x84E3;
GL_PATH_PROJECTION_STACK_DEPTH_NV: [internal] int32 = 0x0BA4;
GL_PATH_PROJECTION_MATRIX_NV: [internal] int32      = 0x0BA7;
GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV: [internal] int32 = 0x0D38;
GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV: [internal] int32 = 0x84E4;
GL_FRAGMENT_INPUT_NV: [internal] int32              = 0x936D;

def PFNGLGENPATHSNVPROC = (range: GLsizei)(GLuint)*;
def PFNGLDELETEPATHSNVPROC = (path: GLuint, range: GLsizei)(void)*;
def PFNGLISPATHNVPROC = (path: GLuint)(GLboolean)*;
def PFNGLPATHCOMMANDSNVPROC = (path: GLuint, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void*)(void)*;
def PFNGLPATHCOORDSNVPROC = (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: void*)(void)*;
def PFNGLPATHSUBCOMMANDSNVPROC = (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void*)(void)*;
def PFNGLPATHSUBCOORDSNVPROC = (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: void*)(void)*;
def PFNGLPATHSTRINGNVPROC = (path: GLuint, format: GLenum, length: GLsizei, pathString: void*)(void)*;
def PFNGLPATHGLYPHSNVPROC = (firstPathName: GLuint, fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: void*, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat)(void)*;
def PFNGLPATHGLYPHRANGENVPROC = (firstPathName: GLuint, fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat)(void)*;
def PFNGLWEIGHTPATHSNVPROC = (resultPath: GLuint, numPaths: GLsizei, paths: GLuint*, weights: GLfloat*)(void)*;
def PFNGLCOPYPATHNVPROC = (resultPath: GLuint, srcPath: GLuint)(void)*;
def PFNGLINTERPOLATEPATHSNVPROC = (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat)(void)*;
def PFNGLTRANSFORMPATHNVPROC = (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLPATHPARAMETERIVNVPROC = (path: GLuint, pname: GLenum, value: GLint*)(void)*;
def PFNGLPATHPARAMETERINVPROC = (path: GLuint, pname: GLenum, value: GLint)(void)*;
def PFNGLPATHPARAMETERFVNVPROC = (path: GLuint, pname: GLenum, value: GLfloat*)(void)*;
def PFNGLPATHPARAMETERFNVPROC = (path: GLuint, pname: GLenum, value: GLfloat)(void)*;
def PFNGLPATHDASHARRAYNVPROC = (path: GLuint, dashCount: GLsizei, dashArray: GLfloat*)(void)*;
def PFNGLPATHSTENCILFUNCNVPROC = (func: GLenum, ref: GLint, mask: GLuint)(void)*;
def PFNGLPATHSTENCILDEPTHOFFSETNVPROC = (factor: GLfloat, units: GLfloat)(void)*;
def PFNGLSTENCILFILLPATHNVPROC = (path: GLuint, fillMode: GLenum, mask: GLuint)(void)*;
def PFNGLSTENCILSTROKEPATHNVPROC = (path: GLuint, reference: GLint, mask: GLuint)(void)*;
def PFNGLSTENCILFILLPATHINSTANCEDNVPROC = (numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = (numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLPATHCOVERDEPTHFUNCNVPROC = (func: GLenum)(void)*;
def PFNGLCOVERFILLPATHNVPROC = (path: GLuint, coverMode: GLenum)(void)*;
def PFNGLCOVERSTROKEPATHNVPROC = (path: GLuint, coverMode: GLenum)(void)*;
def PFNGLCOVERFILLPATHINSTANCEDNVPROC = (numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = (numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLGETPATHPARAMETERIVNVPROC = (path: GLuint, pname: GLenum, value: GLint*)(void)*;
def PFNGLGETPATHPARAMETERFVNVPROC = (path: GLuint, pname: GLenum, value: GLfloat*)(void)*;
def PFNGLGETPATHCOMMANDSNVPROC = (path: GLuint, commands: GLubyte*)(void)*;
def PFNGLGETPATHCOORDSNVPROC = (path: GLuint, coords: GLfloat*)(void)*;
def PFNGLGETPATHDASHARRAYNVPROC = (path: GLuint, dashArray: GLfloat*)(void)*;
def PFNGLGETPATHMETRICSNVPROC = (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, stride: GLsizei, metrics: GLfloat*)(void)*;
def PFNGLGETPATHMETRICRANGENVPROC = (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: GLfloat*)(void)*;
def PFNGLGETPATHSPACINGNVPROC = (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: GLfloat*)(void)*;
def PFNGLISPOINTINFILLPATHNVPROC = (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat)(GLboolean)*;
def PFNGLISPOINTINSTROKEPATHNVPROC = (path: GLuint, x: GLfloat, y: GLfloat)(GLboolean)*;
def PFNGLGETPATHLENGTHNVPROC = (path: GLuint, startSegment: GLsizei, numSegments: GLsizei)(GLfloat)*;
def PFNGLPOINTALONGPATHNVPROC = (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: GLfloat*, y: GLfloat*, tangentX: GLfloat*, tangentY: GLfloat*)(GLboolean)*;
def PFNGLMATRIXLOAD3X2FNVPROC = (matrixMode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXLOAD3X3FNVPROC = (matrixMode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = (matrixMode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXMULT3X2FNVPROC = (matrixMode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXMULT3X3FNVPROC = (matrixMode: GLenum, m: GLfloat*)(void)*;
def PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = (matrixMode: GLenum, m: GLfloat*)(void)*;
def PFNGLSTENCILTHENCOVERFILLPATHNVPROC = (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum)(void)*;
def PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum)(void)*;
def PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = (numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = (numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*)(void)*;
def PFNGLPATHGLYPHINDEXRANGENVPROC = (fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint*)(GLenum)*;
def PFNGLPATHGLYPHINDEXARRAYNVPROC = (firstPathName: GLuint, fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat)(GLenum)*;
def PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: void*, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat)(GLenum)*;
def PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: GLfloat*)(void)*;
def PFNGLGETPROGRAMRESOURCEFVNVPROC = (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, count: GLsizei, length: GLsizei*, params: GLfloat*)(void)*;

@[c]glGenPathsNV(range: GLsizei): GLuint;
@[c]glDeletePathsNV(path: GLuint, range: GLsizei): void;
@[c]glIsPathNV(path: GLuint): GLboolean;
@[c]glPathCommandsNV(path: GLuint, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void*): void;
@[c]glPathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: void*): void;
@[c]glPathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: GLubyte*, numCoords: GLsizei, coordType: GLenum, coords: void*): void;
@[c]glPathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: void*): void;
@[c]glPathStringNV(path: GLuint, format: GLenum, length: GLsizei, pathString: void*): void;
@[c]glPathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, numGlyphs: GLsizei, type: GLenum, charcodes: void*, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat): void;
@[c]glPathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat): void;
@[c]glWeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: GLuint*, weights: GLfloat*): void;
@[c]glCopyPathNV(resultPath: GLuint, srcPath: GLuint): void;
@[c]glInterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat): void;
@[c]glTransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glPathParameterivNV(path: GLuint, pname: GLenum, value: GLint*): void;
@[c]glPathParameteriNV(path: GLuint, pname: GLenum, value: GLint): void;
@[c]glPathParameterfvNV(path: GLuint, pname: GLenum, value: GLfloat*): void;
@[c]glPathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat): void;
@[c]glPathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: GLfloat*): void;
@[c]glPathStencilFuncNV(func: GLenum, ref: GLint, mask: GLuint): void;
@[c]glPathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat): void;
@[c]glStencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint): void;
@[c]glStencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint): void;
@[c]glStencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glStencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glPathCoverDepthFuncNV(func: GLenum): void;
@[c]glCoverFillPathNV(path: GLuint, coverMode: GLenum): void;
@[c]glCoverStrokePathNV(path: GLuint, coverMode: GLenum): void;
@[c]glCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glGetPathParameterivNV(path: GLuint, pname: GLenum, value: GLint*): void;
@[c]glGetPathParameterfvNV(path: GLuint, pname: GLenum, value: GLfloat*): void;
@[c]glGetPathCommandsNV(path: GLuint, commands: GLubyte*): void;
@[c]glGetPathCoordsNV(path: GLuint, coords: GLfloat*): void;
@[c]glGetPathDashArrayNV(path: GLuint, dashArray: GLfloat*): void;
@[c]glGetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, stride: GLsizei, metrics: GLfloat*): void;
@[c]glGetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: GLfloat*): void;
@[c]glGetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: GLfloat*): void;
@[c]glIsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean;
@[c]glIsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat): GLboolean;
@[c]glGetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat;
@[c]glPointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: GLfloat*, y: GLfloat*, tangentX: GLfloat*, tangentY: GLfloat*): GLboolean;
@[c]glMatrixLoad3x2fNV(matrixMode: GLenum, m: GLfloat*): void;
@[c]glMatrixLoad3x3fNV(matrixMode: GLenum, m: GLfloat*): void;
@[c]glMatrixLoadTranspose3x3fNV(matrixMode: GLenum, m: GLfloat*): void;
@[c]glMatrixMult3x2fNV(matrixMode: GLenum, m: GLfloat*): void;
@[c]glMatrixMult3x3fNV(matrixMode: GLenum, m: GLfloat*): void;
@[c]glMatrixMultTranspose3x3fNV(matrixMode: GLenum, m: GLfloat*): void;
@[c]glStencilThenCoverFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum): void;
@[c]glStencilThenCoverStrokePathNV(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum): void;
@[c]glStencilThenCoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glStencilThenCoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: void*, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: GLfloat*): void;
@[c]glPathGlyphIndexRangeNV(fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: GLuint*): GLenum;
@[c]glPathGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontName: void*, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum;
@[c]glPathMemoryGlyphIndexArrayNV(firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: void*, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum;
@[c]glProgramPathFragmentInputGenNV(program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: GLfloat*): void;
@[c]glGetProgramResourcefvNV(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: GLenum*, count: GLsizei, length: GLsizei*, params: GLfloat*): void;

GL_SHARED_EDGE_NV: [internal] int32                 = 0xC0;

GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV: [internal] int32 = 0x95B1;
GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV: [internal] int32 = 0x95B2;

GL_REPRESENTATIVE_FRAGMENT_TEST_NV: [internal] int32 = 0x937F;

GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV: [internal] int32 = 0x933D;
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV: [internal] int32 = 0x933E;
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV: [internal] int32 = 0x933F;
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV: [internal] int32 = 0x9340;
GL_SAMPLE_LOCATION_NV: [internal] int32             = 0x8E50;
GL_PROGRAMMABLE_SAMPLE_LOCATION_NV: [internal] int32 = 0x9341;
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV: [internal] int32 = 0x9342;
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV: [internal] int32 = 0x9343;

def PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = (target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*)(void)*;
def PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = (framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*)(void)*;
def PFNGLRESOLVEDEPTHVALUESNVPROC = ()(void)*;

@[c]glFramebufferSampleLocationsfvNV(target: GLenum, start: GLuint, count: GLsizei, v: GLfloat*): void;
@[c]glNamedFramebufferSampleLocationsfvNV(framebuffer: GLuint, start: GLuint, count: GLsizei, v: GLfloat*): void;
@[c]glResolveDepthValuesNV::void;

GL_SCISSOR_TEST_EXCLUSIVE_NV: [internal] int32      = 0x9555;
GL_SCISSOR_BOX_EXCLUSIVE_NV: [internal] int32       = 0x9556;

def PFNGLSCISSOREXCLUSIVENVPROC = (x: GLint, y: GLint, width: GLsizei, height: GLsizei)(void)*;
def PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = (first: GLuint, count: GLsizei, v: GLint*)(void)*;

@[c]glScissorExclusiveNV(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
@[c]glScissorExclusiveArrayvNV(first: GLuint, count: GLsizei, v: GLint*): void;

GL_BUFFER_GPU_ADDRESS_NV: [internal] int32          = 0x8F1D;
GL_GPU_ADDRESS_NV: [internal] int32                 = 0x8F34;
GL_MAX_SHADER_BUFFER_ADDRESS_NV: [internal] int32   = 0x8F35;

def PFNGLMAKEBUFFERRESIDENTNVPROC = (target: GLenum, access: GLenum)(void)*;
def PFNGLMAKEBUFFERNONRESIDENTNVPROC = (target: GLenum)(void)*;
def PFNGLISBUFFERRESIDENTNVPROC = (target: GLenum)(GLboolean)*;
def PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = (buffer: GLuint, access: GLenum)(void)*;
def PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = (buffer: GLuint)(void)*;
def PFNGLISNAMEDBUFFERRESIDENTNVPROC = (buffer: GLuint)(GLboolean)*;
def PFNGLGETBUFFERPARAMETERUI64VNVPROC = (target: GLenum, pname: GLenum, params: GLuint64EXT*)(void)*;
def PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = (buffer: GLuint, pname: GLenum, params: GLuint64EXT*)(void)*;
def PFNGLGETINTEGERUI64VNVPROC = (value: GLenum, result: GLuint64EXT*)(void)*;
def PFNGLUNIFORMUI64NVPROC = (location: GLint, value: GLuint64EXT)(void)*;
def PFNGLUNIFORMUI64VNVPROC = (location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;
def PFNGLGETUNIFORMUI64VNVPROC = (program: GLuint, location: GLint, params: GLuint64EXT*)(void)*;
def PFNGLPROGRAMUNIFORMUI64NVPROC = (program: GLuint, location: GLint, value: GLuint64EXT)(void)*;
def PFNGLPROGRAMUNIFORMUI64VNVPROC = (program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*)(void)*;

@[c]glMakeBufferResidentNV(target: GLenum, access: GLenum): void;
@[c]glMakeBufferNonResidentNV(target: GLenum): void;
@[c]glIsBufferResidentNV(target: GLenum): GLboolean;
@[c]glMakeNamedBufferResidentNV(buffer: GLuint, access: GLenum): void;
@[c]glMakeNamedBufferNonResidentNV(buffer: GLuint): void;
@[c]glIsNamedBufferResidentNV(buffer: GLuint): GLboolean;
@[c]glGetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: GLuint64EXT*): void;
@[c]glGetNamedBufferParameterui64vNV(buffer: GLuint, pname: GLenum, params: GLuint64EXT*): void;
@[c]glGetIntegerui64vNV(value: GLenum, result: GLuint64EXT*): void;
@[c]glUniformui64NV(location: GLint, value: GLuint64EXT): void;
@[c]glUniformui64vNV(location: GLint, count: GLsizei, value: GLuint64EXT*): void;
@[c]glGetUniformui64vNV(program: GLuint, location: GLint, params: GLuint64EXT*): void;
@[c]glProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT): void;
@[c]glProgramUniformui64vNV(program: GLuint, location: GLint, count: GLsizei, value: GLuint64EXT*): void;

GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: [internal] int32 = 0x00000010;

GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: [internal] int32 = 0x00000100;

GL_WARP_SIZE_NV: [internal] int32                   = 0x9339;
GL_WARPS_PER_SM_NV: [internal] int32                = 0x933A;
GL_SM_COUNT_NV: [internal] int32                    = 0x933B;

GL_SHADING_RATE_IMAGE_NV: [internal] int32          = 0x9563;
GL_SHADING_RATE_NO_INVOCATIONS_NV: [internal] int32 = 0x9564;
GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: [internal] int32 = 0x9565;
GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: [internal] int32 = 0x9566;
GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: [internal] int32 = 0x9567;
GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: [internal] int32 = 0x9568;
GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: [internal] int32 = 0x9569;
GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: [internal] int32 = 0x956A;
GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: [internal] int32 = 0x956B;
GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: [internal] int32 = 0x956C;
GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: [internal] int32 = 0x956D;
GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: [internal] int32 = 0x956E;
GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: [internal] int32 = 0x956F;
GL_SHADING_RATE_IMAGE_BINDING_NV: [internal] int32  = 0x955B;
GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV: [internal] int32 = 0x955C;
GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV: [internal] int32 = 0x955D;
GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV: [internal] int32 = 0x955E;
GL_MAX_COARSE_FRAGMENT_SAMPLES_NV: [internal] int32 = 0x955F;
GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV: [internal] int32 = 0x95AE;
GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV: [internal] int32 = 0x95AF;
GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV: [internal] int32 = 0x95B0;

def PFNGLBINDSHADINGRATEIMAGENVPROC = (texture: GLuint)(void)*;
def PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = (viewport: GLuint, entry: GLuint, rate: GLenum*)(void)*;
def PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = (rate: GLenum, samples: GLuint, index: GLuint, location: GLint*)(void)*;
def PFNGLSHADINGRATEIMAGEBARRIERNVPROC = (synchronize: GLboolean)(void)*;
def PFNGLSHADINGRATEIMAGEPALETTENVPROC = (viewport: GLuint, first: GLuint, count: GLsizei, rates: GLenum*)(void)*;
def PFNGLSHADINGRATESAMPLEORDERNVPROC = (order: GLenum)(void)*;
def PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = (rate: GLenum, samples: GLuint, locations: GLint*)(void)*;

@[c]glBindShadingRateImageNV(texture: GLuint): void;
@[c]glGetShadingRateImagePaletteNV(viewport: GLuint, entry: GLuint, rate: GLenum*): void;
@[c]glGetShadingRateSampleLocationivNV(rate: GLenum, samples: GLuint, index: GLuint, location: GLint*): void;
@[c]glShadingRateImageBarrierNV(synchronize: GLboolean): void;
@[c]glShadingRateImagePaletteNV(viewport: GLuint, first: GLuint, count: GLsizei, rates: GLenum*): void;
@[c]glShadingRateSampleOrderNV(order: GLenum): void;
@[c]glShadingRateSampleOrderCustomNV(rate: GLenum, samples: GLuint, locations: GLint*): void;

def PFNGLTEXTUREBARRIERNVPROC = ()(void)*;

@[c]glTextureBarrierNV::void;

GL_UNIFORM_BUFFER_UNIFIED_NV: [internal] int32      = 0x936E;
GL_UNIFORM_BUFFER_ADDRESS_NV: [internal] int32      = 0x936F;
GL_UNIFORM_BUFFER_LENGTH_NV: [internal] int32       = 0x9370;

def PFNGLVERTEXATTRIBL1I64NVPROC = (index: GLuint, x: GLint64EXT)(void)*;
def PFNGLVERTEXATTRIBL2I64NVPROC = (index: GLuint, x: GLint64EXT, y: GLint64EXT)(void)*;
def PFNGLVERTEXATTRIBL3I64NVPROC = (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT)(void)*;
def PFNGLVERTEXATTRIBL4I64NVPROC = (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT)(void)*;
def PFNGLVERTEXATTRIBL1I64VNVPROC = (index: GLuint, v: GLint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL2I64VNVPROC = (index: GLuint, v: GLint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL3I64VNVPROC = (index: GLuint, v: GLint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL4I64VNVPROC = (index: GLuint, v: GLint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL1UI64NVPROC = (index: GLuint, x: GLuint64EXT)(void)*;
def PFNGLVERTEXATTRIBL2UI64NVPROC = (index: GLuint, x: GLuint64EXT, y: GLuint64EXT)(void)*;
def PFNGLVERTEXATTRIBL3UI64NVPROC = (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT)(void)*;
def PFNGLVERTEXATTRIBL4UI64NVPROC = (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT)(void)*;
def PFNGLVERTEXATTRIBL1UI64VNVPROC = (index: GLuint, v: GLuint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL2UI64VNVPROC = (index: GLuint, v: GLuint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL3UI64VNVPROC = (index: GLuint, v: GLuint64EXT*)(void)*;
def PFNGLVERTEXATTRIBL4UI64VNVPROC = (index: GLuint, v: GLuint64EXT*)(void)*;
def PFNGLGETVERTEXATTRIBLI64VNVPROC = (index: GLuint, pname: GLenum, params: GLint64EXT*)(void)*;
def PFNGLGETVERTEXATTRIBLUI64VNVPROC = (index: GLuint, pname: GLenum, params: GLuint64EXT*)(void)*;
def PFNGLVERTEXATTRIBLFORMATNVPROC = (index: GLuint, size: GLint, type: GLenum, stride: GLsizei)(void)*;

@[c]glVertexAttribL1i64NV(index: GLuint, x: GLint64EXT): void;
@[c]glVertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT): void;
@[c]glVertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT): void;
@[c]glVertexAttribL4i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT): void;
@[c]glVertexAttribL1i64vNV(index: GLuint, v: GLint64EXT*): void;
@[c]glVertexAttribL2i64vNV(index: GLuint, v: GLint64EXT*): void;
@[c]glVertexAttribL3i64vNV(index: GLuint, v: GLint64EXT*): void;
@[c]glVertexAttribL4i64vNV(index: GLuint, v: GLint64EXT*): void;
@[c]glVertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT): void;
@[c]glVertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT): void;
@[c]glVertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT): void;
@[c]glVertexAttribL4ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT): void;
@[c]glVertexAttribL1ui64vNV(index: GLuint, v: GLuint64EXT*): void;
@[c]glVertexAttribL2ui64vNV(index: GLuint, v: GLuint64EXT*): void;
@[c]glVertexAttribL3ui64vNV(index: GLuint, v: GLuint64EXT*): void;
@[c]glVertexAttribL4ui64vNV(index: GLuint, v: GLuint64EXT*): void;
@[c]glGetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: GLint64EXT*): void;
@[c]glGetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: GLuint64EXT*): void;
@[c]glVertexAttribLFormatNV(index: GLuint, size: GLint, type: GLenum, stride: GLsizei): void;

GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV: [internal] int32 = 0x8F1E;
GL_ELEMENT_ARRAY_UNIFIED_NV: [internal] int32       = 0x8F1F;
GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV: [internal] int32 = 0x8F20;
GL_VERTEX_ARRAY_ADDRESS_NV: [internal] int32        = 0x8F21;
GL_NORMAL_ARRAY_ADDRESS_NV: [internal] int32        = 0x8F22;
GL_COLOR_ARRAY_ADDRESS_NV: [internal] int32         = 0x8F23;
GL_INDEX_ARRAY_ADDRESS_NV: [internal] int32         = 0x8F24;
GL_TEXTURE_COORD_ARRAY_ADDRESS_NV: [internal] int32 = 0x8F25;
GL_EDGE_FLAG_ARRAY_ADDRESS_NV: [internal] int32     = 0x8F26;
GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV: [internal] int32 = 0x8F27;
GL_FOG_COORD_ARRAY_ADDRESS_NV: [internal] int32     = 0x8F28;
GL_ELEMENT_ARRAY_ADDRESS_NV: [internal] int32       = 0x8F29;
GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV: [internal] int32  = 0x8F2A;
GL_VERTEX_ARRAY_LENGTH_NV: [internal] int32         = 0x8F2B;
GL_NORMAL_ARRAY_LENGTH_NV: [internal] int32         = 0x8F2C;
GL_COLOR_ARRAY_LENGTH_NV: [internal] int32          = 0x8F2D;
GL_INDEX_ARRAY_LENGTH_NV: [internal] int32          = 0x8F2E;
GL_TEXTURE_COORD_ARRAY_LENGTH_NV: [internal] int32  = 0x8F2F;
GL_EDGE_FLAG_ARRAY_LENGTH_NV: [internal] int32      = 0x8F30;
GL_SECONDARY_COLOR_ARRAY_LENGTH_NV: [internal] int32 = 0x8F31;
GL_FOG_COORD_ARRAY_LENGTH_NV: [internal] int32      = 0x8F32;
GL_ELEMENT_ARRAY_LENGTH_NV: [internal] int32        = 0x8F33;
GL_DRAW_INDIRECT_UNIFIED_NV: [internal] int32       = 0x8F40;
GL_DRAW_INDIRECT_ADDRESS_NV: [internal] int32       = 0x8F41;
GL_DRAW_INDIRECT_LENGTH_NV: [internal] int32        = 0x8F42;

def PFNGLBUFFERADDRESSRANGENVPROC = (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr)(void)*;
def PFNGLVERTEXFORMATNVPROC = (size: GLint, type: GLenum, stride: GLsizei)(void)*;
def PFNGLNORMALFORMATNVPROC = (type: GLenum, stride: GLsizei)(void)*;
def PFNGLCOLORFORMATNVPROC = (size: GLint, type: GLenum, stride: GLsizei)(void)*;
def PFNGLINDEXFORMATNVPROC = (type: GLenum, stride: GLsizei)(void)*;
def PFNGLTEXCOORDFORMATNVPROC = (size: GLint, type: GLenum, stride: GLsizei)(void)*;
def PFNGLEDGEFLAGFORMATNVPROC = (stride: GLsizei)(void)*;
def PFNGLSECONDARYCOLORFORMATNVPROC = (size: GLint, type: GLenum, stride: GLsizei)(void)*;
def PFNGLFOGCOORDFORMATNVPROC = (type: GLenum, stride: GLsizei)(void)*;
def PFNGLVERTEXATTRIBFORMATNVPROC = (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei)(void)*;
def PFNGLVERTEXATTRIBIFORMATNVPROC = (index: GLuint, size: GLint, type: GLenum, stride: GLsizei)(void)*;
def PFNGLGETINTEGERUI64I_VNVPROC = (value: GLenum, index: GLuint, result: GLuint64EXT*)(void)*;

@[c]glBufferAddressRangeNV(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr): void;
@[c]glVertexFormatNV(size: GLint, type: GLenum, stride: GLsizei): void;
@[c]glNormalFormatNV(type: GLenum, stride: GLsizei): void;
@[c]glColorFormatNV(size: GLint, type: GLenum, stride: GLsizei): void;
@[c]glIndexFormatNV(type: GLenum, stride: GLsizei): void;
@[c]glTexCoordFormatNV(size: GLint, type: GLenum, stride: GLsizei): void;
@[c]glEdgeFlagFormatNV(stride: GLsizei): void;
@[c]glSecondaryColorFormatNV(size: GLint, type: GLenum, stride: GLsizei): void;
@[c]glFogCoordFormatNV(type: GLenum, stride: GLsizei): void;
@[c]glVertexAttribFormatNV(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei): void;
@[c]glVertexAttribIFormatNV(index: GLuint, size: GLint, type: GLenum, stride: GLsizei): void;
@[c]glGetIntegerui64i_vNV(value: GLenum, index: GLuint, result: GLuint64EXT*): void;

GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV: [internal] int32 = 0x9350;
GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV: [internal] int32 = 0x9351;
GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV: [internal] int32 = 0x9352;
GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV: [internal] int32 = 0x9353;
GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV: [internal] int32 = 0x9354;
GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV: [internal] int32 = 0x9355;
GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV: [internal] int32 = 0x9356;
GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV: [internal] int32 = 0x9357;
GL_VIEWPORT_SWIZZLE_X_NV: [internal] int32          = 0x9358;
GL_VIEWPORT_SWIZZLE_Y_NV: [internal] int32          = 0x9359;
GL_VIEWPORT_SWIZZLE_Z_NV: [internal] int32          = 0x935A;
GL_VIEWPORT_SWIZZLE_W_NV: [internal] int32          = 0x935B;

def PFNGLVIEWPORTSWIZZLENVPROC = (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum)(void)*;

@[c]glViewportSwizzleNV(index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum): void;

GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: [internal] int32 = 0x9630;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: [internal] int32 = 0x9632;
GL_MAX_VIEWS_OVR: [internal] int32                  = 0x9631;
GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: [internal] int32 = 0x9633;

def PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei)(void)*;
def PFNGLNAMEDFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei)(void)*;

@[c]glFramebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void;
@[c]glNamedFramebufferTextureMultiviewOVR(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void;
